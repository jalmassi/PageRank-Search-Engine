perlis,
a.
j.
samelson,k.
.n
ca581203
jb
march
22,
1978
8:28
pm
.x
100
5
1
123
5
1
164
5
1
1
5
1
1
5
1
1
5
1
205
5
1
210
5
1
214
5
1
1982
5
1
398
5
1
642
5
1
669
5
1
1
6
1
1
6
1
1
6
1
1
6
1
1
6
1
1
6
1
1
6
1
1
6
1
1
6
1
1
6
1
165
6
1
196
6
1
196
6
1
1273
6
1
1883
6
1
324
6
1
43
6
1
53
6
1
91
6
1
410
6
1
3184
6
1
.i
2
.t
extraction
of
roots
by
repeated
subtractions
for
digital
computers
.b
cacm
december,
1958
.a
sugai,
i.
.n
ca581202
jb
march
22,
1978
8:29
pm
.x
2
5
2
2
5
2
2
5
2
.i
3
.t
techniques
department
on
matrix
program
schemes
.b
cacm
december,
1958
.a
friedman,
m.
d.
.n
ca581201
jb
march
22,
1978
8:30
pm
.x
3
5
3
3
5
3
3
5
3
.i
4
.t
glossary
of
computer
engineering
and
programming
terminology
.b
cacm
november,
1958
.n
ca581103
jb
march
22,
1978
8:32
pm
.x
4
5
4
4
5
4
4
5
4
.i
5
.t
two
square-root
approximations
.b
cacm
november,
1958
.a
wadey,
w.
g.
.n
ca581102
jb
march
22,
1978
8:33
pm
.x
5
5
5
5
5
5
5
5
5
.i
6
.t
the
use
of
computers
in
inspection
procedures
.b
cacm
november,
1958
.a
muller,
m.
e.
.n
ca581101
jb
march
22,
1978
8:33
pm
.x
6
5
6
6
5
6
6
5
6
477
5
6
6
6
6
.i
7
.t
glossary
of
computer
engineering
and
programming
terminology
.b
cacm
october,
1958
.n
ca581003
jb
march
22,
1978
8:35
pm
.x
7
5
7
7
5
7
7
5
7
.i
8
.t
on
the
equivalence
and
transformation
of
program
schemes
.b
cacm
october,
1958
.a
friedman,
m.
d.
.n
ca581002
jb
march
22,
1978
8:36
pm
.x
8
5
8
8
5
8
8
5
8
.i
9
.t
proposal
for
an
uncol
.b
cacm
october,
1958
.a
conway,
m.
e.
.n
ca581001
jb
march
22,
1978
8:37
pm
.x
9
5
9
9
5
9
9
5
9
.i
10
.t
glossary
of
computer
engineering
and
programming
terminology
.b
cacm
september,
1958
.n
ca580903
jb
march
22,
1978
8:39
pm
.x
10
5
10
10
5
10
10
5
10
.i
11
.t
the
problem
of
programming
communication
with
changing
machines
a
proposed
solution-part
2
.b
cacm
september,
1958
.a
strong,
j.
wegstein,
j.
tritter,
a.
olsztyn,
j.
mock,
o.
steel,
t.
.n
ca580902
jb
march
22,
1978
8:41
pm
.x
1781
5
11
1988
5
11
11
5
11
11
5
11
11
5
11
123
6
11
196
6
11
919
6
11
990
6
11
1007
6
11
1046
6
11
1131
6
11
1139
6
11
1140
6
11
1149
6
11
1198
6
11
1215
6
11
1223
6
11
1265
6
11
1303
6
11
1323
6
11
1358
6
11
1366
6
11
1421
6
11
1460
6
11
1462
6
11
1463
6
11
1467
6
11
1468
6
11
1477
6
11
1491
6
11
1496
6
11
1496
6
11
1531
6
11
1535
6
11
1565
6
11
1601
6
11
1602
6
11
1613
6
11
1614
6
11
1626
6
11
1641
6
11
1787
6
11
1788
6
11
205
6
11
224
6
11
249
6
11
288
6
11
316
6
11
381
6
11
381
6
11
398
6
11
11
6
11
11
6
11
14
6
11
404
6
11
410
6
11
463
6
11
464
6
11
483
6
11
3184
6
11
3188
6
11
584
6
11
600
6
11
680
6
11
691
6
11
763
6
11
799
6
11
.i
12
.t
error
estimation
in
runge-kutta
procedures
.b
cacm
september,
1958
.a
call,
d.
h.
reeves,
r.
f.
.n
ca580901
jb
march
22,
1978
8:56
pm
.x
12
5
12
12
5
12
12
5
12
.i
13
.t
glossary
of
computer
engineering
and
programming
terminology
.b
cacm
august,
1958
.n
ca580805
jb
march
22,
1978
8:57
pm
.x
13
5
13
13
5
13
13
5
13
.i
14
.t
the
problem
of
programming
communication
with
changing
machines
a
proposed
solution
(part
1)
.b
cacm
august,
1958
.a
strong,
j.
wegstein,
j.
tritter,
a.
olsztyn,
j.
mock,
o.
steel,
t.
.n
ca580804
jb
march
22,
1978
9:02
pm
.x
1159
5
14
1988
5
14
381
5
14
14
5
14
14
5
14
14
5
14
1496
6
14
381
6
14
11
6
14
14
6
14
14
6
14
14
6
14
.i
15
.t
recursive
curve
fitting
technique
.b
cacm
august,
1958
.a
giblin,
j.
.n
ca580803
jb
march
22,
1978
9:02
pm
.x
15
5
15
15
5
15
15
5
15
75
5
15
15
6
15
94
6
15
.i
16
.t
secant
modification
of
newton's
method
.b
cacm
august,
1958
.a
jeeves,
t.
a.
.n
ca580802
jb
march
22,
1978
9:03
pm
.x
16
5
16
16
5
16
16
5
16
39
5
16
16
6
16
.i
17
.t
on
programming
of
arithmetic
operations
.b
cacm
august,
1958
.a
ershov,
a.
p.
.n
ca580801
jb
march
22,
1978
9:04
pm
.x
1134
5
17
17
5
17
17
5
17
17
5
17
83
5
17
17
6
17
17
6
17
77
6
17
408
6
17
.i
18
.t
simple
automatic
coding
systems
.b
cacm
july,
1958
.a
adams,
e.
s.
schlesinger,
s.
i.
.n
ca580701
jb
march
22,
1978
9:06
pm
.x
18
5
18
18
5
18
18
5
18
.i
19
.t
glossary
of
computer
engineering
and
programming
terminology
.b
cacm
june,
1958
.n
ca580603
jb
march
22,
1978
9:07
pm
.x
19
5
19
19
5
19
19
5
19
.i
20
.t
accelerating
convergence
of
iterative
processes
.w
a
technique
is
discussed
which,
when
applied
to
an
iterative
procedure
for
the
solution
of
an
equation,
accelerates
the
rate
of
convergence
if
the
iteration
converges
and
induces
convergence
if
the
iteration
diverges.
an
illustrative
example
is
given.
.b
cacm
june,
1958
.a
wegstein,
j.
h.
.n
ca580602
jb
march
22,
1978
9:09
pm
.x
20
5
20
20
5
20
20
5
20
.i
21
.t
algebraic
formulation
of
flow
diagrams
.b
cacm
june,
1958
.a
voorhees,
e.
a.
.n
ca580601
jb
march
22,
1978
9:10
pm
.x
21
5
21
21
5
21
21
5
21
679
5
21
21
6
21
407
6
21
3184
6
21
.i
22
.t
unusual
applications
department--automatic
implementation
of
computer
logic
.b
cacm
may,
1958
.a
morris,
e.
f.
wohr,
t.
e.
.n
ca580506
jb
march
22,
1978
9:11
pm
.x
22
5
22
22
5
22
22
5
22
.i
23
.t
binary
and
truth-function
operations
on
a
decimal
computer
with
an
extract
command
.b
cacm
may,
1958
.a
kautz,
w.
h.
.n
ca580505
jb
march
22,
1978
9:12
pm
.x
23
5
23
23
5
23
23
5
23
.i
24
.t
an
improved
decimal
redundancy
check
.b
cacm
may,
1958
.a
sisson,
r.
l.
.n
ca580504
jb
march
22,
1978
9:13
pm
.x
24
5
24
24
5
24
24
5
24
.i
25
.t
general
purpose
programming
systems
.b
cacm
may,
1958
.a
holt,
a.
w.
.n
ca580503
jb
march
22,
1978
9:14
pm
.x
25
5
25
25
5
25
25
5
25
.i
26
.t
a
subroutine
method
for
calculating
logarithms
.b
cacm
may,
1958
.a
bemer,
r.
w.
.n
ca580502
jb
march
22,
1978
9:16
pm
.x
26
5
26
26
5
26
26
5
26
848
5
26
26
6
26
35
6
26
.i
27
.t
note
on
empirical
bounds
for
generating
bessel
functions
.b
cacm
may,
1958
.a
randels,
j.
b.
reeves,
r.
f.
.n
ca580501
jb
march
22,
1978
9:17
pm
.x
27
5
27
27
5
27
27
5
27
.i
28
.t
request
for
methods
or
programs
.b
cacm
april,
1958
.a
corley,
h.
p.
t.
.n
ca580402
jb
march
22,
1978
9:18
pm
.x
28
5
28
28
5
28
28
5
28
.i
29
.t
need
for
an
algorithm
.b
cacm
april,
1958
.a
selden,
w.
.n
ca580401
jb
march
22,
1978
9:19
pm
.x
29
5
29
29
5
29
29
5
29
.i
30
.t
algorithm
for
analyzing
logical
statements
to
produce
a
truth
function
table
.b
cacm
march,
1958
.a
wolpe,
h.
.n
ca580302
jb
march
22,
1978
9:20
pm
.x
30
5
30
30
5
30
30
5
30
.i
31
.t
ibm
704
code-nundrums
.b
cacm
march,
1958
.a
grumette,
m.
.n
ca580301
jb
march
22,
1978
9:21
pm
.x
31
5
31
31
5
31
31
5
31
.i
32
.t
variable-width
tables
with
binary-search
facility
.b
cacm
february,
1958
.a
halpern,
m.
.n
ca580201
jb
march
22,
1978
9:22
pm
.x
32
5
32
32
5
32
32
5
32
.i
33
.t
a
programmed
binary
counter
for
the
ibm
type
650
calculator
.b
cacm
january,
1958
.a
kenny,
b.
c.
hunter,
j.
a.
.n
ca580103
jb
march
22,
1978
9:25
pm
.x
33
5
33
33
5
33
33
5
33
.i
34
.t
tables
for
automatic
computation
.b
cacm
january,
1958
.a
wilf,
h.
s.
.n
ca580102
jb
march
22,
1978
9:26
pm
.x
34
5
34
34
5
34
34
5
34
.i
35
.t
a
machine
method
for
square-root
computation
.b
cacm
january,
1958
.a
bemer,
r.
w.
.n
ca580101
jb
march
22,
1978
9:27
pm
.x
35
5
35
35
5
35
35
5
35
848
5
35
26
6
35
35
6
35
.i
36
.t
a
queue
network
simulator
for
the
ibm
650
and
burroughs
220
.b
cacm
december,
1959
.a
conway,
r.
w.
johnson,
b.
m.
maxwell,
w.
l.
.n
ca591206
jb
march
22,
1978
3:35
pm
.x
36
5
36
36
5
36
36
5
36
.i
37
.t
impact
of
computer
developments
.b
cacm
december,
1959
.a
humphrey,
s.
m.
.n
ca591205
jb
march
22,
1978
3:36
pm
.x
37
5
37
37
5
37
37
5
37
.i
38
.t
a
proposed
interpretation
in
algol
.b
cacm
december,
1959
.a
irons,
e.
t.
acton,
f.
s.
.n
ca591204
jb
march
22,
1978
3:37
pm
.x
38
5
38
38
5
38
38
5
38
.i
39
.t
the
secant
method
for
simultaneous
nonlinear
equations
.w
a
procedure
for
the
simultaneous
solution
of
a
system
of
not-necessarily-linear
equations,
a
generalization
of
the
secant
method
for
a
single
function
of
one
variable,
is
given.
.b
cacm
december,
1959
.a
wolfe,
p.
.n
ca591203
jb
march
22,
1978
3:39
pm
.x
39
4
39
16
5
39
39
5
39
39
5
39
39
5
39
.i
40
.t
fingers
or
fists?
(the
choice
of
decimal
or
binary
representation)
.w
the
binary
number
system
offers
many
advantages
over
a
decimal
representation
for
a
high-performance,
general-purpose
computer.
the
greater
simplicity
of
a
binary
arithmetic
unit
and
the
greater
compactness
of
binary
numbers
both
contribute
directly
to
arithmetic
speed.
less
obvious
and
perhaps
more
important
is
the
way
binary
addressing
and
instruction
formats
can
increase
the
overall
performance.
binary
addresses
are
also
essential
to
certain
powerful
operations
which
are
not
practical
with
decimal
instruction
formats.
on
the
other
hand,
decimal
numbers
are
essential
for
communicating
between
man
and
the
computer.
in
applications
requiring
the
processing
of
a
large
volume
of
inherently
decimal
input
and
output
data,
the
time
for
decimal-binary
conversion
needed
by
a
purely
binary
computer
may
be
significant.
a
slower
decimal
adder
may
take
less
time
than
a
fast
binary
adder
doing
an
addition
and
two
conversions.
a
careful
review
of
the
significance
of
decimal
and
binary
addressing
and
both
binary
and
decimal
data
arithmetic,
supplemented
by
efficient
conversion
instructions.
.b
cacm
december,
1959
.a
buchholz,
w.
.n
ca591202
jb
march
22,
1978
3:47
pm
.x
40
5
40
40
5
40
40
5
40
.i
41
.t
some
notes
on
computer
research
in
eastern
europe
.b
cacm
december,
1959
.a
nadler,
m.
.n
ca591201
jb
march
22,
1978
3:48
pm
.x
41
4
41
41
5
41
41
5
41
41
5
41
67
5
41
.i
42
.t
a
new
method
of
computation
of
square
roots
without
using
division
.b
cacm
november,
1959
.a
sarafyan,
d.
.n
ca591106
jb
march
22,
1978
3:50
pm
.x
42
5
42
42
5
42
42
5
42
.i
43
.t
a
technique
for
handling
macro
instructions
.b
cacm
november,
1959
.a
greenwald,
i.
d.
.n
ca591105
jb
march
22,
1978
3:51
pm
.x
205
5
43
43
5
43
43
5
43
43
5
43
1
6
43
43
6
43
.i
44
.t
runcible-algebraic
translation
on
a
limited
computer
.b
cacm
november,
1959
.a
knuth,
d.
e.
.n
ca591104
jb
march
22,
1978
3:52
pm
.x
1134
4
44
1141
4
44
364
4
44
405
4
44
438
4
44
561
4
44
44
4
44
222
5
44
364
5
44
44
5
44
44
5
44
44
5
44
77
5
44
100
6
44
224
6
44
44
6
44
44
6
44
77
6
44
82
6
44
98
6
44
.i
45
.t
flow
outlining-a
substitute
for
flow
charting
.b
cacm
november,
1959
.a
gant,
w.
t.
.n
ca591103
jb
march
22,
1978
3:53
pm
.x
45
5
45
45
5
45
45
5
45
728
5
45
920
6
45
45
6
45
.i
46
.t
multiprogramming
stretch:
feasibility
considerations
.w
the
tendency
towards
increased
parallelism
in
computers
is
noted.
exploitation
of
this
parallelism
presents
a
number
of
new
problems
in
machine
design
and
in
programming
systems.
minimum
requirements
for
successful
concurrent
execution
of
several
independent
problem
programs
are
discussed.
these
requirements
are
met
in
the
stretch
system
by
a
carefully
balanced
combination
of
built-in
and
programmed
logic.
techniques
are
described
which
place
the
burden
of
the
programmed
logic
on
system
programs
(supervisory
program
and
compiler)
rather
than
on
problem
programs.
.b
cacm
november,
1959
.a
codd,
e.
f.
lowry,
e.
s.
mcdonough,
e.
scalzi,
c.
a.
.n
ca591102
jb
march
22,
1978
3:57
pm
.x
168
5
46
491
5
46
46
5
46
46
5
46
46
5
46
168
6
46
185
6
46
196
6
46
46
6
46
46
6
46
.i
47
.t
russian
visit
to
u.s.
computers
.b
cacm
november,
1959
.a
zaitzeff,
e.
m.
astrahan,
m.
m.
.n
ca591101
jb
march
22,
1978
3:59
pm
.x
47
5
47
47
5
47
47
5
47
.i
48
.t
shift-register
code
for
indexing
applications
.w
in
this
communication
the
use
of
a
shift-register
code
with
n
=
10
is
described
for
calling
64
wireless
telemetering
stations
in
a
fixed
cyclical
order.
a
high
degree
of
redundancy
is
used,
permitting
a
single-error
correcting
code
("minimum-distance-three"
code)
with
64
10-bit
code
words
to
be
employed
as
the
station
identification
code.
embedding
this
in
the
shift-register
code
with
period
1023
permits
the
code
to
be
employed
without
punctuation,
each
of
the
telemetering
station
receivers
simply
putting
received
ones
and
zeros
into
a
shift
register.
each
time
the
given
code
combination
arises
identifying
the
particular
station
(barring
for
tuitous
error
combinations
of
very
low
probability)
it
has
been
called.
the
communication
describes
the
properties
and
application
of
the
code
in
some
detail
and
the
finding
of
the
particular
example
to
be
employed
on
ural,
the
soviet-built
drum
computer
donated
to
the
indian
statistical
institute
by
the
united
nations
technical
aid
administration
(untaa).
.b
cacm
october,
1959
.a
nadler,
m.
sengupta,
a.
.n
ca591011
jb
march
22,
1978
4:07
pm
.x
48
5
48
48
5
48
48
5
48
.i
49
.t
scientific
and
business
applications
(oracle
curve
plotter)
.b
cacm
october,
1959
.a
fike,
c.
t.
.n
ca591010
jb
march
22,
1978
4:08
pm
.x
49
5
49
49
5
49
49
5
49
.i
50
.t
statistical
programs
for
the
ibm
650-part
ii
.b
cacm
october,
1959
.a
hamblen,
j.
w.
.n
ca591009
jb
march
22,
1978
4:09
pm
.x
50
5
50
50
5
50
50
5
50
.i
51
.t
on
the
construction
of
micro-flowcharts
.b
cacm
october,
1959
.a
gorn,
s.
ingerman,
p.
z.
crozier,
j.
b.
.n
ca591008
jb
march
22,
1978
4:10
pm
.x
249
5
51
51
5
51
51
5
51
51
5
51
196
6
51
303
6
51
51
6
51
.i
52
.t
an
efficient
method
for
generating
uniformly
distributed
points
on
the
surface
on
an
n-dimensional
sphere
(corrigendum)
.b
cacm
october,
1959
.a
cook,
j.
m.
.n
ca591007
jb
march
22,
1978
4:12
pm
.x
52
5
52
52
5
52
52
5
52
.i
53
.t
recommendations
of
the
share
algol
committee
.b
cacm
october,
1959
.n
ca591006
jb
march
22,
1978
4:13
pm
.x
214
5
53
53
5
53
53
5
53
53
5
53
1
6
53
53
6
53
91
6
53
.i
54
.t
sale,
a
simple
algebraic
language
for
engineers
.b
cacm
october,
1959
.a
brittenham,
w.
r.
clark,
k.
kuss,
g.
thompson,
h.
smith,
a.
o.
.n
ca591005
jb
march
22,
1978
4:14
pm
.x
405
4
54
54
4
54
54
5
54
54
5
54
54
5
54
93
5
54
.i
55
.t
an
algebraic
translator
.b
cacm
october,
1959
.a
kaner,
h.
.n
ca591004
jb
march
22,
1978
4:15
pm
.x
405
5
55
55
5
55
55
5
55
55
5
55
224
6
55
55
6
55
77
6
55
93
6
55
.i
56
.t
proposed
standard
flow
chart
symbols
.b
cacm
october,
1959
.n
ca591003
jb
march
22,
1978
4:16
pm
.x
56
5
56
56
5
56
56
5
56
.i
57
.t
j.e.i.d.a.
and
its
computer
center
.b
cacm
october,
1959
.n
ca591002
jb
march
22,
1978
4:17
pm
.x
57
5
57
57
5
57
57
5
57
.i
58
.t
lem-1,
small
size
general
purpose
digital
computer
using
magnetic
(ferrite)
elements
.w
the
paper
examines
some
of
the
questions
of
development
and
construction
of
a
general
purpose
digital
computer
using
contactless
magnetic
(ferrite)
and
capacitive
"dezu"
(long
duration
capacitive
memory)
elements,
developed
at
the
laboratory
of
electrical
modeling
vinityi
an
sssr,
under
the
supervision
of
professor
l.i.
gutenmacher.
.b
cacm
october,
1959
.a
machmudov,
u.
a.
.n
ca591001
jb
march
22,
1978
4:21
pm
.x
215
5
58
58
5
58
58
5
58
58
5
58
58
6
58
.i
59
.t
survey
of
progress
and
trend
of
development
and
use
of
automatic
data
processing
in
business
and
management
control
systems
of
the
federal
government,
as
of
december
1957-iii
.b
cacm
september,
1959
.n
ca590910
jb
march
22,
1978
4:41
pm
.x
59
5
59
59
5
59
59
5
59
.i
60
.t
the
alpha
vector
transformation
of
a
system
of
linear
constraints
.b
cacm
september,
1959
.a
wersan,
s.
j.
.n
ca590909
jb
march
22,
1978
4:42
pm
.x
60
5
60
60
5
60
60
5
60
.i
61
.t
ibm
709
tape
matrix
compiler
.b
cacm
september,
1959
.a
hornick,
s.
d.
.n
ca590908jb
march
22,
1978
4:43
pm
.x
61
5
61
61
5
61
61
5
61
.i
62
.t
multi-dimensional
least-squares
polynomial
curve
fitting
.b
cacm
september,
1959
.a
lesh,
f.
h.
.n
ca590907
jb
march
22,
1978
4:44
pm
.x
62
5
62
62
5
62
62
5
62
.i
63
.t
octal
diagrams
of
binary
conception
and
their
applicability
to
computer
design
logic
.w
this
paper
dates
back
the
genesis
of
binary
conception
circa
5000
years
ago,
and
octal
diagrams
about
4800
years
ago,
as
derived
by
the
chinese
ancients.
it
analyzes
the
applicability
of
binary
trinities
of
the
octal
diagrams
to
modern
electronic-digital-computer
design
logic.
.b
cacm
september,
1959
.a
li,
s.
t.
.n
ca590906
jb
march
22,
1978
4:47
pm
.x
63
5
63
63
5
63
63
5
63
.i
64
.t
remarks
on
algol
and
symbol
manipulation
.b
cacm
september,
1959
.a
green,
j.
.n
ca590905
jb
march
22,
1978
4:47
pm
.x
206
5
64
207
5
64
64
5
64
64
5
64
64
5
64
64
6
64
64
6
64
.i
65
.t
algol
sub-committee
report
-
extensions
.b
cacm
september,
1959
.a
dijkstra,
e.
w.
heise,
w.
perlis,
j.
a.
samelson,
k.
.n
ca590904
jb
march
22,
1978
4:49
pm
.x
65
5
65
65
5
65
65
5
65
.i
66
.t
a
proposal
for
a
generalized
card
code
for
256
characters
.b
cacm
september,
1959
.a
bemer,
r.
w.
.n
ca590903
jb
march
22,
1978
4:50
pm
.x
66
5
66
66
5
66
66
5
66
.i
67
.t
central-european
computers
.b
cacm
september,
1959
.a
blachman,
n.
m.
.n
ca590902
jb
march
22,
1978
4:52
pm
.x
67
4
67
41
5
67
67
5
67
67
5
67
67
5
67
79
5
67
67
6
67
.i
68
.t
the
role
of
the
university
in
computers,
data
processing
and
related
fields
.w
a
study
was
made
of
university
programs
in
the
united
states
in
the
fields
of
computers,
data
processing,
operations
research,
and
other
closely
related
fields.
university
policies,
organization,
administration,
faculties,
students,
researches,
curricula,
equipment,
and
financing
were
investigated.
an
integrated
university
program
is
recommended
reflecting
the
conviction
that
many
present
activities
related
to
computers
will
develop
into
disciplines
and
as
such
are
the
legitimate
province
of
the
university
scholar.
details
on
a
recommended
graduate
school
of
"computer
sciences"
are
given.
.b
cacm
september,
1959
.a
fein,
l.
.n
ca590901
jb
march
22,
1978
6:05
pm
.x
1205
5
68
68
5
68
68
5
68
68
5
68
1100
6
68
1104
6
68
1107
6
68
68
6
68
.i
69
.t
statistical
programs
for
the
ibm
650-part
i
.w
a
collection
is
given
of
brief
descriptions
of
statistical
programs
now
in
use
in
university
computing
centers
which
have
ibm
650's.
.b
cacm
august,
1959
.a
hamblen,
j.
w.
.n
ca590804
jb
march
22,
1978
6:07
pm
.x
69
5
69
69
5
69
69
5
69
.i
70
.t
construction
of
a
set
of
test
matrices
.w
this
paper
develops
the
equations
and
properties
of
a
set
of
test
matrices
which
are
useful
in
the
determination
of
the
accuracy
of
routines
for
finding
the
inverse,
determinant
and/or
eigenvalues
of
a
matrix.
.b
cacm
august,
1959
.a
aegerter,
m.
j.
.n
ca590803
jb
march
22,
1978
6:09
pm
.x
70
5
70
70
5
70
70
5
70
.i
71
.t
proposal
for
a
feasible
programming
system
.w
this
paper
proposes
designing
a
programming
facility
(itself
involving
a
digital
computer
and
a
program)
which
will
assist
the
preparation
of
large-scale
real-time
programs.
this
facility
is
to
be
capable
of
preparing
programs
for
any
of
a
variety
of
machines
having
characteristics
similar
to
those
of
the
facility's
computer.
one
of
the
basic
assumptions
is
that
there
will
be
enough
random-access
storage
available
to
avoid
the
necessity
for
segmenting
a
constructed
program
in
any
fashion
other
than
a
trivial
one.
while
this
assumption
is
somewhat
unrealistic,
it
is
intended
to
provide
an
opportunity
to
concentrate
on
the
other
aspects
of
program
construction.
the
programming
system
should
stress
the
discovery
in
source
program
statements
of
as
many
errors
as
possible,
before
attempting
to
construct
an
object
program.
among
the
computer
characteristics
which
are
advocated
are
a
program
interrupt
scheme,
a
large
set
of
characters,
and
indirect
addressing.
.b
cacm
august,
1959
.a
bagley,
p.
r.
.n
ca590802
jb
march
22,
1978
6:16
pm
.x
71
5
71
71
5
71
71
5
71
.i
72
.t
an
educational
program
in
computing
.b
cacm
august,
1959
.a
hollingsworth,
j.
.n
ca590801
jb
march
22,
1978
6:18
pm
.x
72
5
72
72
5
72
72
5
72
.i
73
.t
a
real
time
data
assimilator
.b
cacm
july,
1959
.a
gschwind,
h.
w.
.n
ca590705
jb
march
22,
1978
6:19
pm
.x
73
5
73
73
5
73
73
5
73
.i
74
.t
a
high-speed
sorting
procedure
.b
cacm
july,
1959
.a
shell,
d.
l.
.n
ca590704
jb
march
22,
1978
6:20
pm
.x
1919
5
74
74
5
74
74
5
74
74
5
74
852
5
74
864
5
74
865
5
74
864
6
74
1175
6
74
232
6
74
232
6
74
308
6
74
309
6
74
309
6
74
74
6
74
74
6
74
74
6
74
74
6
74
3187
6
74
.i
75
.t
parameter
estimation
for
simple
nonlinear
models
.b
cacm
july,
1959
.a
chow,
w.
m.
.n
ca590703
jb
march
22,
1978
6:22
pm
.x
75
4
75
75
4
75
15
5
75
75
5
75
75
5
75
75
5
75
94
5
75
.i
76
.t
binary
conversion,
with
fixed
decimal
precision,
of
a
decimal
fraction
.b
cacm
july,
1959
.a
taranto,
d.
.n
ca590702
jb
march
22,
1978
6:23
pm
.x
76
5
76
76
5
76
76
5
76
.i
77
.t
on
gat
and
the
construction
of
translators
.b
cacm
july,
1959
.a
arden,
b.
graham,
r.
.n
ca590701
jb
march
22,
1978
6:24
pm
.x
1134
5
77
1141
5
77
364
5
77
405
5
77
438
5
77
44
5
77
77
5
77
77
5
77
77
5
77
561
5
77
100
6
77
224
6
77
224
6
77
224
6
77
224
6
77
249
6
77
303
6
77
393
6
77
17
6
77
44
6
77
55
6
77
77
6
77
77
6
77
77
6
77
77
6
77
77
6
77
77
6
77
77
6
77
93
6
77
98
6
77
408
6
77
.i
78
.t
remarks
on
the
practical
solution
of
characteristic
value
problems
.w
this
paper
is
concerned
with
the
practical
solution
of
characteristic
value
problem
for
an
ordinary
differential
equation.
it
is
at
once
apparent
that
sequential
computers,
be
they
digital
or
analog,
solve
initial
value
problems,
rather
than
boundary
value
problems,
and
some
mathematical
process
must
be
found
to
compensate
for
the
machine's
inadequacy.
(compensating
for
machine
imperfection
is,
of
course,
the
normal
activity
of
the
numerical
analyst.)
a
number
of
other
papers
have
applied
particular
devices
to
particular
problems.
the
purpose
of
this
note
is
to
establish
a
mathematical
framework
or
model
for
these
practical
procedures
and
thus
assist
in
the
use
and
extension
of
the
ideas
in
other
particular
problems.
.b
cacm
june,
1959
.a
wouk,
a.
.n
ca590606
jb
march
22,
1978
6:30
pm
.x
78
5
78
78
5
78
78
5
78
.i
79
.t
programming
for
a
machine
with
an
extended
address
calculational
mechanism
.b
cacm
june,
1959
.a
schecher,
h.
.n
ca590605
jb
march
22,
1978
6:31
pm
.x
67
5
79
79
5
79
79
5
79
79
5
79
79
6
79
.i
80
.t
a
technique
for
computing
critical
rotational
speeds
of
flexible
shafts
on
an
automatic
computer
.b
cacm
june,
1959
.a
schwartz,
b.
l.
.n
ca590604
jb
march
22,
1978
6:35
pm
.x
80
5
80
80
5
80
80
5
80
.i
81
.t
norc
high-speed
printer
.b
cacm
june,
1959
.a
gleissner,
g.
h.
.n
ca590603
jb
march
22,
1978
6:36
pm
.x
81
5
81
81
5
81
81
5
81
.i
82
.t
handling
identifiers
as
internal
symbols
in
language
processors
.w
substitution
of
computer-oriented
symbols
for
programmer-oriented
symbols
in
language
processors
is
examined
and
a
feasible
method
for
doing
so
is
presented.
.b
cacm
june,
1959
.a
williams,
f.
a.
.n
ca590602
jb
march
22,
1978
6:38
pm
.x
222
5
82
82
5
82
82
5
82
82
5
82
799
5
82
945
6
82
399
6
82
44
6
82
82
6
82
82
6
82
404
6
82
.i
83
.t
a
visit
to
computation
centers
in
the
soviet
union
.b
cacm
june,
1959
.a
carr
iii,
j.
w.
.n
ca590601
jb
march
22,
1978
6:39
pm
.x
1134
4
83
83
4
83
1349
5
83
17
5
83
83
5
83
83
5
83
83
5
83
236
6
83
323
6
83
83
6
83
415
6
83
.i
84
.t
survey
of
progress
and
trend
of
development
and
use
of
automatic
data
processing
in
business
and
management
control
systems
of
the
federal
government,
as
of
december
1957-ii
(part
2
see
ca590406)
.b
cacm
may,
1959
.n
ca590502
jb
march
22,
1978
6:42
pm
.x
84
5
84
84
5
84
84
5
84
.i
85
.t
error
analysis
in
floating
point
arithmetic
.b
cacm
may,
1959
.a
carr
iii,
j.
w.
.n
ca590501
jb
march
22,
1978
6:43
pm
.x
1148
5
85
85
5
85
85
5
85
85
5
85
85
6
85
.i
86
.t
survey
of
progress
and
trend
of
development
and
use
of
automatic
data
processing
in
business
and
management
control
systems
of
the
federal
government,
as
of
december
1957
.b
cacm
april,
1959
.a
controller
general
of
the
united
states
to
the
congress
of
the
united
states
.n
ca590406
jb
march
22,
1978
6:48
pm
.x
86
5
86
86
5
86
86
5
86
.i
87
.t
a
note
on
a
method
for
generating
points
uniformly
on
n-dimensional
spheres
.b
cacm
april,
1959
.a
muller,
m.
e.
.n
ca590405
jb
march
22,
1978
7:04
pm
.x
2333
4
87
87
4
87
2333
5
87
87
5
87
87
5
87
87
5
87
88
5
87
1793
6
87
87
6
87
88
6
87
.i
88
.t
an
efficient
method
for
generating
uniformly
distributed
points
on
the
surface
of
an
n-dimensional
sphere
.b
cacm
april,
1959
.a
hicks,
j.
s.
wheeling,
r.
f.
.n
ca590404
jb
march
22,
1978
7:10
pm
.x
2333
5
88
87
5
88
88
5
88
88
5
88
88
5
88
1793
6
88
87
6
88
88
6
88
88
6
88
.i
89
.t
a
routine
to
find
the
solution
of
simultaneous
linear
equations
with
polynomial
coefficients
.b
cacm
april,
1959
.a
larson,
e.
h.
marshall,
d.
p.
.n
ca590403
jb
march
22,
1978
7:12
pm
.x
89
5
89
89
5
89
89
5
89
.i
90
.t
binary
arithmetic
for
discretely
variable
word
length
in
a
serial
computer
.b
cacm
april,
1959
.a
ercoli,
p.
vacca,
r.
.n
ca590402
jb
march
22,
1978
7:13
pm
.x
107
5
90
90
5
90
90
5
90
90
5
90
90
6
90
.i
91
.t
a
mathematical
procedure
for
machine
division
.b
cacm
april,
1959
.a
gilman,
r.
e.
.n
ca590401
jb
march
22,
1978
7:14
pm
.x
214
5
91
1593
5
91
91
5
91
91
5
91
91
5
91
1
6
91
1292
6
91
53
6
91
91
6
91
91
6
91
.i
92
.t
a
checklist
of
intelligence
for
programming
systems
.w
a
remarkable
variation
exists
in
the
degree
of
sophistication
of
various
programming
systems.
a
particular
manifestation
is
the
jungle
of
assorted
devices
for
reproducing
limited
human
decision
procedures.
an
attempt
is
made
here
to
begin
a
systematic
classification
of
the
various
devices
for
educating
the
computer
to
take
over
the
decision-making
functions
of
one
or
many
human
operators,
both
those
that
have
been
demonstrated
feasible
to
date
and
those
that
are
highly
desirable
for
the
future.
.b
cacm
march,
1959
.a
bemer,
r.
w.
.n
ca590304
jb
march
22,
1978
8:01
pm
.x
92
5
92
92
5
92
92
5
92
.i
93
.t
from
formulas
to
computer
oriented
language
.w
a
technique
is
shown
for
enabling
a
computer
to
translate
simple
algebraic
formulas
into
a
three
address
computer
code.
.b
cacm
march,
1959
.a
wegstein,
j.
h.
.n
ca590303
jb
march
22,
1978
8:03
pm
.x
405
5
93
54
5
93
93
5
93
93
5
93
93
5
93
224
6
93
55
6
93
77
6
93
93
6
93
93
6
93
.i
94
.t
an
iterative
method
for
fitting
the
logistic
curve
.w
an
iterative
method
is
given
for
finding
a
logistic
curve
of
best
least
squares
fit
to
a
set
of
two-dimensional
points.
.b
cacm
march,
1959
.a
howell,
j.r.
.n
ca590302
jb
march
22,
1978
8:04
pm
.x
75
5
94
94
5
94
94
5
94
94
5
94
15
6
94
94
6
94
.i
95
.t
elimination
of
special
functions
from
differential
equations
.w
a
set
of
ordinary
differential
equations
which
contains
mathematical
functions
requiring
the
use
of
subroutines
for
numerical
solution
by
electronic
computer,
tabular
data
for
numerical
solution
by
hand
calculation
or
function
generators
when
analog
methods
are
applied
can
sometimes
be
expanded
to
an
equivalent
set
of
equations
which
do
not
contain
the
functions.
this
is
practical
if
these
functions
satisfy
sufficiently
simple
differential
equations.
thus
among
those
functions
which
can
be
eliminated
by
this
procedure
are
the
trigonometric,
inverse
trigonometric,
exponential,
and
many
other
transcendental
functions.
.b
cacm
march,
1959
.a
powers,
j.
e.
.n
ca590301
jb
march
22,
1978
8:08
pm
.x
95
5
95
95
5
95
95
5
95
.i
96
.t
on
computing
radiation
integrals
.w
the
relative
merit
and
cost
of
four
ways
of
evaluating
typical
radiation
integrals
containing
spherical
bessel
functions
are
investigated.
these
methods
are
desk
machine
evaluation
of
a
finite
series,
integration
of
the
appropriate
differential
equation
by
a
reeves
electronic
analog
computer
and
by
a
litton
40
ibm
704
computer.
results
are
generally
applicable
to
equations
separated
from
a
helmholtz
or
wave
equation.
.b
cacm
february,
1959
.a
hansen,
r.
c.
bailin,
l.
l.
rutishauser,
r.
w.
.n
ca590205
jb
march
22,
1978
8:16
pm
.x
96
5
96
96
5
96
96
5
96
.i
97
.t
signal
corps
research
and
development
on
automatic
programming
of
digital
computers
.b
cacm
february,
1959
.a
luebbert,
capt.
w.
f.
collom
jr.,
capt.
p.
w.
.n
ca590204
jb
march
22,
1978
8:19
pm
.x
97
5
97
97
5
97
97
5
97
.i
98
.t
the
arithmetic
translator-compiler
of
the
ibm
fortran
automatic
coding
system
.b
cacm
february,
1959
.a
sheridan,
p.
b.
.n
ca590203
jb
march
22,
1978
8:21
pm
.x
224
5
98
364
5
98
98
5
98
98
5
98
98
5
98
100
6
98
224
6
98
44
6
98
77
6
98
98
6
98
98
6
98
.i
99
.t
possible
modifications
to
the
international
algebraic
language
.b
cacm
february,
1959
.a
green,
j.
.n
ca590202
jb
march
22,
1978
8:22
pm
.x
99
5
99
99
5
99
99
5
99
.i
100
.t
recursive
subscripting
compilers
and
list-types
memories
.b
cacm
february,
1959
.a
carr
iii,
j.
w.
.n
ca590201
jb
march
22,
1978
8:23
pm
.x
205
4
100
210
4
100
214
4
100
1982
4
100
398
4
100
642
4
100
669
4
100
100
4
100
123
4
100
164
4
100
100
5
100
100
5
100
100
5
100
1
5
100
364
5
100
100
6
100
224
6
100
44
6
100
77
6
100
98
6
100
.i
101
.t
nuclear
reactor
codes
.b
cacm
january,
1959
.a
nather,
v.
sangren,
w.
.n
ca590101
jb
march
22,
1978
8:24
pm
.x
101
5
101
101
5
101
101
5
101
.i
102
.t
a
comparison
of
650
programming
methods
.b
cacm
december,
1960
.a
curtz,
t.
b.
riordan,
j.
f.
spohn,m.
.n
ca601214
jb
march
20,
1978
6:18
pm
.x
102
5
102
102
5
102
102
5
102
.i
103
.t
cope
(console
operator
proficiency
examination)*
.w
each
year
electronic
computers
become
more
sophisticated,
and
the
programs
they
must
process
become
more
complex.
because
of
this,dependence
of
those
in
computing
on
the
skill
and
experience
of
operators
is
increasing.
at
the
same
time,
selection
and
training
of
qualified
operators
grows
more
difficult.
to
meet
the
need
for
a
quick,
accurate,
uniform
operator
test
and
training
aid,
the
authors
have
developed
cope
(console
operator
proficiency
examination),
outlined
below.
while
this
examination
is
programmed
specifically
for
the
ibm
705
model
ii
with
two
tape
record
coordinators,
similar
programs
could
be
developed
for
other
computers.
.b
cacm
december,
1960
.a
farbman,
d.
ketover,
r.
.n
ca601213
jb
march
20,
1978
6:23
pm
.x
103
5
103
103
5
103
103
5
103
.i
104
.t
digital
simulation
of
discrete
flow
systems*
.w
the
discrete
flow
systems
discussed
are
characterized
by
the
movement
of
randomly
arriving
items
along
interacting
channels.
programing
a
digital
computer
to
simulate
such
systems
utilizes
some
techniques
not
common
in
other
approaches
to
physical
problems.
the
principal
portion
of
the
paper
is
a
discussion
of
two
simulation
studies
that
illustrate
some
of
the
programming
problems
involved.
one
is
of
an
extensive
package-handling
plant,
with
the
objective
being
optimization
of
parameters
such
as
storage
capacities
and
processing
rates.
in
the
other,
air
traffic
flow
and
control
procedures
are
simulated
to
compare
the
effects
of
alternative
control
decisions.
.b
cacm
december,
1960
.a
moore,
c.
j.
lewis,
t.
s.
.n
ca601212
jb
march
20,
1978
6:27
pm
.x
104
5
104
104
5
104
104
5
104
.i
105
.t
two
methods
for
word
inversion
on
the
ibm
709
.b
cacm
december,
1960
.a
price,
r.
a.
jardins,
p.
d.
.n
ca601211
jb
march
20,
1978
6:28
pm
.x
105
5
105
105
5
105
105
5
105
.i
106
.t
a
method
for
overlapping
and
erasure
of
lists
.w
an
important
property
of
the
newell-shaw-simon
scheme
for
computer
storage
of
lists
is
that
data
having
multiple
occurrences
need
not
be
stored
at
more
than
one
place
in
the
computer.
that
is,
lists
may
be
"overlapped."
unfortunately,
overlapping
poses
a
problem
for
subsequent
erasure.
given
a
list
that
is
no
longer
needed,
it
is
desired
to
erase
just
those
parts
that
do
not
overlap
other
lists.
in
lisp,
mccarthy
employs
an
elegant
but
inefficient
solution
to
the
problem.
the
present
paper
describes
a
general
method
which
enables
efficient
erasure.
the
method
employs
interspersed
reference
counts
to
describe
the
extent
of
the
overlapping.
.b
cacm
december,
1960
.a
collins,
g.
e.
.n
ca601210
jb
march
20,
1978
6:33
pm
.x
1024
4
106
1051
4
106
1102
4
106
1132
4
106
1390
4
106
1486
4
106
1549
4
106
1706
4
106
1826
4
106
1878
4
106
378
4
106
2060
4
106
2155
4
106
2168
4
106
2719
4
106
2723
4
106
2838
4
106
2842
4
106
2855
4
106
2879
4
106
3077
4
106
3080
4
106
3106
4
106
627
4
106
106
4
106
106
5
106
106
5
106
106
5
106
1050
5
106
210
5
106
1393
5
106
1549
5
106
2023
5
106
3112
5
106
627
5
106
849
6
106
106
6
106
106
6
106
106
6
106
106
6
106
106
6
106
106
6
106
196
6
106
1051
6
106
1380
6
106
209
6
106
1826
6
106
210
6
106
210
6
106
1878
6
106
296
6
106
1972
6
106
367
6
106
2438
6
106
2723
6
106
2736
6
106
2833
6
106
2838
6
106
406
6
106
627
6
106
627
6
106
731
6
106
731
6
106
731
6
106
753
6
106
.i
107
.t
multiple
precision
arithmetic
.b
cacm
december,
1960
.a
pope,
d.
a.
stein,
m.
l.
.n
ca601209
jb
march
20,
1978
6:34
pm
.x
107
4
107
107
5
107
107
5
107
107
5
107
1026
5
107
1258
5
107
1292
5
107
1497
5
107
90
5
107
107
6
107
107
6
107
107
6
107
107
6
107
1026
6
107
1026
6
107
1026
6
107
1292
6
107
1593
6
107
.i
108
.t
programmed
error
correction
in
project
mercury
.b
cacm
december,
1960
.a
dimsdale,
b.
weinberg,
g.
m.
.n
ca601208
jb
march
20,
1978
6:35
pm
.x
108
5
108
108
5
108
108
5
108
361
5
108
108
6
108
.i
109
.t
a
note
on
approximating
e^x
.b
cacm
december,
1960
.a
lubkin,
s.
.n
ca601207
jb
march
20,
1978
6:37
pm
.x
109
5
109
109
5
109
109
5
109
.i
110
.t
fibonaccian
searching
.b
cacm
december,
1960
.a
ferguson,
d.
e.
.n
ca601206
jb
march
20,
1978
6:38
pm
.x
110
5
110
110
5
110
110
5
110
.i
111
.t
on
programming
the
numerical
solution
of
polynomial
equations
.w
numerical
techniques
are
presented
for
computing
the
roots
of
polynomial
equations.
by
applying
the
recommended
scaling
and
inversion
rules,
the
basic
bairstow
and
newton-raphson
iterative
techniques
can
be
applied
with
great
reliability.
both
a
high
degree
of
accuracy
and
rapid
convergence
are
realized.
numerical
examples
are
shown
to
illustrate
the
pitfalls
and
to
show
how
these
are
circumvented
by
application
of
the
recommended
procedures.
.b
cacm
december,
1960
.a
ellenberger,
k.
w.
.n
ca601205
jb
march
20,
1978
6:41
pm
.x
111
5
111
111
5
111
111
5
111
.i
112
.t
numerical
solution
of
the
polynomial
equation
(algorithm
30)
.b
cacm
december,
1960
.a
ellenberger,
k.
w.
.n
ca601204
jb
march
20,
1978
6:44
pm
.x
112
5
112
112
5
112
112
5
112
.i
113
.t
survey
of
coded
character
representation
.b
cacm
december,
1960
.a
bemer,
r.
w.
.n
ca601203
jb
march
20,
1978
6:44
pm
.x
113
5
113
113
5
113
113
5
113
.i
114
.t
survey
of
punched
card
codes
.b
cacm
december,
1960
.a
smith,
h.
j.
williams,
f.
a.
.n
ca601202
jb
march
20,
1978
6:45
pm
.x
114
5
114
114
5
114
114
5
114
.i
115
.t
optimizers:
their
structure
.b
cacm
december,
1960
.a
wheeling,
r.
f.
.n
ca601201
jb
march
20,
1978
6:46
pm
.x
115
5
115
115
5
115
115
5
115
.i
116
.t
the
sumador
chino
.w
on
a
recent
motor
trip
through
mexico,
the
writer
came
across
on
adding
device
which
was
referred
to
as
a
sumador
chino
(chinese
adder).
a
survey
of
the
more
available
literature
on
the
history
of
mathematics
and
on
instruments
of
calculation
has
uncovered
no
reference
to
such
a
device.
the
purpose
of
this
communication
is
to
enlist
the
help
of
other
members
in
bringing
to
light
whatever
may
be
known
concerning
the
evolution
and
present
status
of
the
sumador
chino.
.b
cacm
november,
1960
.a
rogers,
j.
l.
.n
ca601119
jb
march
20,
1978
6:50
pm
.x
116
5
116
116
5
116
116
5
116
.i
117
.t
an
estimation
of
the
relative
efficiency
of
two
internal
sorting
methods
.b
cacm
november,
1960
.a
nagler,
h.
.n
ca601118
jb
march
20,
1978
6:51
pm
.x
117
5
117
117
5
117
117
5
117
.i
118
.t
character
scanning
on
the
ibm
7070
.b
cacm
november,
1960
.a
speckhard,
a.
e.
.n
ca601117
jb
march
20,
1978
6:52
pm
.x
118
5
118
118
5
118
118
5
118
.i
119
.t
note
on
eigenvalue
computation
.b
cacm
november,
1960
.a
andrus,
j.
f.
.n
ca601116
jb
march
20,
1978
6:53
pm
.x
119
5
119
119
5
119
119
5
119
.i
120
.t
a
simple
technique
for
coding
differential
equations
.b
cacm
november,
1960
.a
sefton,
p.
vaillancourt,
r.
.n
ca601115
jb
march
20,
1978
6:57
pm
.x
120
4
120
120
5
120
120
5
120
120
5
120
175
5
120
.i
121
.t
over-all
computation
control
and
labelling
.b
cacm
november,
1960
.a
holt,
a.
.n
ca601114
jb
march
20,
1978
6:58
pm
.x
121
4
121
121
5
121
121
5
121
121
5
121
221
5
121
.i
122
.t
least
squares
fitting
of
a
great
circle
through
points
on
a
sphere
.b
cacm
november,1960
.a
dewitte,
l.
.n
ca601113
jb
march
20,
1978
6:59
pm
.x
122
5
122
122
5
122
122
5
122
297
5
122
122
6
122
.i
123
.t
compilation
for
two
computers
with
neliac
.w
neliac,
a
compiler
based
on
algol,
was
developed
at
the
u.s.
navy
electronics
laboratory,
san
diego,california,
as
a"boot-strap"
compiler
for
the
remington
rand
univac
countess
computer.
this
compiler
was
used
to
generate
a
version
of
itself
which,
running
as
a
countess
program,
generated
machine
code
for
the
control
data
corporation
cdc-1604.
all
three
versions
of
neliac
accepted
essentially
identical
input
language.
.b
cacm
november,
1960
.a
masterson
jr.,
k.
s.
.n
ca601112
jb
march
20,
1978
7:03
pm
.x
205
4
123
210
4
123
214
4
123
249
4
123
254
4
123
272
4
123
1102
4
123
1109
4
123
1140
4
123
1188
4
123
1306
4
123
1464
4
123
1491
4
123
1767
4
123
1781
4
123
1787
4
123
1949
4
123
1982
4
123
321
4
123
398
4
123
2059
4
123
2126
4
123
435
4
123
437
4
123
463
4
123
483
4
123
491
4
123
2732
4
123
560
4
123
583
4
123
3073
4
123
627
4
123
631
4
123
632
4
123
637
4
123
642
4
123
642
4
123
644
4
123
653
4
123
669
4
123
680
4
123
761
4
123
762
4
123
763
4
123
100
4
123
123
4
123
123
4
123
123
4
123
140
4
123
164
4
123
919
4
123
989
4
123
123
5
123
123
5
123
123
5
123
165
5
123
196
5
123
1
5
123
1781
5
123
637
5
123
123
6
123
123
6
123
165
6
123
196
6
123
919
6
123
990
6
123
1007
6
123
1046
6
123
1131
6
123
1139
6
123
1140
6
123
1149
6
123
1198
6
123
1215
6
123
1223
6
123
1265
6
123
1303
6
123
1323
6
123
1358
6
123
1366
6
123
1421
6
123
1460
6
123
1462
6
123
1463
6
123
1467
6
123
1468
6
123
1477
6
123
1491
6
123
1496
6
123
1531
6
123
1535
6
123
1565
6
123
1601
6
123
1602
6
123
1613
6
123
1614
6
123
1626
6
123
1641
6
123
1787
6
123
1788
6
123
205
6
123
224
6
123
249
6
123
288
6
123
316
6
123
381
6
123
398
6
123
11
6
123
404
6
123
410
6
123
463
6
123
464
6
123
483
6
123
3184
6
123
3188
6
123
584
6
123
600
6
123
680
6
123
691
6
123
763
6
123
799
6
123
.i
124
.t
an
algorithm
for
the
assignment
problem
.w
the
assignment
problem
is
formulated
and
briefly
discussed.
an
efficient
algorithm
for
its
solution
is
presented
in
algol
code.
an
empirical
relation
between
solution
time
and
the
size
of
the
problem
is
given,
based
on
extensive
experiments
carried
out
on
a
digital
computer.
.b
cacm
november,
1960
.a
silver,
r.
.n
ca601111
jb
march
20,
1978
7:05
pm
.x
124
5
124
124
5
124
124
5
124
2133
5
124
2134
5
124
124
6
124
124
6
124
2134
6
124
.i
125
.t
polynomial
transformer
(algorithm
29)
.b
cacm
november,
1960
.a
mackinney,
j.
g.
.n
ca601110
jb
march
20,
1978
7:06
pm
.x
125
5
125
125
5
125
125
5
125
1816
5
125
125
6
125
.i
126
.t
least
squares
fit
by
orthogonal
polynomials
(algorithm
28)
.b
cacm
november,
1960
.a
mackinney,
j.
g.
.n
ca601109
jb
march
20,
1978
7:08
pm
.x
126
5
126
126
5
126
126
5
126
.i
127
.t
assignment
(algorithm
27)
.b
cacm
november,
1960
.a
silver,
r.
.n
ca601108
jb
march
20,
1978
7:09
pm
.x
127
5
127
127
5
127
127
5
127
.i
128
.t
rootfinder
iii
(algorithm
26)
.b
cacm
november,
1960
.a
herroit,
j.
g.
.n
ca601107
jb
march
20,
1978
7:57
pm
.x
128
5
128
128
5
128
128
5
128
.i
129
.t
rootfinder
ii
(algorithm
15)
.b
cacm
november,
1960
.a
forsythe,
g.
e.
herriot,
j.
g.
.n
ca601106
jb
march
20,
1978
7:59
pm
.x
129
5
129
129
5
129
129
5
129
.i
130
.t
real
zeros
of
an
arbitrary
function
(algorithm
25)
.b
cacm
november,
1960
.a
leavenworth,
b.
.n
ca601105
jb
march
20,
1978
8:00
pm
.x
130
5
130
130
5
130
130
5
130
.i
131
.t
solution
of
tri-diagonal
linear
equations
(algorithm
24)
.b
cacm
november,
1960
.a
leavenworth,
b.
.n
ca601104
jb
march
20,
1978
8:01
pm
.x
131
5
131
131
5
131
131
5
131
.i
132
.t
math
sort
(algorithm
23)
.b
cacm
november,
1960
.a
feurzeig,
w.
.n
ca601103
jb
march
20,
1978
8:03
pm
.x
132
5
132
132
5
132
132
5
132
.i
133
.t
riccati-bessel
functions
of
first
and
second
kind
(algorithm
22)
.b
cacm
november,
1960
.a
oser,
h.
.n
ca601102
jb
march
20,
1978
8:04
pm
.x
133
5
133
133
5
133
133
5
133
.i
134
.t
bessel
function
for
a
set
of
integer
orders(algorithm
21)
.b
cacm
november,
1960
.a
borsch-supan,
w.
.n
ca601101
jb
march
20,
1978
8:05
pm
.x
134
5
134
134
5
134
134
5
134
1909
5
134
134
6
134
1023
6
134
1284
6
134
1316
6
134
.i
135
.t
digital
computers
in
universities-iv
.b
cacm
october,
1960
.a
reeves,
r.
f.
.n
ca601013
jb
march
20,
1978
8:07
pm
.x
135
5
135
135
5
135
135
5
135
.i
136
.t
a
note
on
the
calculation
of
interest
.b
cacm
october,
1960
.a
ingerman,
p.
z.
.n
ca601012
jb
march
20,
1978
8:09
pm
.x
136
5
136
136
5
136
136
5
136
.i
137
.t
evaluating
numbers
expressed
as
strings
of
english
words
.b
cacm
october,
1960
.a
swift,
c.
j.
.n
ca601011
jb
march
20,
1978
8:11
pm
.x
137
5
137
137
5
137
137
5
137
.i
138
.t
some
thoughts
on
reconciling
various
character
set
proposals
(corrigenda)
.b
cacm
october,
1960
.a
voorhees,
e.
a.
.n
ca601010
jb
march
20,
1978
8:13
pm
.x
138
5
138
138
5
138
138
5
138
.i
139
.t
binomial
coefficients
(algorithm
19)
.b
cacm
october,
1960
.a
kenyon,
r.
r.
.n
ca601009
jb
march
20,
1978
8:14
pm
.x
139
5
139
139
5
139
139
5
139
.i
140
.t
crout
with
pivoting
(algorithm
16)
.b
cacm
october,
1960
.a
forsythe,
g.
e.
.n
ca601008
jb
march
20,
1978
8:15
pm
.x
249
4
140
254
4
140
272
4
140
1102
4
140
1109
4
140
1140
4
140
1188
4
140
1306
4
140
1319
4
140
1464
4
140
1491
4
140
1767
4
140
1781
4
140
1787
4
140
1949
4
140
321
4
140
2059
4
140
2126
4
140
435
4
140
437
4
140
454
4
140
463
4
140
483
4
140
491
4
140
2732
4
140
560
4
140
583
4
140
3073
4
140
627
4
140
631
4
140
632
4
140
642
4
140
644
4
140
653
4
140
680
4
140
761
4
140
762
4
140
763
4
140
123
4
140
140
4
140
140
4
140
919
4
140
989
4
140
140
5
140
140
5
140
140
5
140
152
5
140
196
5
140
.i
141
.t
some
thoughts
on
parallel
processing
.b
cacm
october,
1960
.a
yarbrough,
l.
d.
.n
ca601007
jb
march
20,
1978
8:16
pm
.x
141
5
141
141
5
141
141
5
141
.i
142
.t
comments
on
a
technique
for
counting
ones
.b
cacm
october,
1960
.a
sherman,
p.
m.
.n
ca601006
jb
march
20,
1978
8:18
pm
.x
2952
4
142
2952
4
142
2952
4
142
142
4
142
142
4
142
142
4
142
142
5
142
142
5
142
142
5
142
162
5
142
163
5
142
192
5
142
362
5
142
2952
5
142
142
6
142
142
6
142
162
6
142
163
6
142
192
6
142
2185
6
142
2727
6
142
.i
143
.t
a
list
of
computer
systems
programs
for
the
ibm
650,
datatron
205,
and
univac
ss-80
.b
cacm
october,
1960
.a
romberg,
a.
.n
ca601005
jb
march
20,
1978
8:21
pm
.x
143
5
143
143
5
143
143
5
143
.i
144
.t
do
it
by
the
numbers-digital
shorthand
.w
present
communications
systems
transmit
single
characters
in
groups
of
coded
pulses
between
simple
terminal
equipments.
since
english
words
form
only
a
sparse
set
of
all
possible
alphabetic
combinations,
present
methods
are
inefficient
when
computer
systems
are
substituted
for
these
terminals.
using
numeric
representations
of
entire
words
or
common
phrases
(rather
than
character-by-character
representations)
requires
approximately
one-third
of
present
transmission
time.
this
saving
is
reflected
in
overall
costs.
other
benefits
accrue
in
code
and
language
translation
schemes.
provision
is
made
for
transmission
of
purely
numeric
and/or
binary
streams,
and
for
single
character-transmission
of
non-dictionary
words
such
as
the
names
of
people
or
places.
.b
cacm
october,
1960
.a
bemer,
r.
w.
.n
ca601004
jb
march
20,
1978
8:27
pm
.x
144
5
144
144
5
144
144
5
144
.i
145
.t
automatic
graders
for
programming
classes
.b
cacm
october,
1960
.a
hollingsworth,
j.
.n
ca601003
jb
march
20,
1978
8:28
pm
.x
145
5
145
145
5
145
145
5
145
1270
5
145
1902
5
145
145
6
145
145
6
145
1270
6
145
3184
6
145
.i
146
.t
the
use
of
computers
in
engineering
classroom
instruction
.w
on
april
29-30,
the
computer
committee
of
the
college
of
engineering,
university
of
michigan,
which
acts
as
a
steering
committee
for
the
ford
foundation
project
on
the
use
of
computers
in
engineering
education,
held
a
special
conference
to
discuss
certain
timely
topics
pertinent
to
the
ford
project.
this
report
contains
a
condensed
transcription
of
the
key
ideas
offered
by
the
conference
attendees
on
selected
topics.
.b
cacm
october,
1960
.a
katz,
d.
l.
.n
ca601002
jb
march
20,
1978
8:37
pm
.x
146
5
146
146
5
146
146
5
146
.i
147
.t
report
on
a
conference
of
university
computing
center
directors
.b
cacm
october,
1960
.n
ca601001
jb
march
20,
1978
8:38
pm
.x
147
5
147
147
5
147
147
5
147
.i
148
.t
digital
computers
in
universities-iii
.b
cacm
september,
1960
.a
reeves,
r.
f.
.n
ca600909
jb
march
20,
1978
8:41
pm
.x
148
5
148
148
5
148
148
5
148
.i
149
.t
a
decision
rule
for
improved
efficiency
in
solving
linear
programming
problems
with
the
simplex
algorithm
.b
cacm
september,
1960
.a
dickson,
j.
c.
frederick,
f.
p.
.n
ca600908
jb
march
20,
1978
8:43
pm
.x
149
5
149
149
5
149
149
5
149
.i
150
.t
rational
interpolation
by
continued
fractions
(algorithm
18)
.b
cacm
september,
1960
.a
floyd,
r.
w.
.n
ca600907
jb
march
20,
1978
8:44
pm
.x
150
5
150
150
5
150
150
5
150
.i
151
.t
trdiag
(algorithm
17)
.b
cacm
september,
1960
.a
sprague
iii,
c.
d.
.n
ca600906
jb
march
20,
1978
8:45
pm
.x
151
5
151
151
5
151
151
5
151
.i
152
.t
crout
with
pivoting
(algorithm
16)
.b
cacm
september,
1960
.a
forsythe,
g.
e.
.n
ca600905
jb
march
20,
1978
8:47
pm
.x
140
5
152
152
5
152
152
5
152
152
5
152
1319
5
152
454
5
152
152
6
152
152
6
152
152
6
152
196
6
152
1128
6
152
586
6
152
.i
153
.t
comments
from
a
fortran
user
.b
cacm
september,
1960
.a
blatt,
j.
m.
.n
ca600904
jb
march
20,
1978
8:48
pm
.x
153
5
153
153
5
153
153
5
153
754
5
153
153
6
153
.i
154
.t
rapidly
convergent
expressions
for
evaluating
e^x
.b
cacm
september,
1960
.a
berin,
a.
.n
ca600903
jb
march
20,
1978
8:49
pm
.x
154
5
154
154
5
154
154
5
154
.i
155
.t
trie
memory
.b
cacm
september,
1960
.a
fredkin,
e.
.n
ca600902
jb
march
20,
1978
8:50
pm
.x
155
5
155
155
5
155
155
5
155
944
5
155
2846
5
155
849
5
155
155
6
155
155
6
155
155
6
155
615
6
155
.i
156
.t
an
introductory
problem
in
symbol
manipulation
for
the
student
.b
cacm
september,
1960
.a
rosin,
r.
f.
.n
ca600901
jb
march
20,
1978
8:51
pm
.x
156
5
156
156
5
156
156
5
156
.i
157
.t
digital
computers
in
universities
-ii
.b
cacm
august,
1960
.a
reeves,
r.
f.
.n
ca600809
jb
march
20,
1978
8:54
pm
.x
157
5
157
157
5
157
157
5
157
.i
158
.t
rootfinder
ii
(algorithm
15)
.b
cacm
august,
1960
.a
thacher
jr.,
h.
c.
.n
ca600808
jb
march
20,
1978
8:55
pm
.x
158
5
158
158
5
158
158
5
158
.i
159
.t
rootfinder
(algorithm
2)
.b
cacm
august,
1960
.a
thacher
jr.,
h.
c.
.n
ca600807
jb
march
20,
1978
8:56
pm
.x
159
5
159
159
5
159
159
5
159
.i
160
.t
rootfinder
ii
(algorithm
15)
.b
cacm
august,
1960
.a
thacher
jr.,
h.
c.
.n
ca600806
jb
march
20,
1978
8:57
pm
.x
160
5
160
160
5
160
160
5
160
.i
161
.t
abbreviating
words
systematically
(corrigendum)
.b
cacm
august,
1960
.a
barrett,
j.
a.
grems,
m.
.n
ca600805
jb
march
20,
1978
8:58
pm
.x
161
5
161
161
5
161
161
5
161
.i
162
.t
a
variant
technique
for
counting
ones
.b
cacm
august,
1960
.a
frieden,
h.
.n
ca600804
jb
march
20,
1978
9:00
pm
.x
142
5
162
162
5
162
162
5
162
162
5
162
2952
5
162
142
6
162
162
6
162
162
6
162
163
6
162
163
6
162
192
6
162
192
6
162
2185
6
162
2727
6
162
.i
163
.t
counting
ones
on
the
ibm
7090
.b
cacm
august,
1960
.a
kutler,
s.
s.
.n
ca600803
jb
march
20,
1978
9:01
pm
.x
142
5
163
163
5
163
163
5
163
163
5
163
2952
5
163
142
6
163
162
6
163
162
6
163
163
6
163
163
6
163
192
6
163
192
6
163
2185
6
163
2727
6
163
.i
164
.t
a
short
study
of
notation
efficiency
.b
cacm
august,
1960
.a
smith
jr.,
h.
j.
.n
ca600802
jb
march
20,
1978
9:02
pm
.x
205
4
164
210
4
164
214
4
164
1982
4
164
398
4
164
642
4
164
669
4
164
100
4
164
123
4
164
164
4
164
164
5
164
164
5
164
164
5
164
1
5
164
.i
165
.t
neliac-a
dialect
of
algol
.b
cacm
august,
1960
.a
huskey,
h.
d.
halstead,
m.
h.
.n
ca600801
jb
march
20,
1978
9:03
pm
.x
123
5
165
165
5
165
165
5
165
165
5
165
637
5
165
1
6
165
123
6
165
165
6
165
165
6
165
196
6
165
.i
166
.t
programming
compatibility
in
a
family
of
closely
related
digital
computers
.b
cacm
july,
1960
.a
luebbert,
w.
f.
.n
ca600707
jb
march
20,
1978
9:14
pm
.x
166
5
166
166
5
166
166
5
166
.i
167
.t
combining
algol
statement
analysis
with
validity
checking
.b
cacm
july,
1960
.a
mcisaac,
p.
.n
ca600706
jb
march
20,
1978
9:15
pm
.x
167
5
167
167
5
167
167
5
167
.i
168
.t
multiprogram
scheduling
parts
3
and
4
scheduling
algorithm
and
external
constraints
.b
cacm
july,
1960
.a
codd,
e.
f.
.n
ca600705
jb
march
20,
1978
9:16
pm
.x
491
4
168
168
4
168
168
5
168
168
5
168
168
5
168
1713
5
168
1901
5
168
491
5
168
46
5
168
168
6
168
168
6
168
168
6
168
185
6
168
185
6
168
185
6
168
196
6
168
1751
6
168
1754
6
168
46
6
168
.i
169
.t
the
multilingual
terminology
project
.b
cacm
july,
1960
.a
holmstrom,
j.
e.
.n
ca600704
jb
march
20,
1978
9:17
pm
.x
169
5
169
169
5
169
169
5
169
.i
170
.t
some
thoughts
on
reconciling
various
character
set
proposals
.b
cacm
july,
1960
.a
voorhees,
e.
a.
.n
ca600703
jb
march
20,
1978
9:18
pm
.x
170
5
170
170
5
170
170
5
170
.i
171
.t
digital
computers
in
universities
(part
i)
.b
cacm
july,
1960
.a
reeves,
r.
f.
.n
ca600702
jb
march
20,
1978
9:20
pm
.x
171
5
171
171
5
171
171
5
171
.i
172
.t
complex
exponential
integral
(algorithm
13)
.b
cacm
july,
1960
.a
beam,
a.
.n
ca600701
jb
march
20,
1978
9:21
pm
.x
172
5
172
172
5
172
172
5
172
.i
173
.t
atlas
a
new
concept
in
large
computer
design
.b
cacm
june,
1960
.n
ca600617
jb
march
20,
1978
9:22
pm
.x
173
5
173
173
5
173
173
5
173
.i
174
.t
interval
estimation
of
the
time
in
one
state
to
total
time
ratio
in
a
doubleexponential
process
.b
cacm
june,
1960
.a
neal,
w.
r.
.n
ca600616
jb
march
20,
1978
9:24
pm
.x
174
5
174
174
5
174
174
5
174
.i
175
.t
the
solution
of
simultaneous
ordinary
differential
equations
using
a
general
purpose
digital
computer
.b
cacm
june,
1960
.a
anderson,
w.
h.
.n
ca600615
jb
march
20,
1978
9:25
pm
.x
120
5
175
175
5
175
175
5
175
175
5
175
175
6
175
.i
176
.t
symbol
manipulation
by
threaded
lists
(corrigendum)
.b
cacm
june,
1960
.a
perlis,
a.
j.
thornton,
c.
.n
ca600614
jb
march
20,
1978
9:26
pm
.x
176
5
176
176
5
176
176
5
176
.i
177
.t
solution
of
polynomial
equation
by
bairstow
hitchcock
method,
a.
a.
grau
communications
acm,
february,
1960
(algorithm)
.b
cacm
june,
1960
.a
thacher
jr.,
h.
c.
.n
ca600613
jb
march
20,
1978
9:31
pm
.x
177
5
177
177
5
177
177
5
177
.i
178
.t
rootfinder
(algorithm)
.b
cacm
june,
1960
.a
thacher
jr.,
h.
c.
.n
ca600612
jb
march
20,
1978
9:32
pm
.x
178
5
178
178
5
178
178
5
178
1667
5
178
178
6
178
1242
6
178
327
6
178
.i
179
.t
evaluation
of
the
legendre
polynomial
pn(x)
by
recursion
(algorithm)
.b
cacm
june,
1960
.a
galler,
g.
m.
.n
ca600611
jb
march
20,
1978
9:35
pm
.x
179
5
179
179
5
179
179
5
179
.i
180
.t
evaluation
of
the
laguerre
polynomial
ln(x)
by
recursion
(algorithm)
.b
cacm
june,
1960
.a
galler,
g.
m.
.n
ca600610
jb
march
20,
1978
9:36
pm
.x
180
5
180
180
5
180
180
5
180
.i
181
.t
evaluation
of
the
hermite
polynomial
hn(x)
by
recursion
(algorithm)
.b
cacm
june,
1960
.a
galler,
g.
m.
.n
ca600609
jb
march
20,
1978
9:37
pm
.x
181
5
181
181
5
181
181
5
181
.i
182
.t
evaluation
of
the
chebyshev
polynomial
tn(x)
by
recursion
(algorithm)
.b
cacm
june,
1960
.a
galler,
g.
m.
.n
ca600608
jb
march
20,
1978
9:38
pm
.x
182
5
182
182
5
182
182
5
182
.i
183
.t
conversion
between
floating
point
representations
.b
cacm
june,
1960
.a
perry,
c.
.n
ca600607
jb
march
20,
1978
9:40
pm
.x
183
5
183
183
5
183
183
5
183
.i
184
.t
a
short
method
for
measuring
error
in
a
least-squares
power
series
.b
cacm
june,
1960
.a
robinson,
s.
m.
struble,
g.
w.
.n
ca600606
jb
march
20,
1978
9:41
pm
.x
184
5
184
184
5
184
184
5
184
.i
185
.t
multiprogram
scheduling
parts
1
and
2.
introduction
and
theory*
.w
in
order
to
exploit
fully
a
fast
computer
which
possesses
simultaneous
processing
abilities,
it
should
to
a
large
extent
schedule
its
own
workload.
the
scheduling
routine
must
be
capable
of
extremely
rapid
execution
if
it
is
not
to
prove
self-defeating.
the
construction
of
a
schedule
entails
determining
which
programs
are
to
be
run
concurrently
and
which
sequentially
with
respect
to
each
other.
a
concise
scheduling
algorithm
is
described
which
tends
to
minimize
the
time
for
executing
the
entire
pending
workload
(or
any
subset
of
it),
subject
to
external
constraints
such
as
precedence,
urgency,
etc.
the
algorithm
is
applicable
to
a
wide
class
of
machines.
.b
cacm
june,
1960
.a
codd,
e.
f.
.n
ca600605
jb
march
20,
1978
9:46
pm
.x
185
5
185
185
5
185
185
5
185
1713
5
185
1901
5
185
491
5
185
168
6
185
168
6
185
168
6
185
185
6
185
185
6
185
185
6
185
196
6
185
1751
6
185
1754
6
185
46
6
185
.i
186
.t
an
algorithm
defining
algol
assignment
statements
(addendum)
.b
cacm
june,
1960
.a
floyd,
r.
w.
.n
ca600604
jb
march
20,
1978
9:47
pm
.x
186
5
186
186
5
186
186
5
186
.i
187
.t
compiling
connectives
.b
cacm
june,
1960
.a
swift,
c.
j.
.n
ca600603
jb
march
20,
1978
9:54
pm
.x
187
5
187
187
5
187
187
5
187
.i
188
.t
the
department
of
computer
mathematics
at
moscow
state
university
.b
cacm
june,
1960
.a
berezin,
i.
s.
.n
ca600602
jb
march
20,
1978
9:56
pm
.x
188
5
188
188
5
188
188
5
188
.i
189
.t
the
future
of
automatic
digital
computers
.b
cacm
june,
1960
.a
booth,
a.
d.
.n
ca600601
jb
march
20,
1978
9:57pm
.x
189
5
189
189
5
189
189
5
189
.i
190
.t
bendix
g-20
system
.b
cacm
may,
1960
.n
ca600507
jb
march
22,
1978
1:28
pm
.x
190
5
190
190
5
190
190
5
190
.i
191
.t
abbreviating
words
systematically
.b
cacm
may,
1960
.a
barrett,
j.
a.
grems,
m.
.n
ca600506
jb
march
22,
1978
1:29
pm
.x
191
5
191
191
5
191
191
5
191
.i
192
.t
a
technique
for
counting
ones
in
a
binary
computer
.b
cacm
may,
1960
.a
wegner,
p.
.n
ca600505
jb
march
22,
1978
1:30
pm
.x
142
5
192
192
5
192
192
5
192
192
5
192
2952
5
192
142
6
192
162
6
192
162
6
192
163
6
192
163
6
192
192
6
192
192
6
192
2185
6
192
2727
6
192
.i
193
.t
a
start
at
automatic
storage
assignment
.b
cacm
may,
1960
.a
patrick,
r.
l.
.n
ca600504
jb
march
22,
1978
1:31
pm
.x
193
5
193
193
5
193
193
5
193
.i
194
.t
divisionless
computation
of
square
roots
through
continued
squaring
.b
cacm
may,
1960
.a
sarafyan,
d.
.n
ca600503
jb
march
22,
1978
1:32
pm
.x
194
5
194
194
5
194
194
5
194
.i
195
.t
what
is
a
code?
.b
cacm
may,
1960
.a
patterson,
g.
w.
.n
ca600502
jb
march
22,
1978
1:33
pm
.x
195
5
195
195
5
195
195
5
195
.i
196
.t
report
on
the
algorithmic
language
algol
60
.a
naur,
p.
backus,
j.
.b
cacm
may,
1960
.n
ca600501
jb
march
22,
1978
1:34
pm
.x
123
5
196
140
5
196
196
5
196
196
5
196
196
5
196
919
5
196
989
5
196
1102
5
196
1109
5
196
1140
5
196
1188
5
196
1306
5
196
249
5
196
254
5
196
272
5
196
1464
5
196
1491
5
196
1767
5
196
1781
5
196
1787
5
196
1949
5
196
321
5
196
2059
5
196
2126
5
196
2732
5
196
435
5
196
437
5
196
463
5
196
483
5
196
491
5
196
560
5
196
583
5
196
3073
5
196
627
5
196
631
5
196
632
5
196
642
5
196
644
5
196
653
5
196
680
5
196
761
5
196
762
5
196
763
5
196
1
6
196
1
6
196
823
6
196
106
6
196
123
6
196
152
6
196
165
6
196
168
6
196
185
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
919
6
196
946
6
196
947
6
196
990
6
196
1007
6
196
1046
6
196
1131
6
196
1139
6
196
1140
6
196
1140
6
196
1141
6
196
1149
6
196
1198
6
196
1215
6
196
1215
6
196
1223
6
196
1265
6
196
1303
6
196
1303
6
196
1323
6
196
1358
6
196
1366
6
196
1421
6
196
1460
6
196
1462
6
196
1463
6
196
1467
6
196
1467
6
196
1468
6
196
1468
6
196
1477
6
196
1491
6
196
1491
6
196
1496
6
196
1496
6
196
1496
6
196
1531
6
196
1535
6
196
1565
6
196
1601
6
196
1602
6
196
1613
6
196
1614
6
196
1614
6
196
1626
6
196
1641
6
196
1693
6
196
1781
6
196
1787
6
196
1788
6
196
205
6
196
206
6
196
207
6
196
209
6
196
210
6
196
210
6
196
1834
6
196
224
6
196
224
6
196
224
6
196
249
6
196
249
6
196
271
6
196
288
6
196
288
6
196
303
6
196
316
6
196
321
6
196
381
6
196
387
6
196
398
6
196
11
6
196
46
6
196
51
6
196
2732
6
196
400
6
196
401
6
196
402
6
196
404
6
196
404
6
196
404
6
196
404
6
196
404
6
196
404
6
196
404
6
196
406
6
196
410
6
196
412
6
196
463
6
196
463
6
196
464
6
196
483
6
196
483
6
196
483
6
196
3184
6
196
3184
6
196
3184
6
196
3184
6
196
3184
6
196
3188
6
196
584
6
196
600
6
196
615
6
196
631
6
196
642
6
196
680
6
196
691
6
196
729
6
196
763
6
196
763
6
196
799
6
196
799
6
196
799
6
196
.i
197
.t
an
imaginary
number
system
.b
cacm
april,
1960
.a
knuth,
d.
e.
.n
ca600414
jb
march
22,
1978
1:35
pm
.x
197
5
197
197
5
197
197
5
197
.i
198
.t
a
high-speed
multiplication
process
for
digital
computers
.b
cacm
april,
1960
.a
gurzi,
f.
.n
ca600413
jb
march
22,
1978
1:36
pm
.x
198
5
198
198
5
198
198
5
198
.i
199
.t
euclidian
algorithm
(algorithm
7)
.b
cacm
april,
1960
.a
claussen,
r.
.n
ca600412
jb
march
22,
1978
1:37
pm
.x
199
5
199
199
5
199
199
5
199
.i
200
.t
bessel
function
i,
asymptotic
expansion
(algorithm
6)
.b
cacm
april,
1960
.a
clarke,
d.
s.
.n
ca600411
jb
march
22,
1978
1:39
pm
.x
200
5
200
200
5
200
200
5
200
.i
201
.t
bessel
funtion
i,
series
expansion
(algorithm
5)
.b
cacm
april,
1960
.a
clarke,
d.
s.
.n
ca600410
jb
march
22,
1978
1:40
pm
.x
201
5
201
201
5
201
201
5
201
.i
202
.t
a
control
system
for
logical
block
diagnosis
with
data
loading
.w
this
paper
describes
a
section
of
an
integrated
diagnostic
monitor
system
which
facilitates
the
checking
of
sections
of
instructions
or
subroutines
anywhere
in
the
object
program.
a
new
method
of
specifying
all
diagnostic
operations
in
a
format
similar
to
a
computer
program
makes
the
system
convenient
to
use
and
relatively
simple
to
understand.
the
paper
also
describes
a
number
of
other
novel
diagnostic
features
which
can
be
included
in
the
system.
.b
cacm
april,
1960
.a
senko,
m.
e.
.n
ca600409
jb
march
22,
1978
1:45
pm
.x
931
5
202
202
5
202
202
5
202
202
5
202
202
6
202
396
6
202
634
6
202
.i
203
.t
decoding
combinations
of
the
first
n
integers
taken
k
at
a
time
.b
cacm
april,
1960
.a
brown,
r.
m.
.n
ca600408
jb
march
22,
1978
1:46
pm
.x
203
5
203
203
5
203
203
5
203
2690
5
203
203
6
203
579
6
203
.i
204
.t
proving
theorems
by
pattern
recognition
i
.b
cacm
april,
1960
.a
wang,
h.
.n
ca600407
jb
march
22,
1978
1:47
pm
.x
204
4
204
204
5
204
204
5
204
204
5
204
3194
5
204
.i
205
.t
macro
instruction
extensions
of
compiler
languages
.w
macroinstruction
compilers
constructed
from
a
small
set
of
functions
can
be
made
extremely
powerful.
in
particular,
conditional
assembly,
nested
definitions,
and
parenthetical
notation
serve
to
make
a
compiler
capable
of
accepting
very
general
extensions
to
its
ground
language.
.b
cacm
april,
1960
.a
mcilroy,
m.
d.
.n
ca600406
jb
march
22,
1978
1:49
pm
.x
205
4
205
205
4
205
210
4
205
214
4
205
1982
4
205
398
4
205
642
4
205
669
4
205
100
4
205
123
4
205
164
4
205
1
5
205
205
5
205
205
5
205
205
5
205
1358
5
205
1565
5
205
1781
5
205
1788
5
205
43
5
205
123
6
205
196
6
205
919
6
205
990
6
205
1006
6
205
1007
6
205
1007
6
205
1046
6
205
1131
6
205
1139
6
205
1140
6
205
1149
6
205
1162
6
205
1198
6
205
1215
6
205
1223
6
205
1265
6
205
1303
6
205
1323
6
205
1358
6
205
1358
6
205
1366
6
205
1421
6
205
1455
6
205
1460
6
205
1460
6
205
1462
6
205
1463
6
205
1467
6
205
1468
6
205
1477
6
205
1491
6
205
1496
6
205
1531
6
205
1535
6
205
1565
6
205
1601
6
205
1602
6
205
1613
6
205
1614
6
205
1626
6
205
1641
6
205
1787
6
205
1788
6
205
205
6
205
205
6
205
205
6
205
205
6
205
224
6
205
249
6
205
288
6
205
316
6
205
381
6
205
398
6
205
11
6
205
404
6
205
410
6
205
463
6
205
464
6
205
483
6
205
3184
6
205
3184
6
205
3188
6
205
3189
6
205
584
6
205
600
6
205
680
6
205
691
6
205
729
6
205
763
6
205
799
6
205
799
6
205
.i
206
.t
symbol
manipulation
in
xtran
.b
cacm
april,
1960
.a
green,
j.
.n
ca600405
jb
march
22,
1978
1:50
pm
.x
206
4
206
207
4
206
206
5
206
206
5
206
206
5
206
64
5
206
644
5
206
196
6
206
206
6
206
207
6
206
.i
207
.t
syntactic
and
semantic
augments
to
algol
.b
cacm
april,
1960
.a
smith,
j.
w.
.n
ca600404
jb
march
22,
1978
1:54
pm
.x
206
4
207
207
4
207
207
5
207
207
5
207
207
5
207
64
5
207
644
5
207
196
6
207
206
6
207
207
6
207
.i
208
.t
an
introduction
to
information
processing
language
v
.b
cacm
april,
1960
.a
newell,
a.
tonge,
f.
m.
.n
ca600403
jb
march
22,
1978
1:55
pm
.x
208
5
208
208
5
208
208
5
208
378
5
208
208
6
208
209
6
208
210
6
208
.i
209
.t
symbol
manipulation
by
threaded
lists
.b
cacm
april,
1960
.a
perlis,
a.
j.
thornton,
c.
.n
ca600402
jb
march
22,
1978
1:56
pm
.x
1050
5
209
1102
5
209
209
5
209
209
5
209
209
5
209
378
5
209
3008
5
209
731
5
209
798
5
209
849
6
209
106
6
209
196
6
209
208
6
209
209
6
209
209
6
209
209
6
209
209
6
209
209
6
209
209
6
209
210
6
209
210
6
209
367
6
209
406
6
209
483
6
209
627
6
209
627
6
209
.i
210
.t
recursive
functions
of
symbolic
expressions
and
their
computation
by
machine,
part
i
.b
cacm
april,
1960
.a
mccarthy,
j.
.n
ca600401
jb
march
22,
1978
1:57
pm
.x
205
4
210
210
4
210
214
4
210
1982
4
210
398
4
210
642
4
210
669
4
210
100
4
210
123
4
210
164
4
210
106
5
210
1
5
210
1024
5
210
1051
5
210
1102
5
210
1132
5
210
210
5
210
210
5
210
210
5
210
1390
5
210
1486
5
210
1549
5
210
1706
5
210
1826
5
210
1878
5
210
378
5
210
2060
5
210
2155
5
210
2168
5
210
2719
5
210
2723
5
210
2838
5
210
2842
5
210
2855
5
210
2879
5
210
3077
5
210
3080
5
210
3106
5
210
627
5
210
106
6
210
106
6
210
196
6
210
196
6
210
1051
6
210
1180
6
210
1303
6
210
1380
6
210
1389
6
210
1421
6
210
1469
6
210
1477
6
210
1491
6
210
1549
6
210
1549
6
210
1549
6
210
1626
6
210
1626
6
210
1626
6
210
1749
6
210
208
6
210
209
6
210
209
6
210
1826
6
210
1826
6
210
1826
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
1834
6
210
1869
6
210
1878
6
210
1972
6
210
1972
6
210
378
6
210
378
6
210
2046
6
210
2060
6
210
2060
6
210
2060
6
210
2110
6
210
2148
6
210
2151
6
210
2167
6
210
2192
6
210
2210
6
210
2457
6
210
2513
6
210
2645
6
210
2651
6
210
2657
6
210
2665
6
210
2723
6
210
2766
6
210
2766
6
210
2833
6
210
2850
6
210
2855
6
210
2954
6
210
2998
6
210
2998
6
210
406
6
210
406
6
210
406
6
210
483
6
210
3184
6
210
3184
6
210
627
6
210
627
6
210
731
6
210
731
6
210
731
6
210
731
6
210
731
6
210
731
6
210
753
6
210
793
6
210
794
6
210
.i
211
.t
share
standard
flow
chart
symbols
.b
cacm
march,
1960
.a
grems,
m.
.n
ca600307
jb
march
22,
1978
1:58
pm
.x
211
5
211
211
5
211
211
5
211
.i
212
.t
bisection
routine
(algorithm
4)
.b
cacm
march,
1960
.a
gorn,s.
.n
ca600306
jb
march
22,
1978
1:59
pm
.x
212
5
212
212
5
212
212
5
212
.i
213
.t
numerical
inversion
of
laplace
transforms
.b
cacm
march,
1960
.a
schmittroth,
l.
a.
.n
ca600305
jb
march
22,
1978
2:00
pm
.x
213
5
213
213
5
213
213
5
213
.i
214
.t
an
algorithm
defining
algol
assignment
statements
.b
cacm
march,
1960
.a
floyd,
r.
w.
.n
ca600304
jb
march
22,
1978
2:01
pm
.x
205
4
214
210
4
214
214
4
214
214
4
214
214
4
214
1593
4
214
1982
4
214
398
4
214
642
4
214
669
4
214
100
4
214
123
4
214
164
4
214
1
5
214
214
5
214
214
5
214
214
5
214
53
5
214
91
5
214
.i
215
.t
the
execute
operations-a
fourth
mode
of
instruction
sequencing
.b
cacm
march,
1960
.a
brooks,
f.
p.
.n
ca600303
jb
march
22,
1978
2:02
pm
.x
215
4
215
215
5
215
215
5
215
215
5
215
58
5
215
.i
216
.t
a
note
on
the
use
of
the
abacus
in
number
conversion
.b
cacm
march,
1960
.a
kanner,
h.
.n
ca600302
jb
march
22,
1978
2:03
pm
.x
216
5
216
216
5
216
216
5
216
.i
217
.t
soviet
computer
technology-1959
.b
cacm
march,
1960
.n
ca600301
jb
march
22,
1978
2:04
pm
.x
217
5
217
217
5
217
217
5
217
323
5
217
689
5
217
217
6
217
217
6
217
323
6
217
3197
6
217
.i
218
.t
computer
preparation
of
a
poetry
concordance
.b
cacm
february,
1960
.a
painter,
j.
a.
.n
ca600214
jb
march
22,
1978
2:05
pm
.x
218
5
218
218
5
218
218
5
218
.i
219
.t
marriage-with
problems
.b
cacm
february,
1960
.a
shuchter,
j.
p.
.n
ca600213
jb
march
22,
1978
2:06
pm
.x
219
5
219
219
5
219
219
5
219
.i
220
.t
a
new
method
of
computation
of
square
roots
without
using
division
.b
cacm
february,
1960
.a
traub,
j.
f.
.n
ca600212
jb
march
22,
1978
2:08
pm
.x
220
5
220
220
5
220
220
5
220
.i
221
.t
the
basic
side
of
tape
labeling
.b
cacm
february,
1960
.a
logan,
w.
a.
.n
ca600211
jb
march
22,
1978
2:09
pm
.x
121
5
221
221
5
221
221
5
221
221
5
221
221
6
221
.i
222
.t
coding
isomorphisms
.w
the
coding
of
external
symbols
into
symbols
internal
to
a
compute
can
sometimes
be
carried
out
in
such
a
way
that
relevant
informational
properties
are
preserved,
but
in
a
form
much
more
easily
dealt
with.
a
case
in
point
is
presented.
.b
cacm
february,
1960
.a
lynch,
w.
c.
.n
ca600210
jb
march
22,
1978
2:12
pm
.x
222
4
222
222
4
222
364
4
222
799
4
222
222
5
222
222
5
222
222
5
222
44
5
222
82
5
222
.i
223
.t
selfcipher:
programming
.b
cacm
february,
1960
.a
pelta,
h.
n.
.n
ca600209
jb
march
22,
1978
2:13
pm
.x
223
5
223
223
5
223
223
5
223
.i
224
.t
sequential
formula
translation
.w
the
syntax
of
an
algorithmic
language
such
as
algol
is
conveniently
described
as
a
sequence
of
states
indicated
by
an
element
called
cellar.
transitions
are
controlled
by
admissible
state-symbol
pairs
which
may
be
represented
by
a
transition
matrix.
this
description
of
syntax
furnishes
at
the
same
time
an
extremely
simple
rule
for
translating
into
machine
programs
statements
in
the
algorithmic
language.
sequential
treatment,
however,
is
not
feasible
in
the
case
of
certain
optimizing
processes
such
as
recursive
address
calculation.
.b
cacm
february,
1960
.a
samelson,
k.
bauer,
f.
l.
.n
ca600208
jb
march
22,
1978
2:17
pm
.x
224
4
224
364
4
224
1139
5
224
1141
5
224
1215
5
224
1223
5
224
224
5
224
224
5
224
224
5
224
267
5
224
1647
5
224
1781
5
224
1787
5
224
1792
5
224
364
5
224
405
5
224
438
5
224
98
5
224
763
5
224
100
6
224
123
6
224
196
6
224
196
6
224
196
6
224
919
6
224
990
6
224
1007
6
224
1025
6
224
1046
6
224
1131
6
224
1139
6
224
1140
6
224
1141
6
224
1149
6
224
1179
6
224
1198
6
224
1215
6
224
1215
6
224
1223
6
224
1265
6
224
1303
6
224
1323
6
224
1358
6
224
1366
6
224
1421
6
224
1460
6
224
1462
6
224
1463
6
224
1467
6
224
1468
6
224
1477
6
224
1491
6
224
1491
6
224
1496
6
224
1496
6
224
1531
6
224
1535
6
224
1565
6
224
1601
6
224
1602
6
224
1605
6
224
1613
6
224
1614
6
224
1626
6
224
1641
6
224
1781
6
224
1787
6
224
1788
6
224
205
6
224
224
6
224
224
6
224
224
6
224
224
6
224
224
6
224
224
6
224
224
6
224
224
6
224
224
6
224
224
6
224
224
6
224
224
6
224
224
6
224
249
6
224
249
6
224
288
6
224
303
6
224
316
6
224
381
6
224
398
6
224
399
6
224
11
6
224
44
6
224
55
6
224
77
6
224
77
6
224
77
6
224
77
6
224
93
6
224
98
6
224
404
6
224
404
6
224
404
6
224
405
6
224
410
6
224
412
6
224
438
6
224
463
6
224
464
6
224
464
6
224
483
6
224
3184
6
224
3188
6
224
584
6
224
600
6
224
631
6
224
631
6
224
680
6
224
691
6
224
763
6
224
763
6
224
763
6
224
799
6
224
799
6
224
.i
225
.t
a
techniquefor
handling
macro
instructions
(corrigendum)
.b
cacm
february,
1960
.a
greenwald,
i.
d.
.n
ca600207
jb
march
22,
1978
2:18
pm
.x
225
5
225
225
5
225
225
5
225
.i
226
.t
solution
of
polynomial
equation
by
bairstow-hitchcock
method
(algorithm
3)
.b
cacm
february,
1960
.a
grau,
a.
a.
.n
ca600206
jb
march
22,
1978
2:20
pm
.x
226
5
226
226
5
226
226
5
226
.i
227
.t
rootfinder
(algorithm
2)
.b
cacm
february,
1960
.a
wegstein,
j.
.n
ca600205
jb
march
22,
1978
2:20
pm
.x
227
5
227
227
5
227
227
5
227
.i
228
.t
quadi
(algorithm
1)
.b
cacm
february,
1960
.a
herbold,
r.
j.
.n
ca600204
jb
march
22,
1978
2:21
pm
.x
228
5
228
228
5
228
228
5
228
.i
229
.t
a
terminology
proposal
.b
cacm
february,
1960
.a
gruenberger,
f.
.n
ca600203
jb
march
22,
1978
2:24
pm
.x
229
5
229
229
5
229
229
5
229
.i
230
.t
a
proposal
for
character
code
compatibility
.b
cacm
february,
1960
.a
bemer,
r.
w.
.n
ca600202
jb
march
22,
1978
2:25
pm
.x
230
5
230
230
5
230
230
5
230
333
5
230
230
6
230
.i
231
.t
a
proposal
for
a
set
of
publication
standards
for
use
by
the
acm
.b
cacm
february,
1960
.a
kent,
e.
r.
.n
ca600201
jb
march
22,
1978
2:26
pm
.x
231
5
231
231
5
231
231
5
231
.i
232
.t
a
high-speed
sorting
procedure
.b
cacm
january,
1960
.a
frank,
r.
m.
lazarus,
r.
b.
.n
ca600104
jb
march
22,
1978
2:27
pm
.x
232
5
232
232
5
232
232
5
232
852
5
232
864
5
232
232
6
232
232
6
232
309
6
232
74
6
232
74
6
232
.i
233
.t
abstracts-additional
nuclear
reactor
codes
.b
cacm
january,
1960
.a
nather,
v.
sangren,
w.
.n
ca600103
jb
march
22,
1978
2:29
pm
.x
233
5
233
233
5
233
233
5
233
.i
234
.t
a
sap-like
assembly
program
for
the
ibm
650
.b
cacm
january,
1960
.a
speckhard,
a.
e.
.n
ca600102jb
march
22,
1978
2:30
pm
.x
234
5
234
234
5
234
234
5
234
.i
235
.t
two
think
pieces
.b
cacm
january,
1960
.a
bagley,
p.
r.
.n
ca600101
jb
march
22,
1978
2:30
pm
.x
235
5
235
235
5
235
235
5
235
.i
236
.t
soviet
cybernetics
and
computer
.w
this
article
records
observations
on
soviet
research
and
technology
in
cybernetics
and
computer
science,
made
by
the
author
during
a
visit
to
the
soviet
union
as
a
delegate
to
the
ifac
congress
on
automatic
control
held
in
moscow
in
the
summer
of
1960.
.b
cacm
december,
1961
.a
feigenbaum,
e.
a.
.n
ca611214
jb
march
15,
1978
10:06
pm
.x
1349
5
236
236
5
236
236
5
236
236
5
236
236
6
236
323
6
236
83
6
236
415
6
236
.i
237
.t
computer
production
of
peek-a-boo
sheets
.b
cacm
december,
1961
.a
robbins,
d.
.n
ca611213
jb
march
15,
1978
10:07
pm
.x
237
5
237
237
5
237
237
5
237
.i
238
.t
simulation
and
analysis
of
biochemical
systems
.b
cacm
december,
1961
.a
garfinkel,
d.
rutledge,
j.
d.
higgins,
j.
j.
.n
ca611212
jb
march
15,
1978
10:09
pm
.x
238
4
238
238
4
238
633
4
238
643
4
238
238
5
238
238
5
238
238
5
238
633
5
238
643
5
238
238
6
238
238
6
238
633
6
238
643
6
238
.i
239
.t
inefficiency
of
the
use
of
boolean
functions
for
information
retrieval
systems
.b
cacm
december,
1961
.a
verhoeff,
j.
goffman,
w.
belzer,
j.
.n
ca611211
jb
march
15,
1978
10:10
pm
.x
239
5
239
239
5
239
239
5
239
.i
240
.t
processing
magnetic
tape
files
with
variable
blocks
.b
cacm
december,
1961
.a
graham,
j.
w.
sprott,
d.
a.
.n
ca611210
jb
march
15,
1978
10:11
pm
.x
240
5
240
240
5
240
240
5
240
.i
241
.t
machine
calculation
of
moments
of
a
probability
distribution
.w
a
method
is
presented
for
the
calculation
on
a
machine
of
the
moments
of
a
probability
distribution,
necessitating
little
more
than
n
additions
and
n
references
to
memory
for
each
moment,
instead
of
the
minimum
of
n
multiplication,
2n
additions,
and
2n
references
to
memory
required
by
the
most
straightforward
method
(where
n
is
the
number
of
entries
in
the
probability
distribution).
the
method
is
directly
applicable
when
a
tabulated
distribution
exists,
as
when
it
has
been
computed
by
repeated
convolution;
but
in
this
case
it
conserves
both
time
and
accuracy.
.b
cacm
december,
1961
.a
lechner,
j.
a.
.n
ca611209
jb
march
15,
1978
10:15
pm
.x
241
5
241
241
5
241
241
5
241
.i
242
.t
notes
on
geometric
weighted
check
digit
verification
.w
this
note
describes
a
method
for
utilizing
geometric
weight
modulus
11
checking
digits
on
a
computer
which
does
not
have
either
multiplication
or
division.
in
addition
some
attempt
has
been
made
to
show
some
limitations
of
this
system.
.b
cacm
december,
1961
.a
wilson,
j.
g.
.n
ca611208
jb
march
15,
1978
10:17
pm
.x
242
5
242
242
5
242
242
5
242
.i
243
.t
n-dimensional
codes
for
detecting
and
correcting
multiple
errors
.w
the
paper
introduces
a
new
family
of
codes
for
detecting
and
correcting
multiple
errors
in
a
binary-coded
message.
the
message
itself
is
arranged
(conceptually)
into
a
multidimensional
rectangular
array.
the
processes
of
encoding
and
error
detection
are
based
upon
parity
evaluations
along
prescribed
dimensions
of
the
array.
effectiveness
of
the
codes
is
increased
by
introducing
a
"system
check
bit",
which
is
essentially
a
parity
check
on
the
other
parity
bits.
only
three-dimensional
codes
are
discussed
in
this
paper
with
parity
evaluations
along
the
horizontal,
the
vertical,
and
one
main
diagonal.
however,
the
family
of
codes
is
not
restricted
to
three
dimensions,
as
evidenced
by
the
discussion
by
minnick
and
ashenhurst
on
a
similar
multidimensional
single-bit
selection
plan
used
for
another
purpose
[6].
a
four-dimensional
code,
correcting
three
and
detecting
four
errors,
has
been
developed;
the
extension
to
higher-dimensional
codes
with
greater
correction
power
is
straightforward.
.b
cacm
december,
1961
.a
rubinoff,
m.
.n
ca611207
jb
march
15,
1978
10:23
pm
.x
243
5
243
243
5
243
243
5
243
.i
244
.t
incomplete
elliptic
integrals
(algorithm
73)
.b
cacm
december,
1961
.a
kriebel,
d.
c.
.n
ca611206
jb
march
15,
1978
10:24
pm
.x
244
5
244
244
5
244
244
5
244
.i
245
.t
a
set
of
associate
legendre
polynomials
of
the
second
kind
(algorithm
62)
.b
cacm
december,
1961
.a
herndon,
j.
r.
.n
ca611205
jb
march
15,
1978
10:25
pm
.x
1222
5
245
245
5
245
245
5
245
245
5
245
1130
6
245
245
6
245
310
6
245
.i
246
.t
least-squares
fit
by
orthogonal
polynomials
(algorithm
28)
.b
cacm
december,
1961
.a
macmillan,
d.
b.
.n
ca611204
jb
march
15,
1978
10:27
pm
.x
246
5
246
246
5
246
246
5
246
.i
247
.t
incomplete
elliptic
integrals
(algorithm
73)
.b
cacm
december,
1961
.a
jefferson,
d.
k.
.n
ca611203
jb
march
15,
1978
10:27
pm
.x
247
5
247
247
5
247
247
5
247
.i
248
.t
what
is
proprietary
in
mathematical
programming?-impressions
of
a
panel
discussion
.w
a
panel
discussion
on
"what
is
proprietary
in
mathematical
programming?"
was
sponsored
by
the
special
interest
committee
on
mathematical
programming
of
the
acm
during
a
hall
of
discussion/on
september
7th
at
the
16th
national
acm
meeting
in
los
angeles.
this
note
consists
solely
of
the
impressions
garnered
by
the
moderator
of
the
panel
and
does
not
necessarily
represent
the
position
of
any
of
the
panelists
or
other
participants
in
the
discussion.
.b
cacm
december,
1961
.a
smith,
l.
w.
.n
ca611202
jb
march
15,
1978
10:31
pm
.x
248
5
248
248
5
248
248
5
248
.i
249
.t
specification
languages
for
mechanical
languages
and
their
processors*-a
baker's
dozen
.b
cacm
december,
1961
.a
gorn,
s.
.n
ca611201
jb
march
15,
1978
10:32
pm
.x
249
4
249
249
4
249
249
4
249
254
4
249
272
4
249
1102
4
249
1109
4
249
1140
4
249
1188
4
249
1306
4
249
1464
4
249
1491
4
249
1767
4
249
1781
4
249
1787
4
249
1949
4
249
321
4
249
2059
4
249
2126
4
249
435
4
249
437
4
249
438
4
249
463
4
249
483
4
249
491
4
249
2732
4
249
560
4
249
583
4
249
3073
4
249
3185
4
249
627
4
249
631
4
249
632
4
249
642
4
249
644
4
249
653
4
249
680
4
249
761
4
249
762
4
249
763
4
249
123
4
249
140
4
249
919
4
249
989
4
249
196
5
249
249
5
249
249
5
249
249
5
249
1425
5
249
1781
5
249
303
5
249
438
5
249
51
5
249
762
5
249
123
6
249
196
6
249
196
6
249
919
6
249
990
6
249
1007
6
249
1046
6
249
1131
6
249
1139
6
249
1140
6
249
1149
6
249
1198
6
249
1215
6
249
1223
6
249
1265
6
249
1303
6
249
1323
6
249
1358
6
249
1366
6
249
1421
6
249
1460
6
249
1462
6
249
1463
6
249
1467
6
249
1468
6
249
1477
6
249
1491
6
249
1496
6
249
1531
6
249
1535
6
249
1565
6
249
1601
6
249
1602
6
249
1613
6
249
1614
6
249
1626
6
249
1641
6
249
1787
6
249
1788
6
249
205
6
249
224
6
249
224
6
249
249
6
249
249
6
249
249
6
249
249
6
249
288
6
249
303
6
249
316
6
249
381
6
249
398
6
249
11
6
249
77
6
249
404
6
249
410
6
249
463
6
249
464
6
249
483
6
249
483
6
249
3184
6
249
3188
6
249
584
6
249
600
6
249
680
6
249
691
6
249
763
6
249
799
6
249
.i
250
.t
an
engineering
application
of
logic-structure
tables
.b
cacm
november,
1961
.a
nickerson,
r.
c.
.n
ca611118
jb
march
15,
1978
10:34
pm
.x
250
4
250
1237
4
250
1237
5
250
250
5
250
250
5
250
250
5
250
320
5
250
2220
5
250
753
5
250
1172
6
250
1237
6
250
1327
6
250
1354
6
250
1489
6
250
1548
6
250
250
6
250
250
6
250
250
6
250
320
6
250
753
6
250
.i
251
.t
ballistic
cam
design
.w
this
paper
presents
a
digital
computer
program
for
the
rapid
calculation
of
manufacturing
data
essential
to
the
design
of
preproduction
cams
which
are
utilized
in
ballistic
computers
of
tank
fire
control
systems.
the
cam
profile
generated
introduces
the
superelevation
angle
required
by
tank
main
armament
for
a
particular
type
ammunition.
.b
cacm
november,
1961
.a
archambault,
m.
.n
ca611117
jb
march
15,
1978
10:37
pm
.x
251
5
251
251
5
251
251
5
251
.i
252
.t
programming
a
duplex
computer
system
.w
this
paper
describes
a
method
of
duplex-computer
programming
that
has
been
used
with
two
computers
in
a
military
defense
system.
the
method
combines
special
programs
with
a
basic
data
processing
program
package.
the
duplex
operation
gives
the
system
greater
reliability.
after
achieving
the
required
level
of
integration,
both
computers
do
similar
processing
on
the
same
inputs
and
continually
cross-check
the
intermediate
and
final
results.
.b
cacm
november,
1961
.a
dow,
j.
.n
ca611116
jb
march
15,
1978
10:40
pm
.x
252
5
252
252
5
252
252
5
252
.i
253
.t
on
a
program
for
ray-chaudhuri's
algorithm
for
a
minimum
cover
of
an
abstract
complex
.b
cacm
november,
1961
.a
foata,
d.
c.
.n
ca611115
jb
march
15,
1978
10:41
pm
.x
253
5
253
253
5
253
253
5
253
.i
254
.t
smalgol-61
.w
prior
to
and
during
the
1961
western
joint
computer
conference,
several
people
in
the
joint
users
groups
had
expressed
interest
in
defining
a
"smalgol"
language.
this
is
to
be
an
algol
language
for
use
with
compilers
on
relatively
small
size
computers.
a
preliminary
report
resulted.
at
the
acm
national
conference
four
months
later,
after
considering
several
counter
proposals,
a
final
version
was
agreed
upon
by
a
subcommittee.
the
recommendations
of
the
subcommittee
for
a
standard
subset
of
algol
60
for
use
on
small
computers
is
presented
here.
.b
cacm
november,
1961
.a
bachelork,
g.
a.
dempster,
j.
r.
h.
knuth,
d.
e.
speroni,
j.
.n
ca611114
jb
march
15,
1978
10:44
pm
.x
249
4
254
254
4
254
254
4
254
254
4
254
272
4
254
1102
4
254
1109
4
254
1140
4
254
1188
4
254
1234
4
254
1306
4
254
1464
4
254
1491
4
254
1767
4
254
1781
4
254
1787
4
254
1949
4
254
321
4
254
2059
4
254
2126
4
254
435
4
254
437
4
254
463
4
254
483
4
254
491
4
254
2732
4
254
560
4
254
583
4
254
3073
4
254
627
4
254
631
4
254
632
4
254
642
4
254
644
4
254
653
4
254
680
4
254
761
4
254
762
4
254
763
4
254
123
4
254
140
4
254
919
4
254
989
4
254
196
5
254
254
5
254
254
5
254
254
5
254
321
5
254
387
5
254
794
5
254
254
6
254
.i
255
.t
augmentation
(algorithm
68)
.b
cacm
november,
1961
.a
breed,
l.
m.
.n
ca611113
jb
march
15,
1978
10:45
pm
.x
255
5
255
255
5
255
255
5
255
.i
256
.t
a
set
of
test
matrices
(algorithm
52)
.b
cacm
november,
1961
.a
dubay,
g.
h.
.n
ca611112
jb
march
15,
1978
10:46
pm
.x
256
5
256
256
5
256
256
5
256
.i
257
.t
invert
(algorithm
42)
.b
cacm
november,
1961
.a
knapp,
a.
w.
shaman,
p.
.n
ca611111
jb
march
15,
1978
10:47
pm
.x
257
5
257
257
5
257
257
5
257
.i
258
.t
composition
generator
(algorithm
72)
.b
cacm
november,
1961
.a
hellerman,
o.
ogden,
s.
.n
ca611110
jb
march
15,
1978
10:48
pm
.x
258
5
258
258
5
258
258
5
258
.i
259
.t
permutation
(algorithm
71)
.b
cacm
november,
1961
.a
coveyou,
r.
r.
sullivan,
j.
g.
.n
ca611109
jb
march
15,
1978
10:52
pm
.x
259
5
259
259
5
259
259
5
259
.i
260
.t
interpolation
by
aitken
(algorithm
70)
.b
cacm
november,
1961
.a
mifsud,
c.
j.
.n
ca611108
jb
march
15,
1978
10:53
pm
.x
260
5
260
260
5
260
260
5
260
.i
261
.t
tape
splitting
.b
cacm
november,
1961
.a
moore,
d.
p.
.n
ca611107
jb
march
15,
1978
10:54
pm
.x
261
5
261
261
5
261
261
5
261
.i
262
.t
map
.b
cacm
november,
1961
.a
moore,
c.
l.
ruwe,
m.
l.
.n
ca611106
jb
march
15,
1978
10:54
pm
.x
262
5
262
262
5
262
262
5
262
.i
263
.t
library
loading
with
alternate
routine
selection
.b
cacm
november,
1961
.a
moore,
d.
p.
.n
ca611105
jb
march
15,
1978
10:55
pm
.x
263
5
263
263
5
263
263
5
263
.i
264
.t
a
generalized
polyphase
merge
algorithm
.b
cacm
november,
1961
.a
reynolds,
s.
w.
.n
ca611104
jb
march
15,
1978
10:56
pm
.x
264
5
264
264
5
264
264
5
264
479
5
264
264
6
264
299
6
264
.i
265
.t
low
level
language
subroutines
for
use
within
fortran
.w
this
paper
describes
some
subroutines,
coded
in
symbolic
languages
and
for
use
within
fortran
coded
programs,
to
deal
with
"special
arithmetic"
(e.g.
multi-precision
arithmetic),
symbol
manipulation,
bit
manipulation
and
expanded
character
set
input-output,
and
visual
display.
.b
cacm
november,
1961
.a
barnett,
m.
p.
.n
ca611103
jb
march
15,
1978
10:59
pm
.x
265
5
265
265
5
265
265
5
265
464
5
265
720
5
265
265
6
265
265
6
265
404
6
265
464
6
265
474
6
265
.i
266
.t
fitting
spheres
by
the
method
of
least
squares
.b
cacm
november,
1961
.a
robinson,
s.
m.
.n
ca611102
jb
march
15,
1978
11:00
pm
.x
266
5
266
266
5
266
266
5
266
.i
267
.t
some
proposals
for
improving
the
efficiency
of
algol
60
.b
cacm
november,
1961
.a
wilkes,
m.
v.
.n
ca611101
jb
march
15,1978
11:01
pm
.x
267
4
267
1139
4
267
1141
4
267
1215
4
267
1223
4
267
1647
4
267
1781
4
267
1787
4
267
1792
4
267
364
4
267
405
4
267
438
4
267
763
4
267
1323
5
267
224
5
267
267
5
267
267
5
267
267
5
267
267
6
267
3184
6
267
799
6
267
.i
268
.t
stochastic
evaluation
of
a
static
storage
allocation
.b
cacm
october,
1961
.a
cohen,
l.
j.
.n
ca611013
jb
march
16,
1978
12:48
pm
.x
268
5
268
268
5
268
268
5
268
.i
269
.t
core
allocation
based
on
probability
.b
cacm
october,
1961
.a
riskin,
b.
n.
.n
ca611012
jb
march
16,
1978
12:49
pm
.x
269
5
269
269
5
269
269
5
269
.i
270
.t
techniques
for
storage
allocation
algorithms
.b
cacm
october,
1961
.a
kelley
jr.,
j.
e.
.n
ca611011
jb
march
16,
1978
12:50
pm
.x
270
5
270
270
5
270
270
5
270
678
5
270
270
6
270
.i
271
.t
a
semi-automatic
storage
allocation
system
at
loading
time
.b
cacm
october,
1961
.a
heising,
w.
p.
larner,
r.
a.
.n
ca611010
jb
march
16,
1978
12:51
pm
.x
972
5
271
271
5
271
271
5
271
271
5
271
1774
5
271
560
5
271
800
6
271
196
6
271
1173
6
271
271
6
271
271
6
271
271
6
271
273
6
271
276
6
271
.i
272
.t
a
storage
allocation
scheme
for
algol
60
.w
a
storage
allocation
scheme
for
a
machine
with
a
2048
instruction
core
store
and
a
magnetic
drum
is
described.
the
use
of
the
drum
for
storing
program
blocks
and/or
data
must
be
directed
by
the
programmer
through
auxiliary
information
in
the
algol
program.
the
administrative
routines
controlling
the
storage
at
run
time
are
described
in
full.
a
detailed
example
is
given.
.b
cacm
october,
1961
.a
jensen,
j.
mondrup,
p.
naur,
p.
.n
ca611009
jb
march
16,
1978
12:54
pm
.x
249
4
272
254
4
272
272
4
272
1102
4
272
1109
4
272
1140
4
272
1188
4
272
1306
4
272
1464
4
272
1491
4
272
1767
4
272
1781
4
272
1787
4
272
1949
4
272
321
4
272
2059
4
272
2126
4
272
435
4
272
437
4
272
463
4
272
483
4
272
491
4
272
2732
4
272
560
4
272
583
4
272
3073
4
272
627
4
272
631
4
272
632
4
272
642
4
272
644
4
272
653
4
272
680
4
272
761
4
272
762
4
272
763
4
272
123
4
272
140
4
272
919
4
272
989
4
272
196
5
272
272
5
272
272
5
272
272
5
272
.i
273
.t
experience
in
automatic
storage
allocation
.b
cacm
october,
1961
.a
collins
jr.,
g.
o.
.n
ca611008
jb
march
16,
1978
12:55
pm
.x
972
5
273
273
5
273
273
5
273
273
5
273
2911
5
273
1879
6
273
271
6
273
273
6
273
273
6
273
276
6
273
2435
6
273
2498
6
273
2734
6
273
2773
6
273
2983
6
273
.i
274
.t
dynamic
storage
allocation
in
the
atlas
computer,
including
an
automatic
use
of
a
backing
store
.b
cacm
october,
1961
.a
fotheringham,
j.
.n
ca611007
jb
march
16,
1978
12:57
pm
.x
274
5
274
274
5
274
274
5
274
1754
5
274
2358
5
274
488
5
274
1746
6
274
1751
6
274
1753
6
274
274
6
274
274
6
274
274
6
274
376
6
274
.i
275
.t
dynamic
storage
allocation
for
an
information
retrieval
system
.b
cacm
october,
1961
.a
sams,
b.
h.
.n
ca611006
jb
march
16,
1978
12:58
pm
.x
275
5
275
275
5
275
275
5
275
.i
276
.t
program
organization
and
record
keeping
for
dynamic
storage
allocation
.w
the
material
presented
in
this
paper
is
part
of
the
design
plan
of
the
core
allocation
portion
of
the
ascii-matic
programming
system.
project
ascii-matic
is
concerned
with
the
application
of
computer
techniques
to
the
activities
of
certain
headquarters
military
intelligence
operations
of
the
u.s.
army.
.b
cacm
october,
1961
.a
holt,
a.
w.
.n
ca611005
jb
march
16,
1978
1:02
pm
.x
972
5
276
276
5
276
276
5
276
276
5
276
1471
5
276
800
6
276
271
6
276
273
6
276
276
6
276
276
6
276
.i
277
.t
problems
of
storage
allocation
in
a
multiprocessor
multiprogrammed
system
.b
cacm
october,
1961
.a
maher,
r.
j.
.n
ca611004
jb
march
16,
1978
1:12
pm
.x
277
5
277
277
5
277
277
5
277
.i
278
.t
a
general
formulation
of
storage
allocation
.w
formalization
of
a
general
computer
storage
allocation
process
is
attempted.
with
a
given
computer
m
is
associated
a
fictitious
computer
m'
essentially
identical
to
m
except
in
respect
to
possession
of
unbounded
primary
storage.
mappings
of
the
total
storage
set
(internal
and
external)
of
m
into
the
direct
address
set
of
m'
are
introduced.
a
program
sequence
p
for
m'
is
termed
m-admissible
(relative
to
a
specific
execution
time
period)
if
there
is
a
mapping
underwhich
p
and
its
effective
data
referents
are
all
located
in
the
direct
address
set
of
m.
storage
allocation
is
considered
as
a
process
of
establishing
for
an
arbitrary
m'
program
a
sequence
of
mappings,
a
decoupling
of
the
program
into
m-admissible
subprograms
and
a
linking
set
of
interludes.
an
existence
proof
in
terms
of
a
completely
interpretive
m
program
as
indicated.
some
special
cases
are
discussed.
various
restrictions
on
generality
of
m'
programs
are
considered
under
which
more
practical
realization
of
allocation
processes
becomes
tractable.
.b
cacm
october,
1961
.a
roberts
jr.,
a.
e.
.n
ca611003
jb
march
16,
1978
1:22
pm
.x
278
5
278
278
5
278
278
5
278
.i
279
.t
the
case
for
dynamic
storage
allocation
.b
cacm
october,
1961
.a
sams,
b.
h.
.n
ca611002
jb
march
16,
1978
1:23
pm
.x
279
5
279
279
5
279
279
5
279
657
5
279
279
6
279
409
6
279
.i
280
.t
a
preplanned
approach
to
a
storage
allocating
compiler
.b
cacm
october,
1961
.a
o'neil,
r.
w.
.n
ca611001
jb
march
16,
1978
1:24
pm
.x
280
5
280
280
5
280
280
5
280
.i
281
.t
putting
a
hex
on
e^x
.w
recent
notes
on
approximate
natural
antilogy
have
not
considered
indirect
formulations
for
describing
e^x.
in
this
note
we
produce
a
particular
family
of
very
fast,
high
precision
and
eminently
practical
exponential
evaluation
formulas
derived
from
one
such
formulation.
.b
cacm
october,
1961
.a
feurzeig,
w.
.n
ca610913
jb
march
16,
1978
1:27
pm
.x
281
5
281
281
5
281
281
5
281
.i
282
.t
optimum
tape-writing
procedures
.w
consider
a
magnetic
tape
system
with
a
read
check
after
writing.
where
an
error
occurs
in
writing
a
record,
a
programmed
error
routine
may
either
bypass
some
or
all
of
the
area
on
tape
or
try
to
rewrite
the
record
on
the
same
area.
this
paper
evaluates
these
two
procedures
on
the
basis
of
expected
loss
of
computer
time
and
develops
a
decision
rule
for
selecting
the
optimum
procedure.
the
rule
depends
critically
on
the
number
of
times
the
tape
being
written
will
be
used
in
the
future.
in
the
case
where
the
optimum
procedure
is
to
bypass
an
area,
a
second
decision-the
size
of
the
area
to
be
bypassed-is
necessary.
a
formula
is
developed
to
determine
the
optimum
area
to
be
bypassed
for
each
procedure.
.b
cacm
september,
1961
.a
hutchinson,
k.
.n
ca610912
jb
march
16,
1978
1:32
pm
.x
282
5
282
282
5
282
282
5
282
.i
283
.t
inversion
of
a
complex
matrix
.b
cacm
september,
1961
.a
tornheim,
l.
.n
ca610911
jb
march
16,
1978
1:44
pm
.x
283
5
283
283
5
283
283
5
283
.i
284
.t
manipulation
of
algebraic
expressions
.w
an
algorithm
for
algebraically
manipulating
expressions
of
the
form
sum{cipi,
i=1,...,n};
has
been
developed
in
conjunction
with
the
development
of
programs
for
systems
analysis
problems.
this
algorithm
enablesus
to
derive
over-all
system
transfer
functions
from
algebraically
described
block
diagrams
of
any
linear
continuous
multi-loop
feedback
system.
the
machine
representation
of
the
derived
expression,
is,
by
virtue
of
the
algorithm,
in
a
form
which
simplifies
the
task
of
compiling.
the
algorithm
was
developed
for
a
particular
purpose
in
connection
with
system
analysis
studies.
however,
its
application
as
a
mathematical
device
extends
far
beyond
the
confines
of
the
original
problem.
.b
cacm
september,
1961
.a
rom,
a.
r.
m.
.n
ca610910
jb
march
16,
1978
9:36
pm
.x
964
5
284
1396
5
284
284
5
284
284
5
284
284
5
284
964
6
284
1028
6
284
1029
6
284
1083
6
284
1132
6
284
1214
6
284
1278
6
284
1334
6
284
1365
6
284
1386
6
284
1387
6
284
1388
6
284
1392
6
284
1393
6
284
1394
6
284
1395
6
284
1396
6
284
1397
6
284
1496
6
284
284
6
284
284
6
284
407
6
284
3199
6
284
3200
6
284
3201
6
284
3202
6
284
3203
6
284
3204
6
284
561
6
284
561
6
284
730
6
284
759
6
284
.i
285
.t
solution
of
tridiagonal
matrices
.b
cacm
september,
1961
.a
wenrick,
r.
c.
houghton,
a.
v.
.n
ca610909
jb
march
16,
1978
9:39
pm
.x
285
5
285
285
5
285
285
5
285
.i
286
.t
an
iterative
method
for
inversion
of
power
series
.b
cacm
september,
1961
.a
bramhall,
j.
n.
.n
ca610908
jb
march
16,
1978
9:41
pm
.x
286
5
286
286
5
286
286
5
286
.i
287
.t
the
generalized
important
event
technique
.b
cacm
september,
1961
.a
shapiro,
n.
vreenegoor,
h.
.n
ca610907
jb
march
16,
1978
9:42
pm
.x
287
5
287
287
5
287
287
5
287
.i
288
.t
a
syntactical
chart
of
algol
60
.b
cacm
september,
1961
.a
taylor,
w.
turner,
l.
waychoff,
r.
.n
ca610906jb
march
16,
1978
9:43
pm
.x
989
5
288
288
5
288
288
5
288
288
5
288
1781
5
288
729
5
288
123
6
288
196
6
288
196
6
288
919
6
288
990
6
288
1007
6
288
1046
6
288
1131
6
288
1139
6
288
1140
6
288
1149
6
288
1198
6
288
1215
6
288
1223
6
288
1265
6
288
1303
6
288
1323
6
288
1358
6
288
1366
6
288
1421
6
288
1460
6
288
1462
6
288
1463
6
288
1467
6
288
1468
6
288
1477
6
288
1491
6
288
1496
6
288
1531
6
288
1535
6
288
1565
6
288
1601
6
288
1602
6
288
1613
6
288
1614
6
288
1626
6
288
1641
6
288
1787
6
288
1788
6
288
205
6
288
224
6
288
249
6
288
288
6
288
288
6
288
288
6
288
316
6
288
381
6
288
398
6
288
11
6
288
404
6
288
410
6
288
463
6
288
464
6
288
483
6
288
3184
6
288
3184
6
288
3188
6
288
584
6
288
600
6
288
616
6
288
680
6
288
691
6
288
763
6
288
799
6
288
.i
289
.t
critical
path
scheduling
(algorithm
40)
.b
cacm
september,
1961
.a
alexander,
n.
p.
.n
ca610905
jb
march
16,
1978
9:44
pm
.x
289
5
289
289
5
289
289
5
289
.i
290
.t
chain
tracing
(algorithm
69)
.b
cacm
september,
1961
.a
mayoh,
b.
h.
.n
ca610904
jb
march
16,
1978
9:45
pm
.x
290
5
290
290
5
290
290
5
290
.i
291
.t
use
of
mobol
in
preparingretrieval
programs
.b
cacm
september,
1961
.a
hoffman,
j.
opler,
a.
.n
ca610903
jb
march
16,
1978
9:50
pm
.x
291
5
291
291
5
291
291
5
291
.i
292
.t
an
information
retrieval
language
for
legal
studies
.b
cacm
september,
1961
.a
kehl,
w.
b.
horty,
j.
f.
bacon,
c.
r.
t.
mitchell,
d.
s.
.n
ca610902
jb
march
16,
1978
9:51
pm
.x
292
5
292
292
5
292
292
5
292
.i
293
.t
the
applied
mathematics
laboratory
of
the
david
w.
taylor
model
basin
.b
cacm
september,
1961
.a
richstone,
m.
.n
ca610901
jb
march
16,
1978
10:01
pm
.x
293
5
293
293
5
293
293
5
293
.i
294
.t
an
imaginary
number
system
.b
cacm
august,
1961
.a
knuth,
d.
.n
ca610810
jb
march
16,
1978
10:02
pm
.x
294
5
294
294
5
294
294
5
294
.i
295
.t
rational
approximations
for
the
error
function
and
for
similar
functions
.b
cacm
august,
1961
.a
clendenin,
w.
w.
.n
ca610809
jb
march
16,
1978
10:03
pm
.x
295
5
295
295
5
295
295
5
295
.i
296
.t
a
note
on
multiple
precision
arithmetic
.b
cacm
august,
1961
.a
cox,
a.
g.
luther,
h.
a.
.n
ca610808
jb
march
16,
1978
10:04
pm
.x
1393
5
296
296
5
296
296
5
296
296
5
296
106
6
296
296
6
296
731
6
296
.i
297
.t
a
note
on
fitting
great
circles
by
least
squares
.b
cacm
august,
1961
.a
marcus,
c.
f.
.n
ca610807
jb
march
16,
1978
10:05
pm
.x
297
4
297
122
5
297
297
5
297
297
5
297
297
5
297
.i
298
.t
a
48-bit
pseudo-random
number
generator
.w
a
new
48-bit
pseudo-random
number
generator,
suitable
for
several
computers,
was
tested
statistically
for
randomness
to
determine
its
adequacy
for
use
in
monte
carlo
programs.
frequency
tests,
distributions
of
certain
low-order
moments,
runs
up
and
down,
and
runs
above
and
below
the
mean
were
applied
to
one-half
million
generated
numbers
lying
within
the
interval
(0,1)
and
to
three
sets
of
integers
obtained
from
specified
bits
within
the
generated
numbers.
these
tests
substantiated
the
randomness
of
all
numbers
except
for
the
set
of
integers
coming
from
the
least
significant
bits.
.b
cacm
august,
1961
.a
kuehn,
h.
g.
.n
ca610806
jb
march
16,
1978
10:09
pm
.x
298
5
298
298
5
298
298
5
298
.i
299
.t
a
generalized
polyphase
merge
algorithm
.b
cacm
august,
1961
.a
reynolds,
s.
w.
.n
ca610805
jb
march
16,
1978
10:10
pm
.x
299
5
299
299
5
299
299
5
299
2146
5
299
479
5
299
862
5
299
863
5
299
861
6
299
862
6
299
863
6
299
264
6
299
299
6
299
299
6
299
299
6
299
299
6
299
479
6
299
.i
300
.t
cobol:
a
sample
problem
.w
a
simplified
merchandise
control
problem
has
been
chosen
for
presenting
cobol
to
users
and
potential
users
of
computing
systems.
a
mythical
department
store,
"e.
language
bros.,
inc.",
is
programming
in
the
cobol
language
one
of
the
many
runs
on
its
computer.
.b
cacm
august,
1961
.a
mackinson,
t.
n.
.n
ca610804
jb
march
16,
1978
10:12
pm
.x
300
5
300
300
5
300
300
5
300
638
5
300
300
6
300
.i
301
.t
a
set
of
test
matrices
(algorithm
52)
.b
cacm
august,
1961
.a
gilbert,
h.
e.
.n
ca610803
jb
march
16,
1978
10:13
pm
.x
301
5
301
301
5
301
301
5
301
.i
302
.t
augmentation
(algorithm
68)
.b
cacm
august,
1961
.a
rice,
h.
g.
.n
ca610802
jb
march
16,
1978
10:14
pm
.x
302
5
302
302
5
302
302
5
302
.i
303
.t
some
basic
terminology
connected
with
mechanical
languages
and
their
processors
.w
the
suggestions
in
this
paper
are
part
of
the
terminology
used
in
work
for
the
university
of
pennsylvania's
office
of
computer
research
and
education.
the
work
is
jointly
supported
by
the
national
science
foundation
and
the
air
force
office
of
scientific
research.
.b
cacm
august,
1961
.a
gorn,
s.
.n
ca610801
jb
march
16,
1978
10:16
pm
.x
249
5
303
303
5
303
303
5
303
303
5
303
438
5
303
3185
5
303
196
6
303
224
6
303
249
6
303
303
6
303
303
6
303
303
6
303
51
6
303
77
6
303
438
6
303
.i
304
.t
nth
roots
of
a
complex
number
(algorithm
53)
.b
cacm
july,
1961
.a
nestor
jr.,
c.
w.
.n
ca610713
jb
march
16,
1978
10:17
pm
.x
304
5
304
304
5
304
304
5
304
.i
305
.t
cram
(algorithm
67)
.b
cacm
july,
1961
.a
caffrey,
j.
.n
ca610712
jb
march
16,
1978
10:18
pm
.x
305
5
305
305
5
305
305
5
305
.i
306
.t
invrs
(algorithm
66)
.b
cacm
july,
1961
.a
caffery,
j.
.n
ca610711
jb
march
16,
1978
10:19
pm
.x
306
5
306
306
5
306
306
5
306
.i
307
.t
find
(algorithm
65)
.b
cacm
july,
1961
.a
hoare,
c.
a.
r.
.n
ca610710
jb
march
16,
1978
10:20
pm
.x
307
5
307
307
5
307
307
5
307
2227
5
307
2783
5
307
3054
5
307
1175
6
307
1834
6
307
1880
6
307
1919
6
307
1969
6
307
1980
6
307
1997
6
307
307
6
307
307
6
307
307
6
307
308
6
307
309
6
307
309
6
307
2017
6
307
2679
6
307
776
6
307
.i
308
.t
quicksort
(algorithm
64)
.b
cacm
july,
1961
.a
hoare,
c.
a.
r.
.n
ca610709
jb
march
16,
1978
10:21
pm
.x
1175
5
308
1919
5
308
1969
5
308
1997
5
308
308
5
308
308
5
308
308
5
308
2191
5
308
2388
5
308
2679
5
308
3054
5
308
3121
5
308
864
6
308
864
6
308
970
6
308
1175
6
308
1175
6
308
1175
6
308
1175
6
308
1190
6
308
1228
6
308
1312
6
308
1880
6
308
1919
6
308
1969
6
308
1969
6
308
1969
6
308
1980
6
308
1997
6
308
1997
6
308
307
6
308
308
6
308
308
6
308
308
6
308
308
6
308
308
6
308
308
6
308
308
6
308
308
6
308
308
6
308
309
6
308
309
6
308
309
6
308
309
6
308
309
6
308
2017
6
308
2042
6
308
2456
6
308
2679
6
308
2709
6
308
74
6
308
3187
6
308
3187
6
308
507
6
308
716
6
308
776
6
308
783
6
308
.i
309
.t
partition
(algorithm
63)
.b
cacm
july,
1961
.a
hoare,
c.
a.
r.
.n
ca610708
jb
march
16,
1978
10:22
pm
.x
1919
5
309
309
5
309
309
5
309
309
5
309
2191
5
309
2388
5
309
2783
5
309
2784
5
309
3054
5
309
3121
5
309
864
5
309
864
6
309
1175
6
309
1175
6
309
1312
6
309
1729
6
309
232
6
309
1880
6
309
1919
6
309
1969
6
309
1980
6
309
1997
6
309
307
6
309
307
6
309
308
6
309
308
6
309
308
6
309
308
6
309
308
6
309
309
6
309
309
6
309
309
6
309
309
6
309
309
6
309
309
6
309
309
6
309
309
6
309
2017
6
309
2456
6
309
2679
6
309
2709
6
309
74
6
309
74
6
309
2783
6
309
3187
6
309
776
6
309
.i
310
.t
a
set
of
associate
legendre
polynomials
of
the
second
kind
(algorithm
62)
.b
cacm
july,
1961
.a
herndon,
j.
r.
.n
ca610707
jb
march
16,
1978
10:23
pm
.x
1222
5
310
310
5
310
310
5
310
310
5
310
1130
6
310
245
6
310
310
6
310
.i
311
.t
procedures
for
range
arithmetic
(algorithm
61)
.b
cacm
july,
1961
.a
gibb,
a.
.n
ca610706
jb
march
16,
1978
10:25
pm
.x
1524
5
311
1931
5
311
311
5
311
311
5
311
311
5
311
2214
5
311
2544
5
311
879
6
311
1177
6
311
1197
6
311
1524
6
311
311
6
311
311
6
311
311
6
311
311
6
311
2214
6
311
.i
312
.t
a
further
note
on
approximating
e^x
.b
cacm
july,
1961
.a
olivier,
d.
.n
ca610705
jb
march
16,
1978
10:26
pm
.x
312
5
312
312
5
312
312
5
312
.i
313
.t
an
iterative
method
for
inversion
of
power
series
.b
cacm
july,
1961
.a
bramhall,
j.
n.
.n
ca610704
jb
march
16,
1978
10:26
pm
.x
313
5
313
313
5
313
313
5
313
.i
314
.t
a
divisionless
method
of
integer
conversion
.b
cacm
july,
1961
.a
clarkson,
w.
k.
prince,
b.
m.
.n
ca610703
jb
march
16,
1978
10:27
pm
.x
314
5
314
314
5
314
314
5
314
.i
315
.t
solution
of
tridiagonal
matrices
.b
cacm
july,
1961
.a
wenrick,
r.
c.
.n
ca610702
jb
march
16,
1978
10:28
pm
.x
315
5
315
315
5
315
315
5
315
.i
316
.t
an
algorithm
for
equivalence
declarations
.b
cacm
july,
1961
.a
arden,
b.
w.
galler,
a.
graham,
r.
m.
.n
ca610701
jb
march
16,
1978
10:29
pm
.x
1072
5
316
1781
5
316
316
5
316
316
5
316
316
5
316
123
6
316
196
6
316
919
6
316
990
6
316
1007
6
316
1046
6
316
1131
6
316
1139
6
316
1140
6
316
1149
6
316
1198
6
316
1215
6
316
1223
6
316
1265
6
316
1303
6
316
1323
6
316
1358
6
316
1366
6
316
1421
6
316
1460
6
316
1462
6
316
1463
6
316
1467
6
316
1468
6
316
1477
6
316
1491
6
316
1496
6
316
1531
6
316
1535
6
316
1565
6
316
1601
6
316
1602
6
316
1613
6
316
1614
6
316
1626
6
316
1641
6
316
1787
6
316
1788
6
316
205
6
316
224
6
316
249
6
316
288
6
316
316
6
316
316
6
316
381
6
316
398
6
316
11
6
316
404
6
316
410
6
316
463
6
316
464
6
316
483
6
316
3184
6
316
3188
6
316
584
6
316
600
6
316
680
6
316
691
6
316
763
6
316
799
6
316
.i
317
.t
on
the
approximation
of
curves
by
line
segments
using
dynamic
programming
.b
cacm
june,
1961
.a
bellman,
r.
.n
ca610608
jb
march
16,
1978
10:31
pm
.x
317
5
317
317
5
317
317
5
317
497
5
317
867
5
317
317
6
317
317
6
317
497
6
317
.i
318
.t
combat
vehicle
firing
stability
(active
suspension)
.b
cacm
june,
1961
.a
fischer,
c.
m.
.n
ca610607
jb
march
16,
1978
10:32
pm
.x
318
5
318
318
5
318
318
5
318
.i
319
.t
on
a
class
of
iteration
formulas
and
some
historical
notes
.w
the
class
of
iteration
formulas
obtainable
by
rational
approximations
of
"euler's
formula"
is
derived
with
the
corresponding
error
estimates.
some
historical
notes
on
iterative
procedures
are
followed
by
a
derivation
of
euler's
formula
with
the
associated
error
estimate
in
a
new
notation
which
simplifies
the
error
estimate
and
suggests
generalizations.
the
final
section
considers
the
pade
approximants
to
the
"euler
polynomial"
and
shows
how
a
number
of
known
formulas
may
be
derived
from
this
unified
approach.
there
is
a
short
discussion
of
the
"best"
formula.
.b
cacm
june,
1961
.a
traub,
j.
f.
.n
ca610606
jb
march
16,
1978
10:36
pm
.x
319
4
319
319
5
319
319
5
319
319
5
319
380
5
319
.i
320
.t
logic-structure
tables
.w
logic
tables
are
an
excellent
way
of
developing
and
expressing
the
logic
required
in
procedures,
operations,
systems
and
circuits.
a
set
of
rules
for
writing
and
using
logic
tables
is
explained
by
means
of
some
simple
examples.
then
the
logic
structure
of
a
vending
machine
is
given
in
which
two
logic
tables
are
used.
logic
tables
are
two-dimensional
in
nature,
enabling
us
to
fully
express
and
consider
both
the
sequential
and
parallel
aspects
of
logic.
they
can
be
compiled
directly
into
a
computer
program
and
so
eliminate
the
need
for
flow
charting
and
hand
coding.
.b
cacm
june,
1961
.a
cantrell,
h.
n.
king,
j.
king,
f.
e.
h.
.n
ca610605
jb
march
16,
1978
10:40
pm
.x
1237
5
320
250
5
320
320
5
320
320
5
320
320
5
320
250
6
320
320
6
320
320
6
320
753
6
320
.i
321
.t
algol
60
confidential
.w
the
algol
60
report,*
when
first
encountered,
seems
to
describe
a
very
complex
language
which
will
be
difficult
to
learn.
the
"metalinguistic
formulae"
admirably
serve
the
purpose
of
precisely
specifying
a
language,
but
they
are
certainly
not
very
readable
for
a
beginner.
however,
experience
has
shown
that
once
the
report
is
explained
it
is
in
fact
easy
to
learn
algol
and
to
write
algorithms
in
it.
the
language
is
so
general
and
powerful
it
can
handle
an
enormous
class
of
problems.
it
is
not
hard
to
learn
those
parts
of
algol
present
in
other
compiler
languages:
how
to
write
assignment
and
go
to
and
for
statements,
etc.
indeed,
a
lot
of
the
unnecessary
restrictions
imposed
by
other
compiling
languages
have
finally
been
lifted.
but
algol
also
allows
many
unobvious
things
to
be
written,
as
we
will
see
later,
and
herein
lies
a
problem:
algol
seems
to
have
become
too
general.
so
many
restrictions
have
been
lifted
that
a
lot
of
technical
details
crop
up
which
are
hard
to
learn
and
to
use
correctly.
in
this
paper
some
of
the
more
obscure
features
of
the
language
are
considered
and
their
usefulness
is
discussed.
remarks
are
based
on
the
authors'
interpretations
of
the
algol
60
report.
.b
cacm
june,
1961
.a
knuth,
d.
e.
merner,
j.
n.
.n
ca610604
jb
march
16,
1978
10:48
pm
.x
249
4
321
254
4
321
272
4
321
1102
4
321
1109
4
321
1140
4
321
1188
4
321
1234
4
321
1234
4
321
1306
4
321
1464
4
321
1491
4
321
1767
4
321
1781
4
321
1787
4
321
1949
4
321
321
4
321
321
4
321
321
4
321
321
4
321
2059
4
321
2126
4
321
435
4
321
437
4
321
463
4
321
483
4
321
491
4
321
2732
4
321
560
4
321
583
4
321
3073
4
321
627
4
321
631
4
321
632
4
321
642
4
321
644
4
321
653
4
321
680
4
321
761
4
321
762
4
321
763
4
321
123
4
321
140
4
321
919
4
321
989
4
321
196
5
321
1234
5
321
254
5
321
321
5
321
321
5
321
321
5
321
400
5
321
401
5
321
402
5
321
196
6
321
944
6
321
321
6
321
321
6
321
385
6
321
387
6
321
400
6
321
402
6
321
404
6
321
3184
6
321
729
6
321
.i
322
.t
operational
compatibility
of
systems-conventions
.w
the
general
standards
committee
of
the
share
organization
has
devoted
considerable
effort
to
the
problem
of
operating
a
computer
efficiently
in
view
of
the
growing
number
of
programming
systems
available.
each
of
these
programming
systems
has
been
coded
to
utilize
a
fixed
set
of
hardware
components
without
recognizing
the
fact
that
others
may
be
occupying
a
storage
medium
required
by
the
first.
these
incompatibilities
are
currently
resolved
by
manually
setting
up
the
computer
for
each
system
as
required.
the
following
set
of
conventions
is
being
considered
to
minimize
computer
set-up
time.
they
are
of
sufficiently
broad
interest
that
we
feel
other
computer
users
should
be
aware
of
them.
-george
f.
ryckman,
chairman
.b
cacm
june,
1961
.a
bright,
h.
s.
.n
ca610603
jb
march
16,
1978
10:55
pm
.x
322
5
322
322
5
322
322
5
322
.i
323
.t
the
state
of
digital
computer
technology
in
europe
.b
cacm
june,
1961
.a
blachman,
n.
m.
.n
ca610602
jb
march
16,
1978
10:56
pm
.x
323
4
323
689
4
323
1349
5
323
217
5
323
323
5
323
323
5
323
323
5
323
689
5
323
217
6
323
236
6
323
323
6
323
323
6
323
83
6
323
415
6
323
3197
6
323
.i
324
.t
romberg
integration
(algorithm
60)
.b
cacm
june,
1961
.a
bauer,
f.
l.
.n
ca610601
jb
march
16,
1978
10:57
pm
.x
1352
5
324
1982
5
324
324
5
324
324
5
324
324
5
324
2040
5
324
1
6
324
834
6
324
872
6
324
1040
6
324
1092
6
324
1241
6
324
1241
6
324
1273
6
324
1273
6
324
1273
6
324
1352
6
324
1356
6
324
1883
6
324
324
6
324
324
6
324
324
6
324
429
6
324
570
6
324
621
6
324
621
6
324
786
6
324
.i
325
.t
numerical
solution
of
the
polynomial
equation
(algorithm
30)
.b
cacm
may,
1961
.a
alexander,
w.
j.
.n
ca610509
jb
march
16,
1978
10:58
pm
.x
325
5
325
325
5
325
325
5
325
.i
326
.t
mathsort
(algorithm
23)
.b
cacm
may,
1961
.a
ranshaw,
r.
w.
.n
ca610508
jb
march
16,
1978
10:59
pm
.x
326
5
326
326
5
326
326
5
326
.i
327
.t
zeros
of
a
real
polynomial
by
resultant
procedure
(algorithm
59)
.b
cacm
may,
1961
.a
bareiss,
e.
h.
fisherkeller,
m.
a.
.n
ca610507
jb
march
16,
1978
11:01
pm
.x
1667
5
327
327
5
327
327
5
327
327
5
327
178
6
327
1242
6
327
327
6
327
.i
328
.t
matrix
inversion
(algorithm
58)
.b
cacm
may,
1961
.a
cohen,
d.
.n
ca610506
jb
march
16,
1978
11:03
pm
.x
328
5
328
328
5
328
328
5
328
.i
329
.t
automatic
abstracting
and
indexing
survey
and
recommendations
.w
in
preparation
for
the
widespread
use
of
automatic
scanners
which
will
read
documents
and
transmit
their
contents
to
other
machines
for
analysis,
this
report
presents
a
new
concept
in
automatic
analysis:
the
relative-frequency
approach
to
measuring
the
significance
of
words,
word
groups,
and
sentences.
the
relative-frequency
approach
is
discussed
in
detail,
as
is
its
application
to
problems
of
automatic
indexing
and
automatic
abstracting.
included
in
the
report
is
a
summary
of
automatic
analysis
studies
published
as
of
the
date
of
writing.
conclusions
are
that
point
toward
more
sophisticated
mathematical
and
linguistic
techniques
for
the
solution
of
problems
of
automatic
analysis.
.b
cacm
may,
1961
.a
edmundson,
h.
p.
wyllys,
r.
e.
.n
ca610505
jb
march
16,
1978
11:08
pm
.x
1087
5
329
329
5
329
329
5
329
329
5
329
634
5
329
329
6
329
329
6
329
.i
330
.t
a
method
for
evaluating
the
area
of
the
normal
function
.b
cacm
may,
1961
.a
baker,
f.
b.
.n
ca610504
jb
march
16,
1978
11:09
pm
.x
330
5
330
330
5
330
330
5
330
.i
331
.t
successive
approximations
and
computer
storage
problems
in
ordinary
differential
equations
.b
cacm
may,
1961
.a
bellman,
r.
.n
ca610503
jb
march
16,
1978
11:10
pm
.x
331
5
331
331
5
331
331
5
331
.i
332
.t
an
indirect
chaining
method
for
addressing
on
secondary
keys
.w
methods
for
entering
random
access
files
on
the
basis
of
one
key
are
briefly
surveyed.
the
widely
used
chaining
method,
based
on
a
pseudo-random
key
transformation,
is
reviewed
in
more
detail.
an
efficient
generalization
of
the
chaining
method
which
permits
recovery
on
additional
keys
is
then
presented.
.b
cacm
may,
1961
.a
johnson,
l.
r.
.n
ca610502
jb
march
16,
1978
11:13
pm
.x
911
5
332
1271
5
332
1785
5
332
332
5
332
332
5
332
332
5
332
2543
5
332
2552
5
332
911
6
332
911
6
332
1785
6
332
1785
6
332
1786
6
332
1973
6
332
332
6
332
332
6
332
332
6
332
332
6
332
332
6
332
2107
6
332
2109
6
332
2203
6
332
492
6
332
492
6
332
.i
333
.t
design
of
an
improved*
transmission/data
processing
code
.b
cacm
may,
1961
.a
bemer,
r.
w.
smith
jr.,
h.
j.
williams
jr.,
f.
a.
.n
ca610501
jb
march
16,
1978
11:14
pm
.x
333
4
333
230
5
333
333
5
333
333
5
333
333
5
333
.i
334
.t
division
and
square
root
in
the
quater-imaginary
number
system
.b
cacm
april,
1961
.a
nadler,
m.
.n
ca610334
jb
march
16,
1978
11:16
pm
.x
334
5
334
334
5
334
334
5
334
.i
335
.t
some
numerical
experiments
using
newton's
method
for
nonlinear
parabolic
and
ellipticboundary-value
problems
.w
using
a
generalization
of
newton's
method,
a
nonlinear
parabolic
equation
of
the
form
u(t)-u(xx)=g(u)
and
a
nonlinear
elliptic
equation
u(xx)+u(yy)=exp(u)
are
solved
numerically
comparison
of
these
results
with
results
obtained
using
the
picard
iteration
procedure
show
that
in
many
cases
the
quisi
linearization
method
offers
substantial
advantages
in
both
time
and
accuracy.
.b
cacm
april,
1961
.a
bellman,
r.
juncosa,
m.
l.
kalaba,
r.
.n
ca610433
jb
march
16,
1978
11:20
pm
.x
335
5
335
335
5
335
335
5
335
.i
336
.t
a
practical
technique
for
the
determination
of
the
optimum
relaxation
factor
of
the
successive
over-relaxation
method
.b
cacm
april,
1961
.a
kulsrud,
h.
e.
.n
ca610432
jb
march
16,
1978
11:27
pm
.x
336
5
336
336
5
336
336
5
336
.i
337
.t
further
survey
of
punched
card
codes
.b
cacm
april,
1961
.a
ross,
h.
m.
.n
ca610431
jb
march
16,
1978
11:34
pm
.x
337
5
337
337
5
337
337
5
337
.i
338
.t
grout
ii
(algorithm
43)
.b
cacm
april,
1961
.a
thacher
jr.,
h.c.
.n
ca610430
jb
march
16,
1978
11:35
pm
.x
338
5
338
338
5
338
338
5
338
.i
339
.t
real
exponential
integral
(algorithm
20)
.b
cacm
april,
1961
.a
alexander,
w.
j.
thacher
jr.,
h.
c.
.n
ca610429
jb
march
16,
1978
11:36
pm
.x
339
5
339
339
5
339
339
5
339
.i
340
.t
legendre
polynomial
(algorithm
13)
.b
cacm
april,
1961
.a
herndon,
j.
.n
ca610428
jb
march
16,
1978
11:37
pm
.x
1611
5
340
340
5
340
340
5
340
340
5
340
1295
6
340
340
6
340
.i
341
.t
chebyschev
polynomial
(algorithm
10)
.b
cacm
april,
1961
.a
herndon,
j.
.n
ca610427
jb
march
16,
1978
11:38
pm
.x
341
5
341
341
5
341
341
5
341
.i
342
.t
solution
of
polynomial
equation
by
barstow-hitchcock
(algorithm
3)
.b
cacm
april,
1961
.a
herndon,
j.
.n
ca610426
jb
march
16,
1978
11:39
pm
.x
342
5
342
342
5
342
342
5
342
.i
343
.t
on
frequently
occurring
errors
in
algol
60
programs
(algorithm
25)
.b
cacm
april,
1961
.a
herndon,
j.
.n
ca610425
jb
march
16,
1978
11:40
pm
.x
343
5
343
343
5
343
343
5
343
.i
344
.t
ber
or
bei
function
(algorithm
57)
.b
cacm
april,
1961
.a
herndon,
j.
r.
.n
ca610424
jb
march
16,
1978
11:42
pm
.x
344
5
344
344
5
344
344
5
344
.i
345
.t
complete
elliptic
integral
of
the
second
kind
(algorithm
56)
.b
cacm
april,
1961
.a
herndon,
j.
r.
.n
ca610423
jb
march
16,
197811:43
pm
.x
345
5
345
345
5
345
345
5
345
.i
346
.t
complete
elliptic
integral
of
the
first
kind
(algorithm
55)
.b
cacm
april,
1961
.a
herndon,
j.
r.
.n
ca610422
jb
march
16,
1978
11:44
pm
.x
346
5
346
346
5
346
346
5
346
.i
347
.t
gamma
function
for
range
1
to
2
(algorithm
54)
.b
cacm
april,
1961
.a
herndon,
j.
r.
.n
ca610421
jb
march
16,
1978
11:45
pm
.x
347
5
347
347
5
347
347
5
347
.i
348
.t
nth
roots
of
a
complex
number
(algorithm
53)
.b
cacm
april,
1961
.a
herndon,
j.
r.
.n
ca610420
jb
march
16,
1978
11:47
pm
.x
348
5
348
348
5
348
348
5
348
.i
349
.t
a
set
of
test
matrices
.b
cacm
april,
1961
.a
herndon,
j.
r.
.n
ca610419
jb
march
16,
1978
11:47
pm
.x
349
5
349
349
5
349
349
5
349
.i
350
.t
adjust
inverse
of
a
matrix
when
an
element
is
perturbed
(algorithm
51)
.b
cacm
april,
1961
.a
herndon,
j.
r.
.n
ca610418
jb
march
16,
1978
11:49
pm
.x
350
5
350
350
5
350
350
5
350
.i
351
.t
inverse
of
a
finite
segment
of
the
hilbert
matrix
(algorithm
50)
.b
cacm
april,
1961
.a
herndon,
j.
r.
.n
ca610417
jb
march
16,
1978
11:50
pm
.x
351
5
351
351
5
351
351
5
351
.i
352
.t
spherical
neumant
function
(algorithm
49)
.b
cacm
april,
1961
.a
herndon,
j.
r.
.n
ca610416
jb
march
16,
1978
11:51
pm
.x
352
5
352
352
5
352
352
5
352
.i
353
.t
logarithm
of
a
complex
number
(algorithm
48)
.b
cacm
april,
1961
.a
herndon,
j.
r.
.n
ca610415
jb
march
16,
1978
11:53
pm
.x
353
5
353
353
5
353
353
5
353
.i
354
.t
associated
legendre
functions
of
the
first
kind
for
real
or
imaginary
arguments
(algorithm
47)
.b
cacm
april,
1961
.a
herndon,
j.
r.
.n
ca610414
jb
march
16,
1978
11:57
pm
.x
354
5
354
354
5
354
354
5
354
.i
355
.t
exponential
of
a
complex
number
(algorithm
46)
.b
cacm
april,
1961
.a
herndon,
j.
r.
.n
ca610413
jb
march
16,
1978
11:59
pm
.x
355
5
355
355
5
355
355
5
355
.i
356
.t
interest
(algorithm
45)
.b
cacm
april,
1961
.a
ingerman,
p.
z.
.n
ca610412
jb
march
17,
1978
12:00
am
.x
356
5
356
356
5
356
356
5
356
.i
357
.t
bessel
functions
computed
recursively
(algorithm
44)
.b
cacm
april,
1961
.a
wojcicki,
m.
e.
.n
ca610411
jb
march
17,
1978
12:01
am
.x
357
5
357
357
5
357
357
5
357
.i
358
.t
crout
with
pivoting
ii
(algorithm
43)
.b
cacm
april,
1961
.a
thacher
jr.,
h.
c.
.n
ca610410
jb
march
17,
1978
12:02
am
.x
358
5
358
358
5
358
358
5
358
.i
359
.t
invert
(algorithm
42)
.b
cacm
april,
1961
.a
wood,
t.
c.
.n
ca610409
jb
march
17,
1978
12:03
am
.x
359
5
359
359
5
359
359
5
359
.i
360
.t
evaluation
of
determinant
(algorithm
41)
.b
cacm
april,
1961
.a
solomon,
j.
g.
.n
ca610408
jb
march
17,
1978
12:04
am
.x
1946
5
360
360
5
360
360
5
360
360
5
360
878
6
360
902
6
360
1093
6
360
1177
6
360
1387
6
360
1393
6
360
360
6
360
731
6
360
.i
361
.t
programmed
error
correction
on
a
decimal
computer
.b
cacm
april,
1961
.a
weinberg,
g.
m.
.n
ca610407
jb
march
17,
1978
12:05
am
.x
361
4
361
108
5
361
361
5
361
361
5
361
361
5
361
.i
362
.t
table
look-at
techniques
.b
cacm
april,
1961
.a
sherman,
p.
m.
.n
ca610406
jb
march
17,
1978
12:08
am
.x
362
4
362
2952
4
362
142
5
362
362
5
362
362
5
362
362
5
362
.i
363
.t
on
approximating
transcendental
numbers
by
continued
fractions
.b
cacm
april,
1961
.a
karst,
e.
.n
ca610405
jb
march
17,
1978
12:09
am
.x
363
5
363
363
5
363
363
5
363
.i
364
.t
on
the
compilation
of
subscripted
variables
.b
cacm
april,
1961
.a
nather,
r.
e.
.n
ca610404
jb
march
17,
1978
12:10
am
.x
222
4
364
224
4
364
267
4
364
1134
4
364
1139
4
364
1141
4
364
1141
4
364
1215
4
364
1223
4
364
1647
4
364
1781
4
364
1787
4
364
1792
4
364
364
4
364
364
4
364
364
4
364
364
4
364
364
4
364
405
4
364
405
4
364
438
4
364
438
4
364
561
4
364
44
4
364
763
4
364
100
5
364
224
5
364
364
5
364
364
5
364
364
5
364
44
5
364
77
5
364
98
5
364
.i
365
.t
bessel
functions
of
integral
order
and
complex
argument
.b
cacm
april,
1961
.a
gray,
m.
c.
.n
ca610403
jb
march
17,
1978
12:13
am
.x
365
5
365
365
5
365
365
5
365
.i
366
.t
eigenvalues
of
a
symmetric
3
x
3
matrix
.b
cacm
april,
1961
.a
smith,
o.
k.
.n
ca610402
jb
march
17,
1978
12:14
am
.x
366
5
366
366
5
366
366
5
366
.i
367
.t
topological
ordering
of
a
list
of
randomly-numbered
elements
of
a
network
.w
a
network
of
directed
line
segments
free
of
circular
elements
is
assumed.
the
lines
are
identified
by
their
terminal
nodes
and
the
nodes
are
assumed
to
be
numbered
by
a
non-topological
system.
given
a
list
of
these
lines
in
numeric
order,
a
simple
technique
can
be
used
to
create
at
high
speed
a
list
in
topological
order.
.b
cacm
april,
1961
.a
lasser,
d.
j.
.n
ca610401
jb
march
17,
1978
12:17
am
.x
1050
5
367
1226
5
367
367
5
367
367
5
367
367
5
367
441
5
367
758
5
367
849
6
367
106
6
367
209
6
367
367
6
367
367
6
367
367
6
367
367
6
367
441
6
367
627
6
367
.i
368
.t
real
zeros
of
an
arbitrary
function
(algorithm
25)
.b
cacm
march,
1961
.a
collinge,
r.
m.
.n
ca610314
jb
march
17,
1978
12:31
am
.x
368
5
368
368
5
368
368
5
368
.i
369
.t
crout
with
pivoting
(algorithm
16)
.b
cacm
march,
1961
.a
thacher
jr.,
h.
c.
.n
ca610313
jb
march
17,
1978
12:32
am
.x
369
5
369
369
5
369
369
5
369
.i
370
.t
bisection
routine
(algorithm
4)
.b
cacm
march,
1961
.a
rader,
p.
j.
.n
ca610312
jb
march
17,
1978
12:33
am
.x
370
5
370
370
5
370
370
5
370
.i
371
.t
remarks
on
algorithms
2
and
3,
algorithm
15
and
algorithms
25
and
26
.b
cacm
march,
1961
.a
wilkinson,
j.
h.
.n
ca610311
jb
march
17,
1978
12:35
am
.x
371
5
371
371
5
371
371
5
371
.i
372
.t
critical
path
scheduling
(algorithm
40)
.b
cacm
march,
1961
.a
leavenworth,
b.
.n
ca610310
jb
march
17,
1978
12:36
am
.x
372
5
372
372
5
372
372
5
372
.i
373
.t
correlation
coefficients
with
matrix
multiplication
(algorithm
39)
.b
cacm
march,
1961
.a
sassouni,
p.
.n
ca610309
jb
march
17,
1978
12:37
am
.x
373
5
373
373
5
373
373
5
373
.i
374
.t
telescope2
(algorithm
38)
.b
cacm
march,
1961
.a
brons,
k.
a.
.n
ca610308
jb
march
17,
1978
12:38
am
.x
374
5
374
374
5
374
374
5
374
.i
375
.t
telescope1
(algorithm
37)
.b
cacm
march,
1961
.a
brons,
k.
a.
.n
ca610307
jb
march
17,
1978
12:39
am
.x
375
5
375
375
5
375
375
5
375
.i
376
.t
tchebycheff
(algorithm
36)
.b
cacm
march,
1961
.a
gianni,
a.
j.
.n
ca610306
jb
march
17,
1978
12:40
am
.x
1754
5
376
376
5
376
376
5
376
376
5
376
274
6
376
376
6
376
.i
377
.t
sieve
(algorithm
35)
.b
cacm
march,
1961
.a
wood,
t.
c.
.n
ca610305
jb
march
17,
1978
12:41
am
.x
1841
5
377
377
5
377
377
5
377
377
5
377
2120
5
377
1537
6
377
1539
6
377
1539
6
377
1841
6
377
377
6
377
377
6
377
.i
378
.t
a
generalized
technique
for
symbol
manipulation
and
numerical
calculation
.b
cacm
march,
1961
.a
ross,
d.
t.
.n
ca610304
jb
march
17,
1978
12:42
am
.x
1024
4
378
1050
4
378
1051
4
378
1102
4
378
1102
4
378
1132
4
378
1390
4
378
1486
4
378
1549
4
378
1706
4
378
1826
4
378
1878
4
378
378
4
378
378
4
378
378
4
378
2060
4
378
2155
4
378
2168
4
378
2719
4
378
2723
4
378
2838
4
378
2842
4
378
2855
4
378
2879
4
378
3008
4
378
3077
4
378
3080
4
378
3106
4
378
627
4
378
731
4
378
798
4
378
106
4
378
1051
5
378
208
5
378
209
5
378
210
5
378
1552
5
378
1665
5
378
1860
5
378
378
5
378
378
5
378
378
5
378
2155
5
378
1184
6
378
1366
6
378
1389
6
378
1389
6
378
1421
6
378
1421
6
378
1496
6
378
1626
6
378
1641
6
378
1781
6
378
1785
6
378
1786
6
378
210
6
378
210
6
378
378
6
378
378
6
378
378
6
378
378
6
378
378
6
378
2046
6
378
2060
6
378
406
6
378
3184
6
378
631
6
378
731
6
378
793
6
378
794
6
378
799
6
378
.i
379
.t
bitwise
operations
.b
cacm
march,
1961
.a
strachey,
c.
.n
ca610303
jb
march
17,
1978
12:42
am
.x
379
5
379
379
5
379
379
5
379
.i
380
.t
comparison
of
iterative
methods
for
the
calculation
of
nth
roots
.w
three
iterative
methods
for
calculation
of
nth
roots
(including
one
proposed
by
the
author)
are
compared
in
two
ways:
(1)
theoretical
convergence
estimates
are
given.
(2)
a
new
macrocompiler
which
estimates
machine
running
time
is
used
to
compare
the
running
time
of
the
three
methods
for
a
variety
of
input
data.
.b
cacm
march,
1961
.a
traub,
j.
f.
.n
ca610302
jb
march
17,
1978
12:45
am
.x
319
5
380
380
5
380
380
5
380
380
5
380
380
6
380
.i
381
.t
an
alternate
form
of
the
"uncol
diagram"
.b
cacm
march,
1961
.a
bratman,
h.
.n
ca610301
jb
march
17,
1978
12:46
am
.x
1159
4
381
1988
4
381
381
4
381
1781
5
381
1988
5
381
381
5
381
381
5
381
381
5
381
14
5
381
123
6
381
196
6
381
919
6
381
990
6
381
1007
6
381
1046
6
381
1131
6
381
1139
6
381
1140
6
381
1149
6
381
1198
6
381
1215
6
381
1223
6
381
1265
6
381
1303
6
381
1323
6
381
1358
6
381
1366
6
381
1421
6
381
1460
6
381
1462
6
381
1463
6
381
1467
6
381
1468
6
381
1477
6
381
1491
6
381
1496
6
381
1496
6
381
1531
6
381
1535
6
381
1565
6
381
1601
6
381
1602
6
381
1613
6
381
1614
6
381
1626
6
381
1641
6
381
1787
6
381
1788
6
381
205
6
381
224
6
381
249
6
381
288
6
381
316
6
381
381
6
381
381
6
381
398
6
381
11
6
381
11
6
381
14
6
381
404
6
381
410
6
381
463
6
381
464
6
381
483
6
381
3184
6
381
3188
6
381
584
6
381
600
6
381
680
6
381
691
6
381
763
6
381
799
6
381
.i
382
.t
statistical
programs
at
the
university
of
north
carolina
.b
cacm
february,
1961
.a
bush,
n.
.n
ca610216
jb
march
17,
1978
12:48
am
.x
382
5
382
382
5
382
382
5
382
.i
383
.t
on
finding
minimum
routes
in
a
network
with
turn
penalties
.b
cacm
february,
1961
.a
caldwell,
t.
.n
ca610215
jb
march
17,
1978
12:49
am
.x
383
5
383
383
5
383
383
5
383
.i
384
.t
gamma
function
(algorithm
34)
.b
cacm
february,
1961
.a
lipp,
m.
f.
.n
ca610214
jb
march
17,
1978
12:49
am
.x
384
5
384
384
5
384
384
5
384
.i
385
.t
factorial
(algorithm
33)
.b
cacm
february,
1961
.a
lipp,
m.
f.
.n
ca610213
jb
march
17,
1978
12:50
am
.x
1234
5
385
385
5
385
385
5
385
385
5
385
944
6
385
321
6
385
385
6
385
400
6
385
402
6
385
404
6
385
3184
6
385
729
6
385
.i
386
.t
multint
(algorithm
32)
.b
cacm
february,
1961
.a
freeman
jr.,
r.
d.
.n
ca610212
jb
march
17,
1978
12:52
am
.x
1146
5
386
386
5
386
386
5
386
386
5
386
386
6
386
.i
387
.t
gamma
function
(algorithm
31)
.b
cacm
february,
1961
.a
collinge,r.
m.
.n
ca610211
jb
march
17,
1978
12:53
am
.x
254
5
387
387
5
387
387
5
387
387
5
387
196
6
387
321
6
387
387
6
387
.i
388
.t
solution
of
polynomial
equations
by
bairstow
hitchcock
method
(algorithm
3)
.b
cacm
february,
1961
.a
vandergraft,
j.
s.
.n
ca610210
jb
march
17,
1978
12:54
am
.x
388
5
388
388
5
388
388
5
388
.i
389
.t
real
exponential
integral
(algorithm
20)
.b
cacm
february,
1961
.a
peavy,
s.
.n
ca610209
jb
march
17,
1978
12:55
am
.x
389
5
389
389
5
389
389
5
389
.i
390
.t
complex
exponential
integral
(algorithm
13)
.b
cacm
february,
1961
.a
rader,
p.
j.
thacher
jr.,
h.
c.
.n
ca610208
jb
march
17,
1978
12:56
am
.x
390
5
390
390
5
390
390
5
390
.i
391
.t
the
bks
system
for
the
philco-2000
.b
cacm
february,
1961
.a
smith,
r.
b.
.n
ca610207
jb
march
17,
1978
12:57
am
.x
391
5
391
391
5
391
391
5
391
.i
392
.t
comment
on
a
paper
on
parallel
processing
.b
cacm
february,
1961
.a
nekora,
m.
r.
.n
ca610206
jb
march
17,
1978
12:58
am
.x
392
5
392
392
5
392
392
5
392
.i
393
.t
two
subroutines
for
symbol
manipulation
with
an
algebraic
compiler
.b
cacm
february,
1961
.a
carr
iii,
j.
w.
hanson,
j.
w.
.n
ca610205
jb
march
17,
1978
12:59
am
.x
393
5
393
393
5
393
393
5
393
561
5
393
393
6
393
77
6
393
.i
394
.t
multiple
programming
data
processing
.b
cacm
february,
1961
.a
ryle,
b.
l.
.n
ca610204
jb
march
17,
1978
1:00
am
.x
394
5
394
394
5
394
394
5
394
.i
395
.t
multiple-precision
division
.b
cacm
february,
1961
.a
rabinowitz,
p.
.n
ca610202
jb
march
17,
1978
1:01
am
.x
395
5
395
395
5
395
395
5
395
.i
396
.t
automation
of
program
debugging
.w
automatic
debugging
can
substantially
reduce
lead-time
between
the
coding
and
the
effective
use
of
a
complex
program.
it
also
enforces
analysis
of
debugging
criteria,
resulting
in
verifiably
accurate
programs.
the
programmer
specifies
the
program
to
be
debugged,
memory
areas,
set
of
input
data,
maximum
repetition
of
loops,
and
checkpoint
information
for
each
set
of
data.
the
executive
debugging
program
the
runs
the
program
to
be
debugged,
performing
checking
functions
and
creating
a
trace
record
of
its
own
later
analysis
and
location
of
errors.
applications
are
quite
flexible,
and
the
system
can
be
used
alone
or
in
conjunction
with
other
debugging
techniques.
.b
cacm
july,
1961
.a
jacoby,
k.
layton,
h.
.n
ca610714
es
march
17,
1982
10:10
am
.x
931
5
396
396
5
396
396
5
396
396
5
396
202
6
396
396
6
396
634
6
396
.i
397
.t
a
card
format
for
reference
files
in
information
processing
.w
this
paper
proposes
a
card
format
suitable
for
a
variety
of
reference
files
in
information
processing.
an
80-column
ibm
card
is
divided
into
two
fields-reference
material
field
(columns
1-67)
and
identification
field
(columns
68-80).
the
format
for
the
reference
material
is
flexible,
while
the
format
for
the
identification
is
rigid.
the
reference
material
includes
basically
an
index,
title,
source,
class,
summary
and
cross
reference
for
each
entry.
the
identification
includes
basically
codes
for
a
matrix
of
descriptors,
an
entry
number,
and
the
kind,
major
interest,
and
source
of
the
reference.
the
identification
also
provides
a
choice
to
identify
material
for
personal
as
well
as
general
files.
since
this
card
format
is
sufficient
to
identify
the
material
normally
associated
with
reference
files
for
books,
articles,
programming
terms,
hardware
terms,
equipment,
machine
systems,
abbreviations,
etc.,
it
is
suitable
as
a
standard
for
card
reference
files
in
information
processing.
.b
cacm
february,
1961
.a
grems,
m.
.n
ca610201
jb
march
17,
1978
1:08
am
.x
929
5
397
397
5
397
397
5
397
397
5
397
397
6
397
.i
398
.t
the
slang
system
.b
cacm
january,
1961
.a
sibley,
r.
a.
.n
ca610116
jb
march
17,
1978
1:10
am
.x
205
4
398
210
4
398
214
4
398
1982
4
398
398
4
398
642
4
398
669
4
398
100
4
398
123
4
398
164
4
398
1
5
398
1781
5
398
398
5
398
398
5
398
398
5
398
123
6
398
196
6
398
919
6
398
990
6
398
1007
6
398
1046
6
398
1131
6
398
1139
6
398
1140
6
398
1149
6
398
1198
6
398
1215
6
398
1223
6
398
1265
6
398
1303
6
398
1323
6
398
1358
6
398
1366
6
398
1421
6
398
1460
6
398
1462
6
398
1463
6
398
1467
6
398
1468
6
398
1477
6
398
1491
6
398
1496
6
398
1531
6
398
1535
6
398
1565
6
398
1601
6
398
1602
6
398
1613
6
398
1614
6
398
1626
6
398
1641
6
398
1787
6
398
1788
6
398
205
6
398
224
6
398
249
6
398
288
6
398
316
6
398
381
6
398
398
6
398
11
6
398
404
6
398
410
6
398
463
6
398
464
6
398
483
6
398
3184
6
398
3188
6
398
584
6
398
600
6
398
680
6
398
691
6
398
763
6
398
799
6
398
.i
399
.t
compiling
techniques
for
boolean
expressions
and
conditional
statements
in
algol
60
.b
cacm
january,
1961
.a
huskey,
h.
d.
wattenburg,
w.
h.
.n
ca610115
jb
march
17,
1978
1:12
am
.x
1139
5
399
1947
5
399
399
5
399
399
5
399
399
5
399
556
5
399
799
5
399
945
6
399
1134
6
399
1223
6
399
1248
6
399
224
6
399
399
6
399
399
6
399
399
6
399
399
6
399
82
6
399
404
6
399
404
6
399
438
6
399
464
6
399
631
6
399
.i
400
.t
comments
on
the
implementation
of
recursive
procedures
and
blocks
in
algol
60
.b
cacm
january,
1961
.a
irons,
e.
t.
feurzeig,
w.
.n
ca610114
jb
march
17,
1978
1:13
am
.x
1234
5
400
321
5
400
400
5
400
400
5
400
400
5
400
196
6
400
944
6
400
321
6
400
385
6
400
400
6
400
400
6
400
401
6
400
402
6
400
402
6
400
404
6
400
3184
6
400
729
6
400
.i
401
.t
allocation
of
storage
for
arrays
in
algol
60
.b
cacm
january,
1961
.a
sattley,
k.
.n
ca610113
jb
march
17,
1978
1:14
am
.x
321
5
401
401
5
401
401
5
401
401
5
401
196
6
401
400
6
401
401
6
401
402
6
401
.i
402
.t
dynamic
declarations
.b
cacm
january,
1961
.a
ingerman,
p.
z.
.n
ca610112
jb
march
17,
1978
1:14
am
.x
1234
5
402
321
5
402
402
5
402
402
5
402
402
5
402
196
6
402
944
6
402
321
6
402
385
6
402
400
6
402
400
6
402
401
6
402
402
6
402
402
6
402
404
6
402
3184
6
402
729
6
402
.i
403
.t
thunks
--
a
way
of
compiling
procedure
statements
with
some
comments
on
procedure
declarations
.b
cacm
january,
1961
.a
ingerman,
p.
z.
.n
ca610111
jb
march
17,
1978
1:16
am
.x
403
5
403
403
5
403
403
5
403
.i
404
.t
a
syntax
directed
compiler
for
algol
60
.b
cacm
january,
1961
.a
irons,
e.
t.
.n
ca610110
jb
march
17,
1978
1:16
am
.x
945
5
404
1046
5
404
1105
5
404
1139
5
404
1140
5
404
1234
5
404
1263
5
404
1265
5
404
1496
5
404
1781
5
404
1824
5
404
2126
5
404
2546
5
404
404
5
404
404
5
404
404
5
404
464
5
404
584
5
404
631
5
404
653
5
404
680
5
404
763
5
404
795
5
404
799
5
404
823
6
404
123
6
404
196
6
404
196
6
404
196
6
404
196
6
404
196
6
404
196
6
404
196
6
404
919
6
404
931
6
404
944
6
404
945
6
404
989
6
404
990
6
404
1007
6
404
1046
6
404
1131
6
404
1137
6
404
1139
6
404
1140
6
404
1141
6
404
1149
6
404
1198
6
404
1215
6
404
1223
6
404
1265
6
404
1303
6
404
1323
6
404
1358
6
404
1358
6
404
1366
6
404
1421
6
404
1460
6
404
1462
6
404
1463
6
404
1467
6
404
1468
6
404
1477
6
404
1477
6
404
1491
6
404
1491
6
404
1496
6
404
1531
6
404
1535
6
404
1565
6
404
1601
6
404
1602
6
404
1613
6
404
1614
6
404
1614
6
404
1614
6
404
1626
6
404
1641
6
404
1693
6
404
1781
6
404
1787
6
404
1788
6
404
205
6
404
224
6
404
224
6
404
224
6
404
249
6
404
265
6
404
288
6
404
316
6
404
321
6
404
381
6
404
385
6
404
398
6
404
399
6
404
399
6
404
11
6
404
2126
6
404
82
6
404
400
6
404
402
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
410
6
404
412
6
404
438
6
404
463
6
404
464
6
404
464
6
404
464
6
404
483
6
404
3184
6
404
3184
6
404
3184
6
404
3184
6
404
3184
6
404
3188
6
404
584
6
404
600
6
404
631
6
404
631
6
404
631
6
404
635
6
404
680
6
404
691
6
404
729
6
404
763
6
404
799
6
404
.i
405
.t
an
algorithm
for
coding
efficient
arithmetic
operations
.w
most
existing
formula
translation
schemes
yield
inefficient
coding.
a
method
is
described
which
reduces
the
number
of
store
and
fetch
operations,
evaluates
constant
subexpressions
during
compilation,
and
recognizes
many
equivalent
subexpressions.
.b
cacm
january,
1961
.a
floyd,
r.
w.
.n
ca610109
jb
march
17,
1978
1:19
am
.x
267
4
405
1134
4
405
1139
4
405
1141
4
405
1141
4
405
1215
4
405
1223
4
405
1647
4
405
1781
4
405
1787
4
405
1792
4
405
364
4
405
364
4
405
405
4
405
405
4
405
405
4
405
405
4
405
438
4
405
438
4
405
561
4
405
44
4
405
54
4
405
763
4
405
1223
5
405
224
5
405
1388
5
405
405
5
405
405
5
405
405
5
405
436
5
405
55
5
405
77
5
405
93
5
405
224
6
405
405
6
405
405
6
405
405
6
405
731
6
405
.i
406
.t
the
use
of
threaded
lists
in
constructing
a
combined
algol
and
machine-like
assembly
processor
.b
cacm
january,
1961
.a
evans
jr.,
a.
perlis,
a.
j.
van
zoeren,
h.
.n
ca610108
jb
march
17,
1978
1:20
am
.x
1051
5
406
1102
5
406
1549
5
406
406
5
406
406
5
406
406
5
406
106
6
406
196
6
406
1051
6
406
209
6
406
210
6
406
210
6
406
210
6
406
378
6
406
406
6
406
406
6
406
406
6
406
483
6
406
627
6
406
731
6
406
731
6
406
753
6
406
793
6
406
794
6
406
.i
407
.t
madcap:
a
scientific
compiler
for
a
displayed
formula
textbook
language
.b
cacm
january,
1961
.a
wells,
m.
b.
.n
ca610107
jb
march
17,
1978
1:21
am
.x
1083
5
407
1396
5
407
407
5
407
407
5
407
407
5
407
679
5
407
964
6
407
1028
6
407
1029
6
407
1083
6
407
1132
6
407
1214
6
407
1278
6
407
1334
6
407
1365
6
407
1386
6
407
1387
6
407
1388
6
407
1392
6
407
1393
6
407
1394
6
407
1395
6
407
1396
6
407
1397
6
407
1496
6
407
284
6
407
21
6
407
407
6
407
407
6
407
407
6
407
3184
6
407
3192
6
407
3193
6
407
3199
6
407
3200
6
407
3201
6
407
3202
6
407
3203
6
407
3204
6
407
561
6
407
730
6
407
730
6
407
.i
408
.t
the
internal
organization
of
the
mad
translator
.b
cacm
january,
1961
.a
arden,
b.
w.
galler,
b.
a.
graham,
r.
m.
.n
ca610106
jb
march
17,
1978
1:22
am
.x
1134
5
408
1179
5
408
1861
5
408
408
5
408
408
5
408
408
5
408
830
6
408
1614
6
408
1781
6
408
17
6
408
77
6
408
408
6
408
408
6
408
408
6
408
.i
409
.t
cl-1,
an
environment
for
a
compiler
.w
a
flexible,
large-scale
programming
system
to
facilitate
the
solution
of
information
processing
problems
and
to
provide
intercommunication
between
programs
and/or
programmers
has
been
developed
and
realized
on
the
ibm
709/7090
computer.
the
system
is
based
on
a
master
file
concept
and
has
provisions
for
accepting,
storing,
and
retrieving
both
descriptions
and
instances
of
large
and
complex
data
sets,
as
well
as
algorithms
defined
on
these
data
sets.
both
data
and
algorithms
may
be
expressed
in
a
family
of
command
and
descriptive
languages.
the
concept
of
distinct
data
descriptions
and
the
content
and
use
of
such
descriptions
are
discussed
in
some
detail.
.b
cacm
january,
1961
.a
cheatham
jr.,
t.
e.
collins
jr.,
g.
o.
leonard,
g.
f.
.n
ca610105
jb
march
17,
1978
1:26
am
.x
409
5
409
409
5
409
409
5
409
657
5
409
279
6
409
409
6
409
.i
410
.t
the
clip
translator
.b
cacm
january,
1961
.a
englund,
d.
clark,
e.
.n
ca610104
jb
march
17,
1978
1:27
am
.x
1781
5
410
410
5
410
410
5
410
410
5
410
669
5
410
1
6
410
123
6
410
196
6
410
919
6
410
990
6
410
1007
6
410
1046
6
410
1131
6
410
1139
6
410
1140
6
410
1149
6
410
1198
6
410
1215
6
410
1223
6
410
1265
6
410
1303
6
410
1323
6
410
1358
6
410
1366
6
410
1421
6
410
1460
6
410
1462
6
410
1463
6
410
1467
6
410
1468
6
410
1477
6
410
1491
6
410
1496
6
410
1531
6
410
1535
6
410
1565
6
410
1601
6
410
1602
6
410
1613
6
410
1614
6
410
1626
6
410
1641
6
410
1787
6
410
1788
6
410
205
6
410
224
6
410
249
6
410
288
6
410
316
6
410
381
6
410
398
6
410
11
6
410
404
6
410
410
6
410
410
6
410
463
6
410
464
6
410
483
6
410
3184
6
410
3184
6
410
3188
6
410
584
6
410
600
6
410
680
6
410
691
6
410
763
6
410
799
6
410
.i
411
.t
use
of
magnetic
tape
for
data
storage
in
the
oracle-algol
translator
.b
cacm
january,
1961
.a
bottenbruch,
h.
.n
ca610103
jb
march
17,
1978
1:28
am
.x
411
5
411
411
5
411
411
5
411
.i
412
.t
recursive
processes
and
algol
translation
.b
cacm
january,
1961
.a
gray,
a.
a.
.n
ca610102
jb
march
17,
1978
1:29
am
.x
412
5
412
412
5
412
412
5
412
763
5
412
196
6
412
224
6
412
404
6
412
412
6
412
631
6
412
.i
413
.t
a
basic
compiler
for
arithmetic
expressions
.b
cacm
january,
1961
.a
huskey,
h.
d.
wattenburg,
w.
h.
.n
ca610101
jb
march
17,
1978
1:30
am
.x
413
5
413
413
5
413
413
5
413
.i
414
.t
ibm
1440
data
processing
system
features
five
new
units
.w
the
ibm
1440
data
processing
system,
announced
recently
by
the
international
business
machines
corporation,
not
only
features
the
1311
disk
storage
drive
with
interchangeable
disk
packs
but
four
other
newly
developed
units.
.b
cacm
december,
1961
.a
wheeling,
r.
.n
ca621225
jb
march
17,1978
4:30
pm
.x
414
5
414
414
5
414
414
5
414
.i
415
.t
the
use
of
digital
computers
in
western
germany
.b
cacm
december,
1962
.a
schuff,
h.
k.
.n
ca621224
jb
march
17,
1978
4:32
pm
.x
1349
5
415
415
5
415
415
5
415
415
5
415
236
6
415
323
6
415
83
6
415
415
6
415
.i
416
.t
multiple
shooting
method
for
two-point
boundary
value
problems
.b
cacm
december,
1962
.a
morrison,
d.
d.
riley,
j.
d.
zancanaro,
j.
f.
.n
ca621223
jb
march
17,
1978
4:33
pm
.x
1049
5
416
416
5
416
416
5
416
416
5
416
416
6
416
.i
417
.t
legal
implications
of
computer
use
.w
this
paper
points
out
a
variety
of
ways
computer
systems
used
in
business
and
industry
can
be
involved
in
legal
entanglements
and
suggests
that
computer
specialists
have
a
responsibility
to
call
for
assistance
in
forestalling
or
minimizing
those
entanglements
during
the
planning
stage.
techniques
are
suggested
for
making
legal
clearance
effective
with
the
least
burden
on
the
new
technology
and
for
achieving
a
favorable
legal
climate
for
it
generally.
computer
specialists
also
are
alerted
to
potential
opportunities
to
interpret
to
lawyers
the
technical
aspects
of
computer
systems
involved
in
legal
situations.
.b
cacm
december,
1962
.a
freed,
r.
n.
.n
ca621222
jb
march
17,
1978
4:37
pm
.x
417
5
417
417
5
417
417
5
417
.i
418
.t
random
(algorithm
133)
.b
cacm
december,
1962
.a
behrenz,
p.
g.
.n
ca621221
jb
march
17,
1978
4:38
pm
.x
418
5
418
418
5
418
418
5
418
.i
419
.t
magic
square
(algorithm
118)
.b
cacm
december,
1962
.a
thacher
jr.,
h.
c.
.n
ca621220
jb
march
17,
1978
4:52
pm
.x
419
5
419
419
5
419
419
5
419
.i
420
.t
perm
(algorithm
115)
.b
cacm
december,
1962
.a
phillips,
e.
s.
.n
ca621219
jb
march
17,
1978
4:53
pm
.x
420
5
420
420
5
420
420
5
420
.i
421
.t
position
of
point
relative
to
polygon
(algorithm
112)
.b
cacm
december,
1962
.a
hacker,
r.
.n
ca621218
jb
march
17,
1978
4:54
pm
.x
1804
5
421
2987
5
421
421
5
421
421
5
421
421
5
421
1326
6
421
1630
6
421
2125
6
421
2547
6
421
2633
6
421
421
6
421
421
6
421
524
6
421
524
6
421
.i
422
.t
combination
(algorithm
94)
.b
cacm
december,
1962
.a
grench,
r.
e.
.n
ca621217
jb
march
17,
1978
4:56
pm
.x
422
5
422
422
5
422
422
5
422
.i
423
.t
matrix
inversion
(algorithm
58)
.b
cacm
december,
1962
.a
behrenz,
p.
g.
.n
ca621216
jb
march
17,
1978
4:57
pm
.x
423
5
423
423
5
423
423
5
423
.i
424
.t
gamma
function
(algorithm
31)
.b
cacm
december,
1962
.a
behrenz,
p.
g.
.n
ca621215
jb
march
17,
1978
4:58
pm
.x
424
5
424
424
5
424
424
5
424
.i
425
.t
complete
elliptic
integral
(algorithm
149)
.b
cacm
december,
1962
.a
merner,
j.
n.
.n
ca621214
jb
march
17,1978
4:59
pm
.x
425
5
425
425
5
425
425
5
425
.i
426
.t
term
of
magic
square
(algorithm
148)
.b
cacm
december,
1962
.a
collison,
d.
m.
.n
ca621213
jb
march
17,
1978
5:00
pm
.x
426
5
426
426
5
426
426
5
426
.i
427
.t
psif
(algorithm
147)
.b
cacm
december,
1962
.a
amit,
d.
.n
ca621212
jb
march
17,
1978
5:03
pm
.x
427
5
427
427
5
427
427
5
427
.i
428
.t
multiple
integration
(algorithm
146)
.b
cacm
december,
1962
.a
mckeeman,
w.
m.
.n
ca621211
jb
march
17,
1978
5:04
pm
.x
428
5
428
428
5
428
428
5
428
.i
429
.t
adaptive
nimerical
integration
by
simpson's
rule
(algorithm
145)
.b
cacm
december,
1962
.a
mckeeman,
w.
m.
.n
ca621210
jb
march
17,
1978
5:06
pm
.x
1352
5
429
2048
5
429
2074
5
429
2093
5
429
2550
5
429
429
5
429
429
5
429
429
5
429
834
6
429
834
6
429
834
6
429
834
6
429
872
6
429
872
6
429
872
6
429
1040
6
429
1092
6
429
1092
6
429
1241
6
429
1273
6
429
1298
6
429
1573
6
429
1573
6
429
324
6
429
2074
6
429
429
6
429
429
6
429
429
6
429
429
6
429
429
6
429
570
6
429
621
6
429
786
6
429
786
6
429
786
6
429
.i
430
.t
treesort2
(algorithm
144)
.b
cacm
december,
1962
.a
kaupe
jr.,a.
f.
.n
ca621209
jb
march
17,
1978
5:07
pm
.x
430
5
430
430
5
430
430
5
430
.i
431
.t
treesort1
(algorithm
143)
.b
cacm
december,
1962
.a
kaupe
jr.,
a.
f.
.n
ca621208
jb
march
17,
1978
5:08
pm
.x
431
5
431
431
5
431
431
5
431
.i
432
.t
triangular
regression
(algorithm
142)
.b
cacm
december,
1962
.a
hafley,
w.
l.
lewis,
j.
s.
.n
ca621207
jb
march
17,1978
5:09
pm
.x
432
5
432
432
5
432
432
5
432
.i
433
.t
fixed-world-length
arrays
in
variable-word-length
computers
.b
cacm
december,
1962
.a
sonquist,
j.
a.
.n
ca621206
jb
march
17,
1978
5:10
pm
.x
433
5
433
433
5
433
433
5
433
.i
434
.t
character
manipulation
in
1620
fortran
ii
.b
cacm
december,
1962
.a
poore
jr.,
j.
h.
.n
ca621205
jb
march
17,
1978
5:11
pm
.x
434
5
434
434
5
434
434
5
434
.i
435
.t
a
decision
matrix
as
the
basis
for
a
simple
data
input
routine
.w
currently
a
great
deal
of
time
and
effort
is
being
spent
on
the
development
of
bigger
and
better
compiler
languages,
multiprogram
executive
systems,
etc.
since
the
implementation
of
of
new
methods
and
procedures
is
not
instantaneous,
but
rather
occurs
by
an
evolutionary
process,
we
should
be
concerned
also
with
the
problem
of
maintaining,
improving
and
incorporating
new
ideas
into
existing
systems.
it
is
with
this
somewhat
neglected
area
that
the
author
is
interested.
a
method
employing
a
decision
matrix
is
presented
for
the
handling
of
a
standard
systems
programming
problem,that
of
providing
a
data
input
routine.
.b
cacm
december,
1962
.a
vasilakos,
g.
j.
.n
ca621204
jb
march
17,
1978
5:15
pm
.x
249
4
435
254
4
435
272
4
435
1102
4
435
1109
4
435
1140
4
435
1188
4
435
1306
4
435
1464
4
435
1491
4
435
1767
4
435
1781
4
435
1787
4
435
1949
4
435
321
4
435
2059
4
435
2126
4
435
435
4
435
435
4
435
437
4
435
463
4
435
483
4
435
491
4
435
2732
4
435
560
4
435
583
4
435
3073
4
435
627
4
435
631
4
435
632
4
435
642
4
435
644
4
435
653
4
435
680
4
435
761
4
435
762
4
435
763
4
435
849
4
435
123
4
435
140
4
435
919
4
435
989
4
435
196
5
435
1053
5
435
435
5
435
435
5
435
435
5
435
615
5
435
435
6
435
474
6
435
718
6
435
720
6
435
.i
436
.t
evaluation
of
polynomials
by
computer
.b
cacm
december,
1962
.a
knuth,
d.
e.
.n
ca621203
jb
march
17,
1978
5:16
pm
.x
1223
4
436
1388
4
436
436
4
436
1620
5
436
405
5
436
436
5
436
436
5
436
436
5
436
819
5
436
819
6
436
436
6
436
436
6
436
.i
437
.t
compiling
matrix
operations
.b
cacm
december,
1962
.a
galler,
b.
a.
perlis,
a.
j.
.n
ca621202
jb
march
17,
1978
5:17
pm
.x
249
4
437
254
4
437
272
4
437
1102
4
437
1109
4
437
1140
4
437
1188
4
437
1306
4
437
1464
4
437
1491
4
437
1767
4
437
1781
4
437
1787
4
437
1949
4
437
321
4
437
2059
4
437
2126
4
437
435
4
437
437
4
437
463
4
437
483
4
437
491
4
437
2732
4
437
560
4
437
583
4
437
3073
4
437
627
4
437
631
4
437
632
4
437
642
4
437
644
4
437
653
4
437
680
4
437
761
4
437
762
4
437
763
4
437
123
4
437
140
4
437
919
4
437
989
4
437
196
5
437
1614
5
437
2253
5
437
2557
5
437
437
5
437
437
5
437
437
5
437
2081
6
437
437
6
437
437
6
437
437
6
437
3184
6
437
.i
438
.t
mechanical
pragmatics:
a
time-motion
study
of
a
miniature
mechanical
linguistic
system
.b
cacm
december,
1962
.a
gorn,
s.
.n
ca621201
jb
march
17,
1978
5:19
pm
.x
249
4
438
267
4
438
1134
4
438
1139
4
438
1141
4
438
1141
4
438
1215
4
438
1223
4
438
1425
4
438
1647
4
438
1781
4
438
1781
4
438
1787
4
438
1792
4
438
364
4
438
364
4
438
405
4
438
405
4
438
438
4
438
438
4
438
438
4
438
438
4
438
561
4
438
44
4
438
3185
4
438
762
4
438
763
4
438
1139
5
438
224
5
438
249
5
438
303
5
438
438
5
438
438
5
438
438
5
438
77
5
438
3185
5
438
224
6
438
303
6
438
399
6
438
404
6
438
438
6
438
438
6
438
464
6
438
631
6
438
.i
439
.t
on-line
digital
computer
for
measurement
of
a
neurological
control
system
.b
cacm
november,
1962
.a
stark,
l.
payne,
r.
okabe,
y.
.n
ca621122
jb
march
17,
1978
5:20
pm
.x
439
5
439
439
5
439
439
5
439
.i
440
.t
record
linkage
.w
special
difficulties
are
encountered
in
devising
reliable
systems
for
searching
and
updating
any
large
files
of
documents
that
must
be
identified
primarily
on
the
basis
of
names
and
other
personal
particulars.
the
underlying
problem
is
that
of
making
nearly
maximum
use
of
items
of
identifying
information
that
are
individually
unreliable
but
that
may
collectively
be
of
considerable
discriminating
power.
rules
that
can
be
applied
generally
to
name
retrieval
systems
have
been
developed
in
a
methodological
study
of
the
linkage
of
vital
and
health
records
into
family
groupings
for
demographic
research
purposes.
these
rules
are
described,
and
the
ways
in
which
information
utilization
for
matching
may
be
optimized
are
discussed.
.b
cacm
november,
1962
.a
newcombe,
h.
b.
kennedy,
j.
m.
.n
ca621121
jb
march
17,
1978
5:51
pm
.x
1112
4
440
1592
4
440
2111
4
440
2339
4
440
440
4
440
2339
5
440
440
5
440
440
5
440
440
5
440
619
5
440
1112
6
440
1592
6
440
440
6
440
619
6
440
.i
441
.t
topological
sorting
of
large
networks
.w
topological
sorting
is
a
procedure
required
for
many
problems
involving
analysis
of
networks.
an
example
of
one
such
problem
is
pert.
the
present
paper
presents
a
very
general
method
for
obtaining
topological
order.
it
permits
treatment
of
larger
networks
than
can
be
handled
on
present
procedures
and
achieves
this
with
greater
efficiency.
although
the
procedure
can
be
adapted
to
any
machine,
it
is
discussed
in
terms
of
the
7090.
a
pert
network
of
30,000
activities
can
be
ordered
in
less
than
one
hour
of
machine
time.
the
method
was
developed
as
a
byproduct
of
procedures
needed
by
westinghouse,
baltimore.
it
has
not
been
programmed
and
at
present
there
are
no
plans
to
implement
it.
in
regard
to
the
techniques
described,
westinghouse's
present
and
anticipated
needs
are
completely
served
by
the
lockheed
program,
which
is
in
current
use.
.b
cacm
november,
1962
.a
kahn,
a.
b.
.n
ca621120
jb
march
17,
1978
5:58
pm
.x
1050
4
441
1226
4
441
441
4
441
758
4
441
1723
5
441
367
5
441
441
5
441
441
5
441
441
5
441
758
5
441
367
6
441
441
6
441
441
6
441
.i
442
.t
crout
with
equilibration
and
iteration
(algorithm
135)
.b
cacm
november,
1962
.a
mckeeman,
w.
m.
.n
ca621119
jb
march
17,
1978
5:59
pm
.x
442
5
442
442
5
442
442
5
442
.i
443
.t
complex
number
to
a
real
power
(algorithm
106)
.b
cacm
december,
1962
.a
erwin
jr.,g.
w.
.n
ca621118
jb
march
17,
1978
6:01
pm
.x
443
5
443
443
5
443
443
5
443
.i
444
.t
evaluation
of
jacobi
symbol
(algorithm
99)
.b
cacm
november,
1962
.a
may,
r.
w.
.n
ca621117
jb
march
17,
1978
6:02
pm
.x
444
5
444
444
5
444
444
5
444
.i
445
.t
combination
(algorithm
94)
.b
cacm
november,
1962
.a
may,
r.
w.
.n
ca621116
jb
march
17,
1978
6:03
pm
.x
445
5
445
445
5
445
445
5
445
.i
446
.t
simpson's
integration
(algorithm
84)
.b
cacm
november,
1962
.a
behrenz,
p.
g.
.n
ca621115
jb
march
17,
1978
6:04
pm
.x
446
5
446
446
5
446
446
5
446
.i
447
.t
certification
of
the
calculation
of
easter
.b
cacm
november,
1962
.a
williams,
m.
r.
.n
ca621114
jb
march
17,
1978
6:05
pm
.x
447
5
447
447
5
447
447
5
447
.i
448
.t
path
matrix
(algorithm
141)
.b
cacm
november,
1962
.a
ingerman,
p.
z.
.n
ca621113
jb
march
17,
1978
6:06
pm
.x
448
5
448
448
5
448
448
5
448
.i
449
.t
matrix
inversion(algorithm
140)
.b
cacm
november,
1962
.a
ingerman,
p.
z.
.n
ca621112
jb
march
17,
1978
6:12
pm
.x
449
5
449
449
5
449
449
5
449
.i
450
.t
solution
of
the
diophantine
equation
(algorithm
139)
.b
cacm
november,
1962
.a
peck,
j.
e.
l.
.n
ca621111
jb
march
17,
1978
6:13
pm
.x
2031
5
450
450
5
450
450
5
450
450
5
450
1022
6
450
450
6
450
.i
451
.t
nesting
of
for
statement
ii
(algorithm
138)
.b
cacm
november,
1962
.a
dahm,
d.
m.
wells,
m.
.n
ca621110
jb
march
17,
1978
6:14
pm
.x
451
5
451
451
5
451
451
5
451
.i
452
.t
nesting
of
for
statement
i
(algorithm
137)
.b
cacm
november,
1962
.a
dahm,
d.
m.
wells,
m.
.n
ca621109
jb
march
17,
1978
6:15
pm
.x
452
5
452
452
5
452
452
5
452
.i
453
.t
enlargement
of
a
group
(algorithm
136)
.b
cacm
november,
1962
.a
wells,
m.
.n
ca621108
jb
march
17,
1978
6:17
pm
.x
453
5
453
453
5
453
453
5
453
.i
454
.t
crout
with
equilibration
and
iteration
(algorithm
135)
.b
cacm
november,
1962
.a
mckeeman,
w.
m.
.n
ca621107
jb
march
17,
1978
6:51
pm
.x
1319
4
454
454
4
454
454
4
454
140
4
454
152
5
454
1177
5
454
454
5
454
454
5
454
454
5
454
586
5
454
806
5
454
932
6
454
454
6
454
454
6
454
.i
455
.t
exponentiation
of
series
(algorithm
134)
.b
cacm
november,
1962
.a
fettis,
h.
e.
.n
ca621106
jb
march
17,
1978
6:52
pm
.x
455
5
455
455
5
455
455
5
455
.i
456
.t
random
(algorithm
133)
.b
cacm
november,
1962
.a
behrenz,
p.
g.
.n
ca621105
jb
march
17,
1978
6:53
pm
.x
1190
5
456
456
5
456
456
5
456
456
5
456
456
6
456
.i
457
.t
quantum
mechanical
integrals
over
all
slater-type
integrals
.b
cacm
november,
1962
.a
browne,
j.
c.
.n
ca621104
jb
march
17,
1978
6:54
pm
.x
457
5
457
457
5
457
457
5
457
.i
458
.t
coefficient
determination
(algorithm
131)
.b
cacm
november,
1962
.a
smith,
v.
h.
allen,
m.
l.
.n
ca621103
jb
march
17,
1978
6:56
pm
.x
458
5
458
458
5
458
458
5
458
.i
459
.t
permute
(algorithm
130)
.b
cacm
november,
1962
.a
eaves,
lt.
b.
c.
.n
ca621102
jb
march
17,
1978
6:57
pm
.x
459
5
459
459
5
459
459
5
459
.i
460
.t
minifun
(algorithm
129)
.b
cacm
november,
1962
.a
whitley,
v.
w.
.n
ca621101
jb
march
17,
1978
6:58
pm
.x
460
5
460
460
5
460
460
5
460
.i
461
.t
coding
of
medical
case
history
data
for
computer
analysis
.b
cacm
october,
1962
.a
lipkin,
m.
woodbury,
m.
a.
.n
ca621019
jb
march
17,
1978
6:59
pm
.x
461
5
461
461
5
461
461
5
461
.i
462
.t
computer
pattern
recognition
techniques:
electrocardiographic
diagnosis
.w
the
use
of
programmed
digital
computers
as
general
pattern
classification
and
recognition
devices
is
one
phase
of
the
current
lively
interest
in
artificial
intelligence.
it
is
important
to
choose
a
class
of
signals
which
is,
at
present,
undergoing
a
good
deal
of
visual
inspection
by
trained
people
for
the
purpose
of
pattern
recognition.
in
this
way
comparisons
between
machine
and
human
performance
may
be
obtained.
a
practical
result
also
serves
as
additional
motivation.
clinical
electrocardiograms
make
up
such
a
class
of
signals.
the
approach
to
the
problem
presented
here
centers
upon
the
use
of
multiple
adaptive
matched
filters
that
classify
normalized
signals.
the
present
report
fives
some
of
the
background
for
the
application
of
this
method.
.b
cacm
october,
1962
.a
stark,l.
okajima,
m.
whipple,
g.
h.
.n
ca621018
jb
march
17,
1978
7:04
pm
.x
1325
5
462
462
5
462
462
5
462
462
5
462
462
6
462
.i
463
.t
on
ambiguity
in
phrase
structure
languages
.b
cacm
october,
1962
.a
floyd,
r.
w.
.n
ca621017
jb
march
17,
1978
7:05
pm
.x
249
4
463
254
4
463
272
4
463
1102
4
463
1109
4
463
1140
4
463
1188
4
463
1306
4
463
1464
4
463
1491
4
463
1767
4
463
1781
4
463
1787
4
463
1949
4
463
321
4
463
2059
4
463
2126
4
463
435
4
463
437
4
463
463
4
463
483
4
463
491
4
463
2732
4
463
560
4
463
583
4
463
3073
4
463
627
4
463
631
4
463
632
4
463
642
4
463
644
4
463
653
4
463
680
4
463
761
4
463
762
4
463
763
4
463
123
4
463
140
4
463
919
4
463
989
4
463
196
5
463
1306
5
463
1781
5
463
463
5
463
463
5
463
463
5
463
123
6
463
196
6
463
196
6
463
919
6
463
990
6
463
1007
6
463
1046
6
463
1131
6
463
1139
6
463
1140
6
463
1149
6
463
1198
6
463
1215
6
463
1223
6
463
1265
6
463
1303
6
463
1323
6
463
1358
6
463
1366
6
463
1421
6
463
1460
6
463
1462
6
463
1463
6
463
1467
6
463
1468
6
463
1477
6
463
1491
6
463
1496
6
463
1531
6
463
1535
6
463
1565
6
463
1601
6
463
1602
6
463
1613
6
463
1614
6
463
1626
6
463
1641
6
463
1787
6
463
1788
6
463
205
6
463
224
6
463
249
6
463
288
6
463
316
6
463
381
6
463
398
6
463
11
6
463
404
6
463
410
6
463
463
6
463
463
6
463
464
6
463
483
6
463
3184
6
463
3188
6
463
584
6
463
600
6
463
680
6
463
691
6
463
763
6
463
799
6
463
.i
464
.t
syntactic
analysis
by
digital
computer
.w
this
paper
provides
an
account
of
the
shadow
language
that
is
used
to
describe
syntax
and
of
a
corresponding
subroutine
that
enables
a
computer
to
perform
syntactic
analysis.
the
input
to
this
subroutine
consists
of
a
string
to
be
analyzed
and
a
description
of
the
syntax
that
is
to
be
used.
the
syntax
is
expressed
in
the
shadow
language.
the
output
consists
of
a
trace
table
that
expresses
the
results
of
the
syntactic
analysis
in
a
tabular
form.
several
versions
of
the
subroutine
and
some
associated
programs
have
been
in
use
now
for
over
three
years.
the
present
account
of
the
language
and
the
subroutine
contains
a
summary
of
material
that
has
been
described
previously
in
unpublished
reports
and
also
some
additional
discussion
of
the
work
in
relation
to
the
more
general
questions
of
problem-oriented
languages
and
string
transformations.
.b
cacm
october,
1962
.a
barnett,
m.
p.
futrelle,
r.
p.
.n
ca621016
jb
march
17,
1978
7:11
pm
.x
1046
4
464
1105
4
464
1139
4
464
1140
4
464
1234
4
464
1263
4
464
1265
4
464
1496
4
464
1781
4
464
1824
4
464
2126
4
464
2546
4
464
464
4
464
464
4
464
584
4
464
631
4
464
653
4
464
680
4
464
720
4
464
763
4
464
795
4
464
799
4
464
945
4
464
1062
5
464
1121
5
464
1139
5
464
1265
5
464
265
5
464
1781
5
464
404
5
464
464
5
464
464
5
464
464
5
464
720
5
464
759
5
464
123
6
464
196
6
464
919
6
464
990
6
464
1007
6
464
1046
6
464
1131
6
464
1139
6
464
1140
6
464
1149
6
464
1198
6
464
1215
6
464
1223
6
464
1265
6
464
1303
6
464
1323
6
464
1358
6
464
1366
6
464
1421
6
464
1460
6
464
1462
6
464
1463
6
464
1467
6
464
1468
6
464
1477
6
464
1491
6
464
1496
6
464
1531
6
464
1535
6
464
1565
6
464
1601
6
464
1602
6
464
1613
6
464
1614
6
464
1626
6
464
1641
6
464
1787
6
464
1788
6
464
205
6
464
224
6
464
224
6
464
249
6
464
265
6
464
288
6
464
316
6
464
381
6
464
398
6
464
399
6
464
11
6
464
404
6
464
404
6
464
404
6
464
410
6
464
438
6
464
463
6
464
464
6
464
464
6
464
464
6
464
464
6
464
464
6
464
464
6
464
464
6
464
474
6
464
483
6
464
3184
6
464
3184
6
464
3188
6
464
584
6
464
600
6
464
631
6
464
631
6
464
635
6
464
680
6
464
691
6
464
759
6
464
763
6
464
794
6
464
799
6
464
.i
465
.t
perm
(algorithm
115)
.b
cacm
october,
1962
.a
schrack,
g.
f.
.n
ca621015
jb
march
17,
1978
7:12
pm
.x
465
5
465
465
5
465
465
5
465
.i
466
.t
general
order
arithmetic
(algorithm
93)
.b
cacm
october,
1962
.a
george,
r.
.n
ca621014
jb
march
17,
1978
7:13
pm
.x
466
5
466
466
5
466
466
5
466
.i
467
.t
permutation
generator
(algorithm
87)
.b
cacm
october,
1962
.a
schrack,
g.
f.
shimrat,
m.
.n
ca621013
jb
march
17,
1978
7:14
pm
.x
467
5
467
467
5
467
467
5
467
.i
468
.t
incomplete
elliptic
integrals
(algorithm
73)
.b
cacm
october,
1962
.a
jefferson,
d.
k.
.n
ca621012
jb
march
17,
1978
7:14
pm
.x
468
5
468
468
5
468
468
5
468
.i
469
.t
critical
path
scheduling
(algorithm
40)
.b
cacm
october,
1962
.a
hellberg,
l.
.n
ca621011
jb
march
17,
1978
7:15
pm
.x
469
5
469
469
5
469
469
5
469
.i
470
.t
summation
of
fourier
series
(algorithm
128)
.b
cacm
october,
1962
.a
wells,
m.
.n
ca621010
jb
march
17,
1978
7:16
pm
.x
470
5
470
470
5
470
470
5
470
.i
471
.t
ortho
(algorithm
127)
.b
cacm
october,
1962
.a
walsh,
p.
j.
.n
ca621009
jb
march
17,
1978
7:17
pm
.x
471
5
471
471
5
471
471
5
471
.i
472
.t
gauss'
method
(algorithm
126)
.b
cacm
october,
1962
.a
counts,
j.
w.
.n
ca621008
jb
march
17,
1978
7:18
pm
.x
2075
5
472
472
5
472
472
5
472
472
5
472
472
6
472
.i
473
.t
weightcoeff
(algorithm
125)
.b
cacm
october,
1962
.a
rutishauser,
h.
.n
ca621007
jb
march
17,
1978
7:19
pm
.x
473
5
473
473
5
473
473
5
473
.i
474
.t
input
data
organization
in
fortran
.b
cacm
october,
1962
.a
yarbrough,
l.d.
.n
ca621006
jb
march
17,
1978
7:20
pm
.x
1053
5
474
474
5
474
474
5
474
474
5
474
720
5
474
265
6
474
435
6
474
464
6
474
474
6
474
474
6
474
718
6
474
720
6
474
.i
475
.t
a
test
matrix
for
inversion
procedures
.b
cacm
october,
1962
.a
pei,
m.
l.
.n
ca621005
jb
march
17,
1978
7:21
pm
.x
1963
5
475
475
5
475
475
5
475
475
5
475
909
6
475
475
6
475
750
6
475
.i
476
.t
further
remarks
on
sampling
a
tape
file-ii
.b
cacm
october,
1962
.a
nadler,
m.
.n
ca621004
jb
march
17,
1978
7:22
pm
.x
476
5
476
476
5
476
476
5
476
.i
477
.t
further
remarks
on
sampling
a
tape
file-i
.b
cacm
october,
1962
.a
muller,
m.
e.
.n
ca621003
jb
march
17,
1978
7:23
pm
.x
477
4
477
6
5
477
477
5
477
477
5
477
477
5
477
.i
478
.t
implementing
a
stack
.b
cacm
october,
1962
.a
baecker,
h.d.
.n
ca621002
jb
march
17,
1978
7:25
pm
.x
478
5
478
478
5
478
478
5
478
.i
479
.t
a
dispersion
pass
algorithm
for
the
polyphase
merge
.w
this
paper
presents
a
new
manner
of
dispersing
strings
for
a
polyphase
merge.
if
the
number
of
strings
dispersed
is
between
two
levels
acceptable
by
polyphase
merge,
a
more
economical
technique
of
reaching
the
next
level
for
polyphase
merge
is
shown
and
proved.
.b
cacm
october,
1962
.a
mendoza,
a.
g.
.n
ca621001
jb
march
17,
1978
7:27
pm
.x
2146
4
479
479
4
479
479
4
479
862
4
479
863
4
479
264
5
479
299
5
479
479
5
479
479
5
479
479
5
479
860
5
479
862
5
479
861
6
479
299
6
479
479
6
479
479
6
479
.i
480
.t
quick
calculation
of
jacobian
elliptic
functions
(corrigendum)
.b
cacm
september,
1962
.a
salzer,
h.
e.
.n
ca620912
jb
march
17,
1978
7:28
pm
.x
480
5
480
480
5
480
480
5
480
.i
481
.t
a
one-day
look
at
computing
.b
cacm
september,
1962
.a
armerding,
g.
w.
gruenberger,
f.
j.
marks,
s.
l.
parkin,
t.
r.
.n
ca620911
jb
march
17,
1978
7:30
pm
.x
481
5
481
481
5
481
481
5
481
.i
482
.t
tall-a
list
processor
for
the
philco
200
computer
.b
cacm
september,
1962
.a
feldman,
j.
.n
ca620910
jb
march
17,
1978
7:31
pm
.x
482
5
482
482
5
482
482
5
482
.i
483
.t
on
the
nonexistence
of
a
phrase
structure
grammar
for
algol
60
.w
algol
60
is
defined
partly
by
formal
mechanisms
of
phrase
structure
grammar,
partly
by
informally
stated
restrictions.
it
is
shown
that
no
formal
mechanisms
of
the
type
used
are
sufficient
to
define
algol
60.
.b
cacm
september,
1962
.a
floyd,
r.
w.
.n
ca620909
jb
march
17,
1978
7:33
pm
.x
249
4
483
254
4
483
272
4
483
1102
4
483
1109
4
483
1140
4
483
1188
4
483
1306
4
483
1464
4
483
1491
4
483
1767
4
483
1781
4
483
1787
4
483
1949
4
483
321
4
483
2059
4
483
2126
4
483
435
4
483
437
4
483
463
4
483
483
4
483
491
4
483
2732
4
483
560
4
483
583
4
483
3073
4
483
627
4
483
631
4
483
632
4
483
642
4
483
644
4
483
653
4
483
680
4
483
761
4
483
762
4
483
763
4
483
123
4
483
140
4
483
919
4
483
989
4
483
196
5
483
949
5
483
1102
5
483
1142
5
483
1781
5
483
1945
5
483
483
5
483
483
5
483
483
5
483
762
5
483
823
6
483
123
6
483
196
6
483
196
6
483
196
6
483
914
6
483
915
6
483
917
6
483
919
6
483
984
6
483
989
6
483
990
6
483
990
6
483
1007
6
483
1012
6
483
1046
6
483
1084
6
483
1098
6
483
1122
6
483
1131
6
483
1138
6
483
1139
6
483
1139
6
483
1140
6
483
1141
6
483
1149
6
483
1198
6
483
1200
6
483
1215
6
483
1223
6
483
1223
6
483
1265
6
483
1265
6
483
1303
6
483
1323
6
483
1336
6
483
1358
6
483
1366
6
483
1396
6
483
1421
6
483
1455
6
483
1460
6
483
1462
6
483
1463
6
483
1467
6
483
1468
6
483
1477
6
483
1477
6
483
1487
6
483
1491
6
483
1491
6
483
1496
6
483
1496
6
483
1531
6
483
1535
6
483
1565
6
483
1601
6
483
1602
6
483
1613
6
483
1614
6
483
1626
6
483
1641
6
483
1787
6
483
1788
6
483
205
6
483
209
6
483
210
6
483
224
6
483
249
6
483
249
6
483
288
6
483
316
6
483
381
6
483
398
6
483
11
6
483
404
6
483
406
6
483
410
6
483
463
6
483
464
6
483
483
6
483
483
6
483
483
6
483
483
6
483
483
6
483
483
6
483
3184
6
483
3184
6
483
3188
6
483
584
6
483
584
6
483
584
6
483
600
6
483
669
6
483
680
6
483
680
6
483
691
6
483
763
6
483
763
6
483
799
6
483
.i
484
.t
hankel
function
(algorithm
124)
.b
cacm
september,
1962
.a
schaefer,
l.
j.
.n
ca620908
jb
march
17,
1978
7:34
pm
.x
484
5
484
484
5
484
484
5
484
.i
485
.t
real
error
function,
erf(x)
(algorithm
123)
.b
cacm
september,
1962
.a
crawford,
m.
techo,
r.
.n
ca620907
jb
march
17,
1978
7:35
pm
.x
1157
5
485
485
5
485
485
5
485
485
5
485
836
6
485
1081
6
485
485
6
485
714
6
485
.i
486
.t
tridiagonal
matrix
(algorithm
122)
.b
cacm
september,
1962
.a
dietzel,
g.
f.
.n
ca620906
jb
march
17,
1978
7:36
pm
.x
486
5
486
486
5
486
486
5
486
.i
487
.t
normdev
(algorithm
121)
.b
cacm
september,
1962
.a
shafer,d.
.n
ca620905
jb
march
17,
1978
7:38
pm
.x
487
5
487
487
5
487
487
5
487
.i
488
.t
a
heuristic
for
page
turning
in
a
multiprogrammed
computer
.b
cacm
september,
1962
.a
weil,
j.
w.
.n
ca620904
jb
march
17,
1978
7:40
pm
.x
1754
4
488
2358
4
488
488
4
488
274
5
488
488
5
488
488
5
488
488
5
488
.i
489
.t
current
status
of
ipl-v
for
the
philco
2000
computer
(june
1962)
.b
cacm
september,
1962
.a
shaffer,
s.
s.
.n
ca620903
jb
march
17,
1978
7:41
pm
.x
489
5
489
489
5
489
489
5
489
.i
490
.t
programmed
methods
for
printer
graphical
output
.b
cacm
september,
1962
.a
garfinkel,
d.
.n
ca620902
jb
march
17,
1978
8:56
pm
.x
490
5
490
490
5
490
490
5
490
.i
491
.t
use
of
multiprogramming
in
the
design
of
a
low
cost
digital
computer
.b
cacm
september,
1962
.a
penny,
j.
p.
pearcey,
t.
.n
ca620901
jb
march
17,
1978
8:57
pm
.x
249
4
491
254
4
491
272
4
491
1102
4
491
1109
4
491
1140
4
491
1188
4
491
1306
4
491
1464
4
491
1491
4
491
1713
4
491
1713
4
491
1767
4
491
1781
4
491
1787
4
491
1901
4
491
1901
4
491
1949
4
491
321
4
491
2059
4
491
2126
4
491
435
4
491
437
4
491
463
4
491
483
4
491
491
4
491
491
4
491
491
4
491
491
4
491
2732
4
491
560
4
491
583
4
491
3073
4
491
627
4
491
631
4
491
632
4
491
642
4
491
644
4
491
653
4
491
680
4
491
761
4
491
762
4
491
763
4
491
123
4
491
140
4
491
168
4
491
919
4
491
989
4
491
168
5
491
185
5
491
196
5
491
491
5
491
491
5
491
491
5
491
46
5
491
3193
5
491
796
5
491
491
6
491
491
6
491
.i
492
.t
analysis
of
a
file
addressing
method
.w
this
paper
presents
a
new
file
addressing
method
based
on
the
calculation
of
an
address
from
the
identification
of
a
record.
for
large
recirculating
type
files,
it
seems
to
be
more
advantageous
than
customary
ones.
the
probability
distribution
of
the
displacement
of
records
from
their
calculated
address,
which
is
one
less
than
the
number
of
probes
required
to
address
a
record,
is
computed
on
the
basis
of
a
markov
chain
model.
for
the
reader
not
interested
in
the
mathematics,
the
introduction
and
the
summary
should
be
sufficient.
.b
cacm
august,
1962
.a
schay
jr.,
g.
spruth,
w.
g.
.n
ca620836
jb
march
17,
1978
9:02
pm
.x
911
5
492
1785
5
492
2203
5
492
2860
5
492
492
5
492
492
5
492
492
5
492
911
6
492
911
6
492
1328
6
492
1785
6
492
1786
6
492
332
6
492
332
6
492
2107
6
492
2109
6
492
2203
6
492
492
6
492
492
6
492
492
6
492
492
6
492
.i
493
.t
the
property
classification
method
of
file
design
and
processing
.b
cacm
august,
1962
.a
mcgee,
w.
c.
.n
ca620835
jb
march
17,
1978
9:03
pm
.x
1135
4
493
1136
4
493
493
4
493
2710
4
493
2765
4
493
2888
4
493
2906
4
493
729
4
493
1136
5
493
493
5
493
493
5
493
493
5
493
616
5
493
493
6
493
616
6
493
657
6
493
.i
494
.t
a
finite
sequentially
compact
process
for
the
adjoints
of
matrices
over
arbitrary
integral
domains
.b
cacm
august,
1962
.a
luther,
h.
a.
guseman
jr.,
l.
f.
.n
ca620834
jb
march
17,
1978
9:04
pm
.x
494
5
494
494
5
494
494
5
494
.i
495
.t
a
procedure
for
inverting
large
symmetric
matrices
.w
in
the
least
squares
method
for
simultaneous
adjustment
of
several
parameters,
the
coefficients
of
the
normal
equations
are
the
elements
of
a
symmetric
positive-definite
matrix.
in
order
to
solve
the
normal
equations
and
evaluate
the
precision
measures
of
the
resulting
parameters,
inversion
of
this
matrix
of
coefficients
is
required.
many
available
procedures
for
matrix
inversion
do
not
take
advantage
of
the
symmetry.
thus,
when
programmed
for
a
high-speed
computer,
all
n^2
elements
must
be
stored
and
manipulated,
whereas
only
(n
+
1)/2
of
them
are
independent.
in
order
to
allow
a
computer
of
given
memory
capacity
to
handle
a
larger
matrix,
the
following
procedure
for
inverting
a
symmetric
matrix
has
been
devised.
.b
cacm
august,
1962
.a
busing,
w.
r.
levy,
h.
s.
.n
ca620833
jb
march
17,
1978
9:09
pm
.x
495
5
495
495
5
495
495
5
495
.i
496
.t
a
set
of
matrices
for
testing
computer
programs
.b
cacm
august,
1962
.a
brenner,
j.
l.
.n
ca620832
jb
march
17,
1978
9:10
pm
.x
1047
5
496
496
5
496
496
5
496
496
5
496
496
6
496
.i
497
.t
further
remarks
on
line
segment
curve-fitting
using
dynamic
programming
.w
in
a
recent
paper,
bellman
showed
how
dynamic
programming
could
be
used
to
determine
the
solution
to
a
problem
previously
considered
by
stone.
the
problem
comprises
the
determination,
given
n,
of
the
n
points
of
subdivision
of
a
given
interval
(a,b)
and
the
corresponding
line
segments,
that
give
the
best
least
squares
fit
to
a
function
g(x)
in
the
interval.
bellman
confined
himself
primarily
to
the
analytical
derivation,
suggesting
briefly,
however,
how
the
solution
of
the
equation
derived
for
each
particular
point
of
subdivision
u(i)
could
be
reduced
to
a
discrete
search.
in
this
paper,
the
computational
procedure
is
considered
more
fully,
and
the
similarities
to
some
of
stone's
equations
are
indicated.
it
is
further
shown
that
an
equation
for
u(i)
involving
no
minimization
may
be
found.
in
addition,
it
is
shown
how
bellman's
method
may
be
applied
to
the
curve-fitting
problem
when
the
additional
constraints
are
added
that
the
ends
of
the
line
segments
must
be
on
the
curve.
.b
cacm
august,
1962
.a
gluss,
b.
.n
ca620831
jb
march
17,
1978
9:19
pm
.x
497
4
497
867
4
497
317
5
497
497
5
497
497
5
497
497
5
497
867
5
497
317
6
497
497
6
497
.i
498
.t
magic
square
(algorithm
117
&
118)
.b
cacm
august,
1962
.a
collison,
d.
m.
.n
ca620830
jb
march
17,
1978
9:20
pm
.x
498
5
498
498
5
498
498
5
498
.i
499
.t
permutation
generator
(algorithm
87)
.b
cacm
august,
1962
.a
collison,
d.
m.
.n
ca620829
jb
march
17,
1978
9:22
pm
.x
499
5
499
499
5
499
499
5
499
.i
500
.t
permute
(algorithm
86)
.b
cacm
august,
1962
.a
collison,
d.
m.
.n
ca620828
jb
march
17,
1978
9:23
pm
.x
500
5
500
500
5
500
500
5
500
.i
501
.t
jacobi
(algorithm
85)
.b
cacm
august,
1962
.a
hillmore,
j.
s.
.n
ca620827
jb
march
17,
1978
9:24
pm
.x
2349
5
501
501
5
501
501
5
501
501
5
501
1648
6
501
1716
6
501
1794
6
501
1894
6
501
2043
6
501
501
6
501
613
6
501
774
6
501
.i
502
.t
simpson's
integration
(algorithm
84)
.b
cacm
august,
1962
.a
george,
r.
.n
ca620826
jb
march
17,
1978
9:25
pm
.x
502
5
502
502
5
502
502
5
502
.i
503
.t
rational
roots
of
polynomials
with
integer
coefficients
(algorithm
78)
.b
cacm
august,
1962
.a
collison,
d.
m.
.n
ca620825
jb
march
17,
1978
9:27
pm
.x
503
5
503
503
5
503
503
5
503
.i
504
.t
factors
(algorithm
75)
.b
cacm
august,
1962
.a
hillmore,
j.
s.
.n
ca620824
jb
march
17,
1978
9:28
pm
.x
504
5
504
504
5
504
504
5
504
.i
505
.t
composition
generator
(algorithm
72)
.b
cacm
august,
1962
.a
collison,
d.
m.
.n
ca620823
jb
march
17,
1978
9:29
pm
.x
505
5
505
505
5
505
505
5
505
.i
506
.t
permutation
(algorithm
71)
.b
cacm
august,
1962
.a
hillmore,
j.
s.
.n
ca620822
jb
march
17,
1978
9:30
pm
.x
506
5
506
506
5
506
506
5
506
.i
507
.t
partition,
quicksort,
find
(algorithm
63,
64,
65)
.b
cacm
august,
1962
.a
hillmore,
j.
s.
.n
ca620821
jb
march
17,
1978
9:32
pm
.x
2679
5
507
507
5
507
507
5
507
507
5
507
970
6
507
1175
6
507
1190
6
507
1228
6
507
1969
6
507
1997
6
507
308
6
507
2042
6
507
3187
6
507
507
6
507
716
6
507
783
6
507
.i
508
.t
matrix
inversion
(algorithm
58)
.b
cacm
august,
1962
.a
george,
r.
.n
ca620820
jb
march
17,
1978
9:32
pm
.x
508
5
508
508
5
508
508
5
508
.i
509
.t
matrix
inversion
(algorithm
58)
.b
cacm
august,
1962
.a
struble,
g.
.n
ca620819
jb
march
17,
1978
9:33
pm
.x
509
5
509
509
5
509
509
5
509
.i
510
.t
ber
or
bei
function
(algorithm
57)
.b
cacm
august,
1962
.a
thacher
jr.,
h.
c.
.n
ca620818
jb
march
17,
1978
9:34
pm
.x
510
5
510
510
5
510
510
5
510
.i
511
.t
a
set
of
test
matrices
(algorithm
52)
.b
cacm
august,
1962
.a
hillmore,
j.
s.
.n
ca620817
jb
march
17,
1978
9:35
pm
.x
1707
5
511
511
5
511
511
5
511
511
5
511
1047
6
511
511
6
511
.i
512
.t
telescope
1
(algorithm
37)
.b
cacm
august,
1962
.a
thacher
jr.,
h.
c.
.n
ca620816
jb
march
17,
1978
9:36
pm
.x
512
5
512
512
5
512
512
5
512
.i
513
.t
sieve
(algorithm
35)
.b
cacm
august,
1962
.a
hillmore,
j.
s.
.n
ca620815
jb
march
17,
1978
9:37
pm
.x
513
5
513
513
5
513
513
5
513
.i
514
.t
binomial
coefficients
(algorithm
19)
.b
cacm
august,
1962
.a
george,
r.
.n
ca620814
jb
march
17,
1978
9:40
pm
.x
514
5
514
514
5
514
514
5
514
.i
515
.t
rational
interpolation
by
continued
fractions
(algorithm
18)
.b
cacm
august,
1962
.a
thacher
jr.,
h.
c.
.n
ca620813
jb
march
17,
1978
9:41
pm
.x
515
5
515
515
5
515
515
5
515
.i
516
.t
matrix
inversion
ii
(algorithm
120)
.b
cacm
august,
1962
.a
george,
r.
.n
ca620812
jb
march
17,
1978
9:42
pm
.x
516
5
516
516
5
516
516
5
516
.i
517
.t
evaluation
of
pert
network
(algorithm
119)
.b
cacm
august,
1962
.a
eisenman,
b.
shapiro,
m.
.n
ca620811
jb
march
17,
1978
9:44
pm
.x
517
5
517
517
5
517
517
5
517
.i
518
.t
magic
square
(odd
order)
(algorithm
118)
.b
cacm
august,
1962
.a
collison,
d.
m.
.n
ca620810
jb
march
17,
1978
9:45
pm
.x
2082
5
518
518
5
518
518
5
518
518
5
518
1491
6
518
518
6
518
.i
519
.t
magic
square
(even
order)
(algorithm
117)
.b
cacm
august,
1962
.a
collison,
d.
m.
.n
ca620809
jb
march
17,
1978
9:46
pm
.x
519
5
519
519
5
519
519
5
519
.i
520
.t
complex
division
(algorithm
116)
.b
cacm
august,
1962
.a
smith,
r.
l.
.n
ca620808
jb
march
17,
1978
9:47
pm
.x
520
5
520
520
5
520
520
5
520
.i
521
.t
perm
(algorithm
115)
.b
cacm
august,
1962
.a
trotter,
h.
f.
.n
ca620807
jb
march
17,
1978
9:57
pm
.x
2044
5
521
2189
5
521
2417
5
521
2505
5
521
2874
5
521
2908
5
521
521
5
521
521
5
521
521
5
521
996
6
521
1558
6
521
1594
6
521
1682
6
521
2087
6
521
2189
6
521
2227
6
521
2230
6
521
2292
6
521
2317
6
521
2505
6
521
2683
6
521
2871
6
521
2884
6
521
3191
6
521
521
6
521
521
6
521
521
6
521
521
6
521
521
6
521
521
6
521
.i
522
.t
generation
of
partitions
with
constraints
(algorithm
114)
.b
cacm
august,
1962
.a
stockmal,
f.
.n
ca620806
jb
march
17,
1978
7:28
pm
.x
522
5
522
522
5
522
522
5
522
.i
523
.t
treesort
(algorithm
113)
.b
cacm
august,
1962
.a
floyd,r.
w.
.n
ca620805
jb
march
17,
1978
7:29
pm
.x
523
5
523
523
5
523
523
5
523
.i
524
.t
position
of
point
relative
to
polygon
(algorithm
112)
.b
cacm
august,
1962
.a
shimrat,
m.
.n
ca620804
jb
march
17,
1978
7:30
pm
.x
1804
5
524
2987
5
524
524
5
524
524
5
524
524
5
524
1326
6
524
1630
6
524
2125
6
524
2547
6
524
2633
6
524
421
6
524
421
6
524
524
6
524
524
6
524
.i
525
.t
a
computer
technique
for
handling
analysis
of
variance
.b
cacm
august,
1962
.a
howell,
j.
r.
.n
ca620803
jb
march
17,
1978
7:32
pm
.x
525
5
525
525
5
525
525
5
525
.i
526
.t
character
manipulation
in
fortran
.b
cacm
august,
1962
.a
pyle,
i.
c.
.n
ca620802
jb
march
17,
1978
7:33
pm
.x
526
5
526
526
5
526
526
5
526
.i
527
.t
the
description
list
of
concepts
.w
a
concept
is
defined
as
a
class
of
objects
whose
members
can
be
distinguished
by
processing
its
properties.
property
is
defined
to
mean
a
partition
of
the
set
of
all
objects
into
disjoint
classes.
the
formal
definition
of
a
concept
is
recursive
in
nature.
a
concept
is
described
by
a
list
structure.
a
one-to-one
correspondence
is
established
between
the
recursive
definition
of
a
concept
and
its
description
list
structure.
like
the
definition,
the
description
list
structure
of
a
concept
is
also
built
up
from
elementary
list
structures
by
a
recursive
process.
the
list
structures
obtained
this
way
are
compared
with
the
description
list
structure
discussed
by
the
author
in
a
previous
publication.
.b
cacm
august,
1962
.a
banerji,
r.
b.
.n
ca620801
jb
march
17,
1978
7:39
pm
.x
527
5
527
527
5
527
527
5
527
.i
528
.t
fortran
for
business
data
processing
.b
cacm
july,
1962
.a
robbins,
d.
k.
.n
ca620733
jb
march
17,
1978
7:41
pm
.x
1330
5
528
528
5
528
528
5
528
528
5
528
528
6
528
728
6
528
.i
529
.t
regression
and
coded
patterns
in
data
editing
.b
cacm
july,
1962
.a
robison,
d.
e.
aroian,
l.
a.
.n
ca620732
jb
march
17,
1978
7:42
pm
.x
529
5
529
529
5
529
529
5
529
.i
530
.t
a
computer
method
for
radiation
treatment
planning
.b
cacm
july,
1962
.a
siler,
w.
laughlin,
j.
s.
.n
ca620731
jb
march
17,
1978
7:43
pm
.x
530
5
530
530
5
530
530
5
530
.i
531
.t
person-matching
by
electronic
methods
.w
record
linkage
in
the
updating
of
files
is
accomplished
in
many
establishments
through
the
use
of
a
preassigned
number,
such
as
payroll
number,
customer
number,
or
social
security
number.
in
vital
and
health
records,
however,
a
unique
number
is
generally
not
preassigned
to
an
individual
for
purposes
of
reporting
services
received
to
the
health
department.
in
order
to
determine
whether
different
physician
reports
refer
to
the
same
individual,
name
and
other
identification
must
be
compared.
this
is
a
laborious
operation
which
is
subject
to
various
errors
because
of
name
misspellings,
changes
of
name
upon
marriage,
and
other
problems.
we
are
interested
in
the
maintenance
of
a
psychiatric
case
register
in
maryland,
where
many
of
the
reports
from
over
a
hundred
psychiatric
agencies
refer
to
the
same
patient.
these
records
must
be
linked
in
order
to
provide
unduplicated
counts
of
individuals
under
care
and
longitudinal
records
of
psychiatric
history.
an
earlier
paper
[1]
describes
our
general
procedures
for
register
maintenance
by
use
of
a
digital
computer
(honeywell
800).
here
we
present
in
more
detail
our
initial
procedures
for
the
person-matching
process
in
order
to
elicit
comments
and
suggestions
from
persons
who
have
had
experience
in
matching.
.b
cacm
july,
1962
.a
phillips
jr.,
w.
bahn,
a.
k.
miyasaki,
m.
.n
ca620730
jb
march
17,
1978
7:51
pm
.x
531
5
531
531
5
531
531
5
531
.i
532
.t
on
the
computation
of
rational
approximations
to
continuous
functions
.b
cacm
july,
1962
.a
fraser,
w.
hart,
j.
f.
.n
ca620729
jb
march
17,
1978
7:52
pm
.x
951
5
532
1015
5
532
1346
5
532
1440
5
532
1645
5
532
532
5
532
532
5
532
532
5
532
951
6
532
962
6
532
532
6
532
532
6
532
532
6
532
532
6
532
532
6
532
.i
533
.t
digital
synthesis
of
correlated
stationary
noise
.w
in
this
note
we
propose
a
method
of
generating
stationary
noise
with
a
prescribed
auto-covariance
function
by
digital
methods.
the
need
for
such
a
technique
often
arises
in
testing
the
performance
of
data
processing
and
engineering
systems,
where
inputs
corrupted
with
correlated
noise
(of
a
known
form)
are
required.
the
technique
is
quite
simple
and
produces
strict-sense
stationary
noise
which
agrees
approximately
with
r(t),
the
prescribed
auto-covariance
function
(acf),
over
an
interval
[-t(0),
t(0)].
the
method
consists
of
approximating
the
spectral
density
by
a
periodic
process
with
spectral
lines,
and
then
synthesizing
the
periodic
noise
with
random
phases
and
appropriate
amplitudes.
in
order
to
simplify
discussion
of
the
statistical
properties
of
the
noise
generated,
the
technique
is
first
presented
in
terms
of
exact
harmonic
analysis.
in
practice,
discrete
harmonic
analysis
as
presented
in
the
third
section
is
used.
.b
cacm
july,
1962
.a
peabody,
p.
r.
adorno,
d.
s.
.n
ca620728
jb
march
17,
1978
7:59
pm
.x
533
5
533
533
5
533
533
5
533
.i
534
.t
quick
calculation
of
jacobian
elliptic
functions
.b
cacm
july,
1962
.a
salzer,
h.
e.
.n
ca620727
jb
march
17,
1978
8:01
pm
.x
534
5
534
534
5
534
534
5
534
.i
535
.t
triangular
walk
pattern
for
the
down-hill
method
of
solving
a
transcendental
equation
.b
cacm
july,
1962
.a
onoe,
m.
.n
ca620726
jb
march
17,
1978
8:02
pm
.x
1806
5
535
535
5
535
535
5
535
535
5
535
535
6
535
.i
536
.t
nonlinear
regression
and
the
solution
of
simultaneous
equations
.w
if
one
has
a
set
of
observables
(z1,...,zm)
which
are
bound
in
a
relation
with
certain
parameters
(a1,...,an)
by
an
equation
s(z1,...;a1,...)=0,
one
frequently
has
the
problem
of
determining
a
set
of
values
of
the
ai
which
minimizes
the
sum
of
squares
of
differences
between
observed
and
calculated
values
of
a
distinguished
observable,
say
zm.
if
the
solution
of
the
above
equation
for
zm,
zm=n(z1,...;a1,...)
gives
rise
to
a
function
n
which
is
nonlinear
in
the
ai,
then
one
may
rely
on
a
version
of
gaussian
regression
[1,2]
for
an
iteration
scheme
that
converges
to
a
minimizing
set
of
values.
it
is
shown
here
that
this
same
minimization
technique
may
be
used
for
the
solution
of
simultaneous
(not
necessarily
linear)
equations.
.b
cacm
july,
1962
.a
baer,
r.
m.
.n
ca620725
jb
march
17,
1978
8:09
pm
.x
536
5
536
536
5
536
536
5
536
.i
537
.t
a
machine
program
for
theorem-proving
.w
the
program
of
a
proof
procedure
is
discussed
in
connection
with
trial
runs
and
possible
improvements.
.b
cacm
july,
1962
.a
davis,
m.
logemann,
g.
loveland,
d.
.n
ca620724
jb
march
17,
1978
8:11
pm
.x
537
5
537
537
5
537
537
5
537
.i
538
.t
quantum
mechanical
integrals
of
slater-type
orbitals
(algorithm
110)
.b
cacm
july,
1962
.a
kruglyak,
y.
a.
whitman,
d.
r.
.n
ca620723
jb
march
17,
1978
8:13
pm
.x
538
5
538
538
5
538
538
5
538
.i
539
.t
definite
exponential
integrals
b
(algorithm
109)
.b
cacm
july,
1962
.a
kruglyak,
y.
a.
whitman,
d.
r.
.n
ca620722
jb
march
17,
1978
8:15
pm
.x
539
5
539
539
5
539
539
5
539
.i
540
.t
definite
exponential
integrals
a
(algorithm
108)
.b
cacm
july,
1962
.a
kruglyak,
y.
a.
whitman,
d.
r.
.n
ca620721
jb
march
17,
1978
8:16
pm
.x
540
5
540
540
5
540
540
5
540
.i
541
.t
simpson's
integration
(algorithm
84)
.b
cacm
july,
1962
.a
relph,
a.
p.
.n
ca620720
jb
march
17,
1978
8:17
pm
.x
541
5
541
541
5
541
541
5
541
.i
542
.t
factors
(algorithm
75)
.b
cacm
july,
1962
.a
relph,
a.
p.
.n
ca620719
jb
march
17,
1978
8:18
pm
.x
542
5
542
542
5
542
542
5
542
.i
543
.t
interpolation
by
aitken
(algorithm
70)
.b
cacm
july,
1962
.a
relph,
a.
p.
.n
ca620718
jb
march
17,
1978
8:19
pm
.x
543
5
543
543
5
543
543
5
543
.i
544
.t
ber
or
bei
function
(algorithm
57)
.b
cacm
july,
1962
.a
relph,
a.
p.
.n
ca620717
jb
march
17,
1978
8:21
pm
.x
544
5
544
544
5
544
544
5
544
.i
545
.t
adjust
inverse
of
a
matrix
when
an
element
is
perturbed
(algorithm
51)
.b
cacm
july,
1962
.a
george,
r.
.n
ca620716
jb
march
17,
1978
8:22
pm
.x
545
5
545
545
5
545
545
5
545
.i
546
.t
logarithm
of
a
complex
number
(algorithm
48)
.b
cacm
july,
1962
.a
johnson,
m.
l.
sangren,
w.
.n
ca620715
jb
march
17,
1978
8:23
pm
.x
546
5
546
546
5
546
546
5
546
.i
547
.t
gamma
function
(algorithm
34)
.b
cacm
july,
1962
.a
johnson,
m.
l.
sangren,
w.
.n
ca620714
jb
march
17,
1978
8:25
pm
.x
547
5
547
547
5
547
547
5
547
.i
548
.t
molecular-orbital
calculation
of
molecular
interactions
.b
cacm
july,
1962
.a
kruglyak,
y.
a.
whitman,
d.
r.
.n
ca620713
jb
march
17,
1978
8:26
pm
.x
548
5
548
548
5
548
548
5
548
.i
549
.t
quantum
mechanical
integrals
of
slater-type
orbitals
.b
cacm
july,
1962
.a
kruglyak,
y.
a.
whitman,
d.
r.
.n
ca620712
jb
march
17,
1978
8:27
pm
.x
549
5
549
549
5
549
549
5
549
.i
550
.t
definite
exponential
integrals
b
(algorithm
109)
.b
cacm
july,
1962
.a
kruglyak,
y.
a.
whitman,
d.
r.
.n
ca620711
jb
march
17,
1978
8:30
pm
.x
550
5
550
550
5
550
550
5
550
.i
551
.t
definite
exponential
integrals
a
(algorithm
108)
.b
cacm
july,
1962
.a
kruglyak,
y.
a.
whitman,
d.
r.
.n
ca620710
jb
march
17,
1978
8:31
pm
.x
551
5
551
551
5
551
551
5
551
.i
552
.t
gauss's
method
(algorithm
107)
.b
cacm
july,
1962
.a
counts,
j.
w.
.n
ca620709
jb
march
17,
1978
8:33
pm
.x
552
5
552
552
5
552
552
5
552
.i
553
.t
complex
number
to
a
real
power
(algorithm
106)
.b
cacm
july,
1962
.a
johnson,
m.
l.
sangren,
w.
.n
ca620708
jb
march
17,
1978
8:34
pm
.x
553
5
553
553
5
553
553
5
553
.i
554
.t
newton
maehly,
(algorithm
105)
.b
cacm
july,
1962
.a
bauer,
f.
l.
stoer,
j.
.n
ca620707
jb
march
17,
1978
8:44
pm
.x
554
5
554
554
5
554
554
5
554
.i
555
.t
reduction
to
jacobi
(algorithm
104)
.b
cacm
july,
1962
.a
rutishausr,
h.
.n
ca620706
jb
march
17,
1978
8:45
pm
.x
555
5
555
555
5
555
555
5
555
.i
556
.t
on
translation
of
boolean
expressions
.b
cacm
july,
1972
.a
bottenbirruch,
h.
h
grau,
a.
a.
.n
ca620705
jb
march
17,
1978
8:52
pm
.x
1139
4
556
1947
4
556
556
4
556
799
4
556
399
5
556
556
5
556
556
5
556
556
5
556
.i
557
.t
simulation
of
computer
timing
device
.b
cacm
july,
1962
.n
ca620704
jb
march
17,
1978
8:57
pm
.x
1380
4
557
1552
4
557
1693
4
557
1781
4
557
1854
4
557
1860
4
557
2060
4
557
557
4
557
1421
5
557
557
5
557
557
5
557
557
5
557
3184
5
557
1198
6
557
1749
6
557
557
6
557
.i
558
.t
a
modified
inversion
procedure
for
product
form
of
the
inverse
linear
programming
codes
.w
this
paper
describes
a
new
algorithm
for
the
selection
of
the
pivot
row
in
matrix
inversion
when
using
the
product
form
of
the
inverse.
this
algorithm
has
been
developed
for
linear
programming
codes;
however,
it
would
be
valuable
for
the
inversion
of
any
non-dense
matrix.
the
procedures
described
in
this
paper
have
been
thoroughly
tested
and
have
been
in
operation
on
the
esso
research
and
engineering
ibm
7090
computer
for
nine
months.
substantial
computer
cost
savings
have
been
realized
because
of
this
procedure.
.b
cacm
july,1962
.a
larsen,
l.
j.
.n
ca620703
jb
march
17,
1978
9:07
pm
.x
558
5
558
558
5
558
558
5
558
.i
559
.t
solution
of
eigenvalue
problems
with
approximately
known
eigenvectors
.b
cacm
july,
1962
.a
appel,
k.
.n
ca620702
jb
march
17,
1978
9:10
pm
.x
559
5
559
559
5
559
559
5
559
.i
560
.t
communication
between
independently
translated
blocks
.b
cacm
july,
1962
.a
wegner,
p.
.n
ca620701
jb
march
17,
1978
9:11
pm
.x
249
4
560
254
4
560
272
4
560
1102
4
560
1109
4
560
1140
4
560
1188
4
560
1306
4
560
1464
4
560
1491
4
560
1767
4
560
1774
4
560
1781
4
560
1787
4
560
1949
4
560
321
4
560
2059
4
560
2126
4
560
435
4
560
437
4
560
463
4
560
483
4
560
491
4
560
2732
4
560
560
4
560
560
4
560
583
4
560
3073
4
560
627
4
560
631
4
560
632
4
560
642
4
560
644
4
560
653
4
560
680
4
560
761
4
560
762
4
560
763
4
560
123
4
560
140
4
560
919
4
560
972
4
560
989
4
560
196
5
560
271
5
560
560
5
560
560
5
560
560
5
560
.i
561
.t
analytic
differentiation
by
computer
.b
cacm
june,
1962
.a
hanson,
j.
w.
caviness,
j.
s.
joseph,
c.
.n
ca620624
jb
march
17,
1978
9:12
pm
.x
1134
4
561
1141
4
561
364
4
561
405
4
561
438
4
561
561
4
561
561
4
561
44
4
561
964
5
561
1028
5
561
1216
5
561
1396
5
561
1392
5
561
393
5
561
77
5
561
561
5
561
561
5
561
561
5
561
964
6
561
1028
6
561
1028
6
561
1029
6
561
1029
6
561
1029
6
561
1083
6
561
1132
6
561
1214
6
561
1278
6
561
1334
6
561
1365
6
561
1386
6
561
1387
6
561
1388
6
561
1392
6
561
1393
6
561
1394
6
561
1395
6
561
1396
6
561
1397
6
561
1496
6
561
284
6
561
284
6
561
407
6
561
3199
6
561
3200
6
561
3201
6
561
3202
6
561
3203
6
561
3204
6
561
561
6
561
561
6
561
561
6
561
561
6
561
561
6
561
730
6
561
759
6
561
.i
562
.t
avint
(algorithm
77)
.b
cacm
june,
1962
.a
whittier,
v.
e.
.n
ca620623
jb
march
17,
1978
9:14
pm
.x
562
5
562
562
5
562
562
5
562
.i
563
.t
sorting
procedures
(algorithm
76)
.b
cacm
june,
1962
.a
randell,
b.
.n
ca620622
jb
march
17,
1978
9:15
pm
.x
563
5
563
563
5
563
563
5
563
.i
564
.t
cram
(algorithm
67)
.b
cacm
june,
1962
.a
relph,
a.
p.
.n
ca620621
jb
march
17,
1978
9:17
pm
.x
564
5
564
564
5
564
564
5
564
.i
565
.t
invrs
(algorithm
66)
.b
cacm
june,
1962
.a
caffrey,
j.
.n
ca620620
jb
march
17,
1978
9:18
pm
.x
565
5
565
565
5
565
565
5
565
.i
566
.t
matrix
inversion
(algorithm
58)
.b
cacm
june,
1962
.a
conger,
r.
a.
.n
ca620619
jb
march
17,
1978
9:19
pm
.x
566
5
566
566
5
566
566
5
566
.i
567
.t
logarithm
of
a
complex
number
(algorithm
48)
.b
cacm
june,
1962
.a
relph,
a.
p.
.n
ca620618
jb
march
17,
1978
9:20
pm
.x
567
5
567
567
5
567
567
5
567
.i
568
.t
exponential
of
a
complex
number
(algorithm
46)
.b
cacm
june,
1962
.a
relph,
a.
p.
.n
ca620617
jb
march
17,
1978
9:21
pm
.x
568
5
568
568
5
568
568
5
568
.i
569
.t
binomial
coefficients
(algorithm
19)
.b
cacm
june,
1962
.a
steck,
b.
.n
ca620616
jb
march
17,
1978
9:22
pm
.x
569
5
569
569
5
569
569
5
569
.i
570
.t
simpson's
rule
integrator
(algorithm
103)
.b
cacm
june,
1962
.a
kuncir,
g.
f.
.n
ca620615
jb
march
17,
1978
9:24
pm
.x
1352
5
570
570
5
570
570
5
570
570
5
570
834
6
570
872
6
570
1040
6
570
1092
6
570
1241
6
570
1273
6
570
324
6
570
429
6
570
570
6
570
621
6
570
786
6
570
.i
571
.t
permutation
in
lexicographical
order
(algorithm
102)
.b
cacm
june,
1962
.a
schrack,
g.
f.
shimrat,
m.
.n
ca620614
jb
march
17,
1978
9:25
pm
.x
571
5
571
571
5
571
571
5
571
.i
572
.t
add
item
to
chain-linked
list
(algorithm
100)
.b
cacm
june,
1962
.a
kiviat,
p.
j.
.n
ca620612
jb
march
17,
1978
9:26
pm
.x
572
5
572
572
5
572
572
5
572
.i
573
.t
remove
item
from
chain-linked
list
(algorithm
101)
.b
cacm
june,
1962
.a
kiviat,
p.
j.
.n
ca620613
jb
march
17,
1978
9:27
pm
.x
573
5
573
573
5
573
573
5
573
.i
574
.t
evaluation
of
jacobi
symbol
(algorithm
99)
.b
cacm
june,
1962
.a
garland,
s.
j.
knapp,
a.
w.
.n
ca620611
jb
march
17,
1978
9:28
pm
.x
574
5
574
574
5
574
574
5
574
.i
575
.t
evaluation
of
definite
complex
line
integrals
(algorithm
98)
.b
cacm
june,
1962
.a
pfaltz,
j.
l.
.n
ca620610
jb
march
17,
1978
9:29
pm
.x
575
5
575
575
5
575
575
5
575
.i
576
.t
shortest
path
(algorithm
97)
.b
cacm
june,
1962
.a
floyd,
r.
w.
.n
ca620609
jb
march
17,
1978
9:30
pm
.x
1846
5
576
2630
5
576
2650
5
576
576
5
576
576
5
576
576
5
576
830
6
576
1380
6
576
1424
6
576
1484
6
576
1572
6
576
2111
6
576
576
6
576
576
6
576
576
6
576
680
6
576
.i
577
.t
ancestor
(algorithm
96)
.b
cacm
june,
1962
.a
floyd,
r.
w.
.n
ca620608
jb
march
17,
19789:31
pm
.x
1836
5
577
577
5
577
577
5
577
577
5
577
1191
6
577
1477
6
577
1491
6
577
1781
6
577
577
6
577
.i
578
.t
generation
of
partitions
in
part-count
form
(algorithm
95)
.b
cacm
june,
1962
.a
stockmal,
f.
.n
ca620607
jb
march
17,
1978
9:32
pm
.x
578
5
578
578
5
578
578
5
578
.i
579
.t
combination
(algorithm
94)
.b
cacm
june,
1962
.a
kurtzberg,
j.
.n
ca620606
jb
march
17,
1978
9:33
pm
.x
2690
5
579
2853
5
579
579
5
579
579
5
579
579
5
579
3115
5
579
907
6
579
203
6
579
2045
6
579
2417
6
579
2466
6
579
2690
6
579
2884
6
579
579
6
579
579
6
579
579
6
579
785
6
579
.i
580
.t
general
order
arithmetic
(algorithm
93)
.b
cacm
june,
1962
.a
perstein,
m.
h.
.n
ca620605
jb
march
17,
1978
9:34
pm
.x
580
5
580
580
5
580
580
5
580
.i
581
.t
a
note
on
sampling
a
tape-file
.b
cacm
june,
1962
.a
jones,
t.
g.
.n
ca620604
jb
march
17,
1978
9:35
pm
.x
581
5
581
581
5
581
581
5
581
.i
582
.t
one
lost
bit
.b
cacm
june,
1962
.a
oster,
c.
a.
.n
ca620603
jb
march
17,
1978
9:36
pm
.x
582
5
582
582
5
582
582
5
582
.i
583
.t
a
redundancy
check
for
algol
programs
.b
cacm
june,
1962
.a
thacher
jr.,
h.
c.
.n
ca620602
jb
march
17,
1978
9:37
pm
.x
249
4
583
254
4
583
272
4
583
1102
4
583
1109
4
583
1140
4
583
1188
4
583
1306
4
583
1464
4
583
1491
4
583
1767
4
583
1781
4
583
1787
4
583
1949
4
583
321
4
583
2059
4
583
2126
4
583
435
4
583
437
4
583
463
4
583
483
4
583
491
4
583
2732
4
583
560
4
583
583
4
583
3073
4
583
627
4
583
631
4
583
632
4
583
642
4
583
644
4
583
653
4
583
680
4
583
761
4
583
762
4
583
763
4
583
123
4
583
140
4
583
919
4
583
989
4
583
196
5
583
583
5
583
583
5
583
583
5
583
.i
584
.t
report
on
the
algorithmic
language
fortran
ii
.b
cacm
june,
1962
.a
rabinowitz,
i.
n.
.n
ca620601
jb
march
17,
1978
9:38
pm
.x
1046
4
584
1105
4
584
1139
4
584
1140
4
584
1234
4
584
1263
4
584
1265
4
584
1496
4
584
1781
4
584
1824
4
584
2126
4
584
2546
4
584
464
4
584
584
4
584
631
4
584
653
4
584
680
4
584
763
4
584
795
4
584
799
4
584
945
4
584
949
5
584
1781
5
584
1945
5
584
404
5
584
584
5
584
584
5
584
584
5
584
823
6
584
123
6
584
196
6
584
914
6
584
915
6
584
917
6
584
919
6
584
984
6
584
989
6
584
990
6
584
990
6
584
1007
6
584
1012
6
584
1046
6
584
1084
6
584
1098
6
584
1122
6
584
1131
6
584
1138
6
584
1139
6
584
1139
6
584
1140
6
584
1141
6
584
1149
6
584
1198
6
584
1200
6
584
1215
6
584
1223
6
584
1223
6
584
1265
6
584
1265
6
584
1303
6
584
1323
6
584
1336
6
584
1358
6
584
1366
6
584
1396
6
584
1421
6
584
1455
6
584
1460
6
584
1462
6
584
1463
6
584
1467
6
584
1468
6
584
1477
6
584
1477
6
584
1487
6
584
1491
6
584
1491
6
584
1496
6
584
1496
6
584
1531
6
584
1535
6
584
1565
6
584
1601
6
584
1602
6
584
1613
6
584
1614
6
584
1626
6
584
1641
6
584
1787
6
584
1788
6
584
205
6
584
224
6
584
249
6
584
288
6
584
316
6
584
381
6
584
398
6
584
11
6
584
404
6
584
410
6
584
463
6
584
464
6
584
483
6
584
483
6
584
483
6
584
3184
6
584
3184
6
584
3188
6
584
584
6
584
584
6
584
584
6
584
600
6
584
669
6
584
680
6
584
680
6
584
691
6
584
763
6
584
763
6
584
799
6
584
.i
585
.t
initial
experience
with
an
operating
multiprogramming
system
.w
the
lewis
research
center
has
been
using
various
forms
and
degrees
of
program
simultaneity
in
the
operation
of
its
modified
sperry-rand
univac
scientific
model
1103
computer
during
the
last
five
years.
this
simultaneity
has
evolved
from
an
initial
achievement
of
self-searching
input
and
output
to
the
automatic
time
sharing
of
independently
coded
problems.
several
important
machine
and
program
system
modifications
were
necessary
to
accomplish
this
evolution.
several
additional
modifications,
although
not
required,
were
added
to
facilitate
ease
of
coding
and
operation.
all
modifications
had
to
proceed
at
a
relatively
temperate
pace
to
insure
that
the
basic
data-reduction
work
load
of
the
computing
center
was
completed
on
schedule.
some
educationally
valuable
mistakes
were
made,
and
their
suggested
cures
often
pointed
the
way
to
useful
future
improvements
or
emphasized
some
of
the
basic
principles
of
a
multiprogramming
system.
the
material
that
follows
is
a
description
of
the
evolution
of
the
programming
and
hardware
system
which
has
developed
into
the
present
multiprogramming
system
at
lewis
research
center.
.b
cacm
may,
1962
.a
landis,
n.
manos,
a.
turner,
l.
r.
.n
ca620520
jb
march
17,
1978
9:45
pm
.x
585
5
585
585
5
585
585
5
585
.i
586
.t
simultaneous
system
of
equations
and
matrix
inversion
routine
(algorithm
92)
.b
cacm
may,
1962
.a
roek,
d.
j.
.n
ca620519
jb
march
20,
1978
1:31
pm
.x
454
5
586
586
5
586
586
5
586
586
5
586
152
6
586
586
6
586
.i
587
.t
romberg
integration
(algorithm
60)
.b
cacm
may,
1962
.a
buchner,
k.
h.
.n
ca620518
jb
march
20,
1978
1:33
pm
.x
1040
5
587
587
5
587
587
5
587
587
5
587
885
6
587
587
6
587
621
6
587
.i
588
.t
chebyshev
curve-fit
(algorithm
91)
.b
cacm
may,
1962
.a
newhouse,
a.
.n
ca620517
jb
march
20,
1978
1:34
pm
.x
588
5
588
588
5
588
588
5
588
.i
589
.t
evaluation
of
the
fresnel
cosine
integral
(algorithm
90)
.b
cacm
may,
1962
.a
cundiff,
j.
l.
.n
ca620516
jb
march
20,
1978
1:35
pm
.x
589
5
589
589
5
589
589
5
589
.i
590
.t
evaluation
of
the
fresnel
sine
integral
(algorithm
89)
.b
cacm
may,
1962
.a
cundiff,
j.
l.
.n
ca620515
jb
march
20,
1978
1:36
pm
.x
590
5
590
590
5
590
590
5
590
.i
591
.t
evaluation
of
asymptotic
expression
for
the
fresnel
sine
and
cosine
integrals
(algorithm
88)
.b
cacm
may,
1962
.a
cundiff,
j.
l.
.n
ca620514
jb
march
20,
1978
1:37
pm
.x
591
5
591
591
5
591
591
5
591
.i
592
.t
cobol
batching
problems
.b
cacm
may,
1962
.a
mullen,
j.
w.
.n
ca620513
jb
march
20,
1978
1:38
pm
.x
592
5
592
592
5
592
592
5
592
.i
593
.t
an
introduction
to
a
machine-independent
data
division
.b
cacm
may,
1962
.a
mullin,
j.
p.
.n
ca620512
jb
march
20,
1978
1:39
pm
.x
593
5
593
593
5
593
593
5
593
.i
594
.t
an
advanced
input-output
system
for
a
cobol
compiler
.b
cacm
may,
1962
.a
bouman,
c.
a.
.n
ca620511
jb
march
20,
1978
1:40
pm
.x
594
5
594
594
5
594
594
5
594
.i
595
.t
guides
to
teaching
cobol
.w
the
teaching
of
cobol
can
be
divided
into
three
main
subject
areas.
they
are
the
syntax
of
cobol,
the
use
of
such
syntax
in
solving
any
given
problem,
and
programming
concepts.
it
is
generally
accepted
that
some
knowledge
of
the
hardware
and
computer
logic
must
be
possessed
by
the
programmer.
the
teaching
problem
arises
in
determining
how
thoroughly
a
student
must
know
the
hardware
and
logic
for
that
computer
for
which
he
will
write
cobol
programs.
unfortunately,
historical
data
concerning
students'
programming
proficiency
is
almost
non-existent
and,
at
best,
difficult
to
measure.
how
then
might
we
approach
solving
this
problem?
.b
cacm
may,
1962
.a
greene,
i.
.n
ca620510
jb
march
20,
1978
1:44
pm
.x
595
5
595
595
5
595
595
5
595
.i
596
.t
floating-point
arithmetic
in
cobol
.w
in
this
paper
the
basic
operations
of
floating-point
arithmetic
are
examined
and
cobol
procedures
for
carrying
these
out
are
given,
along
with
specification
of
working
storage.
the
paper
concludes
with
an
example
in
which
these
procedures
are
used.
.b
cacm
may,
1962
.a
kesner,
o.
.n
ca620509
jb
march
20,
1978
1:46
pm
.x
596
5
596
596
5
596
596
5
596
.i
597
.t
modular
data
processing
systems
written
in
cobol
.b
cacm
may,
1962
.a
emery,
j.
c.
.n
ca620508
jb
march
20,
1978
1:47
pm
.x
597
5
597
597
5
597
597
5
597
.i
598
.t
the
cobol
librarian
-
a
key
to
object
program
efficiency
.w
many
answers
to
the
question
"how
may
a
cobol
compiler
be
forced
into
the
generation
of
an
efficient
object
program?"
the
purpose
of
this
article
is
to
present
one
possible
answer:
the
creation
and
full
utilization
of
a
well-constructed
cobol
library.
.b
cacm
may,
1962
.a
hicks,
w.
.n
ca620507
jb
march
20,
1978
1:50
pm
.x
598
5
598
598
5
598
598
5
598
.i
599
.t
a
report
writer
for
cobol
.b
cacm
may,
1962
.a
donally,
w.
l.
.n
ca620506
jb
march
20,
1978
1:51
pm
.x
599
5
599
599
5
599
599
5
599
.i
600
.t
syntactical
charts
of
cobol
61
.b
cacm
may,
1962
.a
berman,
r.
sharp,
j.
sturges,
l.
.n
ca620505
jb
march
20,
1978
1:52
pm
.x
1781
5
600
600
5
600
600
5
600
600
5
600
123
6
600
196
6
600
919
6
600
990
6
600
1007
6
600
1046
6
600
1131
6
600
1139
6
600
1140
6
600
1149
6
600
1198
6
600
1215
6
600
1223
6
600
1265
6
600
1303
6
600
1323
6
600
1358
6
600
1366
6
600
1421
6
600
1460
6
600
1462
6
600
1463
6
600
1467
6
600
1468
6
600
1477
6
600
1491
6
600
1496
6
600
1531
6
600
1535
6
600
1565
6
600
1601
6
600
1602
6
600
1613
6
600
1614
6
600
1626
6
600
1641
6
600
1787
6
600
1788
6
600
205
6
600
224
6
600
249
6
600
288
6
600
316
6
600
381
6
600
398
6
600
11
6
600
404
6
600
410
6
600
463
6
600
464
6
600
483
6
600
3184
6
600
3188
6
600
584
6
600
600
6
600
680
6
600
691
6
600
763
6
600
799
6
600
.i
601
.t
interim
report
on
bureau
of
ships
cobol
evaluation
program
.b
cacm
may,
1962
.a
siegel,
m.
smith,
a.
e.
.n
ca620504
jb
march
20,
1978
1:53
pm
.x
601
5
601
601
5
601
601
5
601
.i
602
.t
cobol
and
compatibility
.b
cacm
may,
1962
.a
lippitt,
a.
.n
ca620503
jb
march
20,
1978
1:54
pm
.x
602
5
602
602
5
602
602
5
602
.i
603
.t
basic
elements
of
cobol
61
.b
cacm
may,
1962
.a
sammet,
j.
e.
.n
ca620502
jb
march
20,
1978
1:54
pm
.x
1084
5
603
603
5
603
603
5
603
603
5
603
868
6
603
603
6
603
644
6
603
669
6
603
791
6
603
797
6
603
.i
604
.t
why
cobol?
.b
cacm
may,
1962
.a
cunningham,
j.
f.
.n
ca620501
jb
march
20,
1978
1:55
pm
.x
604
5
604
604
5
604
604
5
604
.i
605
.t
computer
simulation
of
city
traffic
.w
in
simulating
traffic
flow
on
city
streets,
the
national
bureau
of
standards
has
used
data
processing
techniques
to
tabulate
and
make
motion
pictures
of
vehicle
movements
in
the
model.
each
vehicle
is
assigned
a
digital
identification
giving
points
of
entry
and
exit,
type
of
vehicle,
desired
speed,
and
actual
speed,
in
proportions
simulating
field
data.
changes
in
the
model
can
be
made
to
observe
their
consequences
and
to
determine
the
ability
of
a
real
street
to
carry
loads
expected
in
the
future.
.b
cacm
april,
1962
.n
ca620412
jb
march
20,
1978
2:00
pm
.x
605
5
605
605
5
605
605
5
605
.i
606
.t
a
method
for
eliminating
ambiguity
due
to
signal
coincidence
in
digital
design
.b
cacm
april,
1962
.a
kaiser,
c.
j.
.n
ca620411
jb
march
20,
1978
2:16
pm
.x
606
5
606
606
5
606
606
5
606
.i
607
.t
the
calculation
of
easter...
.b
cacm
april,
1962
.a
knuth,
d.
.n
ca620410
jb
march
20,
1978
2:17
pm
.x
607
5
607
607
5
607
607
5
607
.i
608
.t
permutation
(algorithm
71)
.b
cacm
april,
1962
.a
peck,
j.
e.
l.
schrack,
g.
f.
.n
ca620409
jb
march
20,
1978
2:18
pm
.x
608
5
608
608
5
608
608
5
608
.i
609
.t
permutation
(algorithm
71)
.b
cacm
april,
1962
.a
brown,
p.
j.
.n
ca620408
jb
march
20,
1978
2:19
pm
.x
609
5
609
609
5
609
609
5
609
.i
610
.t
sieve
(algorithm
35)
.b
cacm
april,
1962
.a
brown,
p.
j.
.n
ca620407
jb
march
20,
1978
2:20
pm
.x
610
5
610
610
5
610
610
5
610
.i
611
.t
permutation
generator
(algorithm
87)
.b
cacm
april,
1962
.a
howell,
j.
r.
.n
ca620406
jb
march
20,
1978
2:20
pm
.x
611
5
611
611
5
611
611
5
611
.i
612
.t
permute
(algorithm
86)
.b
cacm
april,
1962
.a
peck,
j.
e.
l.
schrack,
g.
f.
.n
ca620405
jb
march
20,
1978
2:21
pm
.x
3188
5
612
612
5
612
612
5
612
612
5
612
1594
6
612
612
6
612
.i
613
.t
jacobi
(algorithm
85)
.b
cacm
april,
1962
.a
evans,
t.
g.
.n
ca620404
jb
march
20,
1978
2:22
pm
.x
2349
5
613
613
5
613
613
5
613
613
5
613
1648
6
613
1716
6
613
1794
6
613
1894
6
613
2043
6
613
501
6
613
613
6
613
774
6
613
.i
614
.t
simpson's
integration
(algorithm
84)
.b
cacm
april,
1962
.a
hennion,
p.
e.
.n
ca620403
jb
march
20,
1978
2:25
pm
.x
614
5
614
614
5
614
614
5
614
.i
615
.t
addressing
multidimensional
arrays
.w
a
useful
method
of
representing
a
function
of
n
variables
is
to
consider
the
function
to
assume
its
values
at
selected
points
in
n-dimensional
space.
although
this
picture
is
of
value
to
the
analyst,
the
elements
of
an
n-dimensional
array
must
exist
in
conventional
storage
as
a
linear
array
or
vector.
the
means
of
performing
the
transformation
of
a
set
of
indices
locating
on
array
element
in
n-space
to
the
location
(address)
of
the
element
in
its
storage
vector
is
the
subject
of
this
paper.
it
is
noted
that
the
index
address
transformation
is
computationally
identical
to
the
conversion
of
a
number
from
a
fixed
to
a
mixed
radix
number
system.
several
ways
of
implementing
the
transformation
are
described.
.b
cacm
april,
1962
.a
hellerman,
h.
.n
ca620402
jb
march
20,
1978
2:29
pm
.x
435
5
615
615
5
615
615
5
615
615
5
615
849
5
615
155
6
615
196
6
615
615
6
615
615
6
615
.i
616
.t
an
information
algebra
-
phase
i
report-language
structure
group
of
the
codasyl
development
committee
.w
this
report
represents
the
results
of
the
first
phase
of
the
work
of
the
language
structure
group.
the
goal
of
this
work
is
to
arrive
at
a
proper
structure
for
a
machine-independent
problem-defining
language,
at
the
systems
level
of
data
processing.
the
report
is
based,
for
the
most
part,
on
a
mathematical
model
called
"an
information
algebra"
developed
primarily
by
r.
bosak.
it
is
hoped
that
this
report
will
be
read
(a)
with
avid
interest
by
programming
language
designers
and
implementors,
and
all
those
interested
in
developing
a
theoretical
approach
to
data
processing;
(b)
with
interest
and
understanding
by
professional
programmers
and
systems
analysts;
and
(c)
with
appreciation
by
the
businessman-analyst-manager.
the
authors
have
not
attempted
an
exhaustive
discourse
in
this
report.
rather,
they
have
tried
to
present
a
philosophy
to
the
professional
people
who
are
vitally
concerned
with
providing
a
working
language
for
the
systems
analyst's
use.
they
trust
that
the
ideas
in
this
report
will
stimulate
others
to
think
along
similar
lines.
questions
and
comments
will
be
welcomed,
and
can
be
addressed
to
any
of
the
members
of
the
language
structure
group:
robert
bosak,
system
development
corporation;
richard
f.
clippinger,
honeywell
edp
division;
carey
dobbs,
remington
rand
univac
division;
roy
goldfinger
(chairman),
ibm
corporation;
renee
b.
jasper,
navy
management
office;
william
keating,
national
cash
register;
george
kendrick,
general
electric
company;
jean
e.
sammet,
ibm
corporation.
.b
cacm
april,
1962
.n
ca620401
jb
march
20,
1978
2:40
pm
.x
1135
5
616
1136
5
616
2710
5
616
2765
5
616
2888
5
616
2906
5
616
493
5
616
616
5
616
616
5
616
616
5
616
729
5
616
1515
6
616
288
6
616
1936
6
616
1976
6
616
2046
6
616
2046
6
616
2046
6
616
2451
6
616
2452
6
616
2715
6
616
493
6
616
616
6
616
616
6
616
616
6
616
616
6
616
616
6
616
616
6
616
616
6
616
616
6
616
657
6
616
.i
617
.t
poseidon
.w
any
computer
that
forms
part
of
a
control
system-whether
completely
automatic
or
partly
human-must
work
at
the
same
speed
as
the
control
system.
it
must
perform
its
calculations
or
data
processing
fast
enough
for
the
results
to
be
available
at
the
required
instants
in
the
action
of
the
control
system.
this
known
as
working
in
"real
time."
.b
cacm
march,
1962
.a
wheeling,
r.
f.
.n
ca620315
jb
march
20,
1978
2:51
pm
.x
617
5
617
617
5
617
617
5
617
.i
618
.t
computers-
the
key
to
total
systems
control:
an
industrial
viewpoint
.w
man-man-machine
processes
are
characterized
in
five
main
types,
and
the
markets
for
each
type
are
shown
for
1950
and
1960
and
estimated
for
1970.
.b
cacm
march,
1962
.a
carlson,
w.
m.
.n
ca620314
jb
march
20,
1978
2:53
pm
.x
618
5
618
618
5
618
618
5
618
.i
619
.t
retrieval
of
misspelled
names
in
an
airlines
passenger
record
system
.w
this
paper
discusses
the
limited
problem
of
recognition
and
retrieval
of
a
given
misspelled
name
from
among
a
roster
of
several
hundred
names,
such
as
the
reservation
inventory
for
a
given
flight
of
a
large
jet
airliner.
a
program
has
been
developed
and
operated
on
the
telefile
(a
stored-program
core
and
drum
memory
solid-state
computer)
which
will
retrieve
passengers'
records
successfully,
despite
significant
misspellings
either
at
original
entry
time
or
at
retrieval
time.
the
procedure
involves
an
automatic
scoring
technique
which
matches
the
names
in
a
condensed
form.
only
those
few
names
most
closely
resembling
the
requested
name,
with
their
phone
numbers
annexed,
are
presented
for
the
agents
final
manual
selecton.
the
program
has
successfully
isolated
and
retrieved
names
which
were
subjected
to
a
number
of
unusual
(as
well
as
usual)
misspellings.
.b
cacm
march,
1962
.a
davidson,
l.
.n
ca620313
jb
march
20,
1978
2:59
pm
.x
1112
5
619
1592
5
619
2111
5
619
2339
5
619
440
5
619
619
5
619
619
5
619
619
5
619
830
6
619
982
6
619
1112
6
619
1112
6
619
1112
6
619
1592
6
619
1592
6
619
440
6
619
619
6
619
619
6
619
619
6
619
619
6
619
619
6
619
.i
620
.t
ratfact
(algorithm
78)
.b
cacm
march,
1962
.a
halstead,
m.
h.
.n
ca620312
jb
march
20,
1978
3:00
pm
.x
620
5
620
620
5
620
620
5
620
.i
621
.t
romberg
integration
(algorithm
60)
.b
cacm
march,
1962
.a
thacher
jr.,
h.
c.
.n
ca620311
jb
march
20,
1978
3:01
pm
.x
1040
5
621
1352
5
621
2040
5
621
621
5
621
621
5
621
621
5
621
834
6
621
872
6
621
885
6
621
1040
6
621
1092
6
621
1241
6
621
1241
6
621
1273
6
621
1273
6
621
1352
6
621
1356
6
621
324
6
621
324
6
621
429
6
621
570
6
621
587
6
621
621
6
621
621
6
621
621
6
621
786
6
621
.i
622
.t
optimal
classification
of
objects
(algorithm
83)
.b
cacm
march,
1962
.a
mayoh,
b.
h.
.n
ca620310
jb
march
20,
1978
3:02
pm
.x
622
5
622
622
5
622
622
5
622
.i
623
.t
economising
a
sequence
2
(algorithm
82)
.b
cacm
march,
1962
.a
mayoh,
b.
h.
.n
ca620309
jb
march
20,
1978
3:03
pm
.x
623
5
623
623
5
623
623
5
623
.i
624
.t
economising
a
sequence
1
(algorithm
81)
.b
cacm
march,
1962
.a
mayoh,
b.
h.
.n
ca620308
jb
march
20,
1978
3:04
pm
.x
624
5
624
624
5
624
624
5
624
.i
625
.t
reciprocal
gamma
function
of
real
argument
(algorithm
80)
.b
cacm
march,
1962
.a
holsten,
w.
.n
ca620307
jb
march
20,
1978
3:05
pm
.x
625
5
625
625
5
625
625
5
625
.i
626
.t
a
method
of
representation,
storage
and
retrieval
of
13
random
codes
in
a
4-digit
number
or
16
random
codes
in
a
5-digit
number
.b
cacm
march,
1962
.a
foster,
m.
b.
.n
ca620306
jb
march
20,
1978
3:07
pm
.x
626
5
626
626
5
626
626
5
626
.i
627
.t
knotted
list
structures
.b
cacm
march,
1962
.a
weizenbaum,
j.
.n
ca620305
jb
march
20,
1978
3:07
pm
.x
249
4
627
254
4
627
272
4
627
1024
4
627
1050
4
627
1051
4
627
1102
4
627
1102
4
627
1109
4
627
1132
4
627
1140
4
627
1188
4
627
1306
4
627
1390
4
627
1393
4
627
1464
4
627
1486
4
627
1491
4
627
1549
4
627
1549
4
627
1706
4
627
1767
4
627
1781
4
627
1787
4
627
1826
4
627
1878
4
627
1949
4
627
321
4
627
378
4
627
2023
4
627
2059
4
627
2060
4
627
2126
4
627
2155
4
627
2168
4
627
435
4
627
437
4
627
463
4
627
483
4
627
491
4
627
2719
4
627
2723
4
627
2732
4
627
2838
4
627
2842
4
627
2855
4
627
2879
4
627
560
4
627
583
4
627
3073
4
627
3077
4
627
3080
4
627
3106
4
627
3112
4
627
627
4
627
627
4
627
627
4
627
631
4
627
632
4
627
642
4
627
644
4
627
653
4
627
680
4
627
761
4
627
762
4
627
763
4
627
106
4
627
123
4
627
140
4
627
919
4
627
989
4
627
106
5
627
196
5
627
1050
5
627
210
5
627
1549
5
627
2723
5
627
2882
5
627
627
5
627
627
5
627
627
5
627
731
5
627
793
5
627
849
6
627
106
6
627
106
6
627
1051
6
627
1549
6
627
1749
6
627
209
6
627
209
6
627
1826
6
627
210
6
627
210
6
627
367
6
627
2198
6
627
2452
6
627
2651
6
627
406
6
627
627
6
627
627
6
627
627
6
627
627
6
627
627
6
627
627
6
627
731
6
627
731
6
627
753
6
627
.i
628
.t
on
a
floating-point
number
representation
for
use
with
algorithmic
languages
.b
cacm
march,
1962
.a
grau,
a.
a.
.n
ca620304
jb
march
20,
1978
3:09
pm
.x
628
5
628
628
5
628
628
5
628
.i
629
.t
on
a
wired-in
binary-to-decimal
conversion
scheme
.b
cacm
march,
1962
.a
lynch,
w.
c.
.n
ca620303
jb
march
20,
1978
3:10
pm
.x
629
5
629
629
5
629
629
5
629
.i
630
.t
an
evaluation
of
autocode
readability
.w
of
the
many
requirements
of
an
autocode,
the
pair
of
requirements
"easy
to
read"
and
"easy
to
write"
are
not
often
compatible.
this
paper
argues
that
readability
can
be
added
automatically
in
the
translation
process
so
that
the
programmer
can
enjoy
the
utmost
economy
of
expression,
while
for
management
a
full
and
valid
cobol
version
is
printed
to
give
all
the
advantages
of
readability
and
compatibility.
.b
cacm
march,
1962
.a
ellis,
p.
v.
.n
ca620302
jb
march
20,
1978
3:15
pm
.x
630
5
630
630
5
630
630
5
630
.i
631
.t
automatic-programming-language
translation
through
syntactical
analysis*
.b
cacm
march,
1962
.a
ledley,
r.s.
wilson,
j.
b.
.n
ca620301
jb
march
20,
1978
3:17
pm
.x
249
4
631
254
4
631
272
4
631
1046
4
631
1102
4
631
1105
4
631
1109
4
631
1139
4
631
1140
4
631
1140
4
631
1188
4
631
1234
4
631
1263
4
631
1265
4
631
1306
4
631
1464
4
631
1491
4
631
1496
4
631
1767
4
631
1781
4
631
1781
4
631
1787
4
631
1824
4
631
1949
4
631
321
4
631
2059
4
631
2126
4
631
2126
4
631
2546
4
631
435
4
631
437
4
631
463
4
631
464
4
631
483
4
631
491
4
631
2732
4
631
560
4
631
583
4
631
584
4
631
3073
4
631
627
4
631
631
4
631
631
4
631
632
4
631
642
4
631
644
4
631
653
4
631
653
4
631
680
4
631
680
4
631
761
4
631
762
4
631
763
4
631
763
4
631
795
4
631
799
4
631
123
4
631
140
4
631
919
4
631
945
4
631
989
4
631
196
5
631
1139
5
631
1265
5
631
1665
5
631
404
5
631
631
5
631
631
5
631
631
5
631
763
5
631
196
6
631
1781
6
631
224
6
631
224
6
631
378
6
631
399
6
631
404
6
631
404
6
631
404
6
631
412
6
631
438
6
631
464
6
631
464
6
631
3184
6
631
631
6
631
631
6
631
631
6
631
631
6
631
635
6
631
799
6
631
.i
632
.t
vectorcardiographic
diagnosis
with
the
aid
of
algol
.b
cacm
february,
1962
.a
forsythe,
g.
e.
von
der
groeben,
j.
toole,
j.
g.
.n
ca620211
jb
march
20,
1978
3:41
pm
.x
249
4
632
254
4
632
272
4
632
1102
4
632
1109
4
632
1140
4
632
1188
4
632
1306
4
632
1464
4
632
1491
4
632
1767
4
632
1781
4
632
1787
4
632
1949
4
632
321
4
632
2059
4
632
2126
4
632
435
4
632
437
4
632
463
4
632
483
4
632
491
4
632
2732
4
632
560
4
632
583
4
632
3073
4
632
627
4
632
631
4
632
632
4
632
642
4
632
644
4
632
653
4
632
680
4
632
761
4
632
762
4
632
763
4
632
123
4
632
140
4
632
919
4
632
989
4
632
196
5
632
632
5
632
632
5
632
632
5
632
.i
633
.t
simulation
and
analysis
of
biochemical
systems
(iii.
analysis
and
pattern
recognition)
.b
cacm
february,
1962
.a
garfinkel,
d.
polk,
w.
higgins,
j.
j.
ochser,
r.
t.
.n
ca620210
jb
march
20,
1978
3:43
pm
.x
238
4
633
633
4
633
633
4
633
643
4
633
238
5
633
633
5
633
633
5
633
633
5
633
643
5
633
238
6
633
633
6
633
633
6
633
643
6
633
.i
634
.t
manipulation
of
trees
in
information
retrieval*
.b
cacm
february,
1962
.a
salton,
g.
.n
ca620209
jb
march
20,
1978
3:44
pm
.x
1087
4
634
634
4
634
931
5
634
1324
5
634
329
5
634
634
5
634
634
5
634
634
5
634
202
6
634
396
6
634
634
6
634
634
6
634
652
6
634
653
6
634
.i
635
.t
a
note
on
multiplying
boolean
matrices
.b
cacm
february,
1962
.a
baker,
j.
j.
.n
ca620208
jb
march
20,
1978
3:45
pm
.x
1151
5
635
1265
5
635
2769
5
635
635
5
635
635
5
635
635
5
635
404
6
635
464
6
635
3184
6
635
631
6
635
635
6
635
635
6
635
635
6
635
.i
636
.t
tape
splitting
in
an
iterative
program
.b
cacm
february,
1962
.a
weisert,
c.
.n
ca620207
jb
march
20,
1978
3:46
pm
.x
1117
5
636
636
5
636
636
5
636
636
5
636
861
6
636
862
6
636
636
6
636
.i
637
.t
a
neliac-generated
7090-1401
compiler
.w
neliac
systems
for
several
different
machines
have
been
generated
using
the
original
neliac
system
developed
at
the
naval
electronics
laboratory,
san
diego,
in
1958.
a
basic
"bootstrap"
process
was
used
to
generate
all
but
the
first,
i.e.
the
systems
were
described
in
the
neliac
language
and
generated
by
an
existing
neliac
compiler.
this
experience
has
shown
there
is
no
inherent
difficulty
in
"building
compilers
with
compilers";
indeed,
it
pointed
out
many
advantages
in
using
a
pol
for
constructing
programming
systems.
this
report
presents
the
results
of
a
project
completed
in
may,
1961
in
which
the
neliac
system
was
used
to
generate
a
compiler
for
the
ibm
1401.
the
1401
compiler,
which
runs
on
the
7090
and
produces
1401
programs,
was
described
in
the
neliac
language
and
generated
with
7090
neliac
system.
the
reduction
in
programming
time
and
the
improvement
in
documentation
of
the
system
were
very
significant.
.b
cacm
february,
1962
.a
watt,
j.
b.
wattenburg,
w.
h.
.n
ca620206
jb
march
20,
1978
3:52
pm
.x
1781
4
637
637
4
637
637
4
637
123
4
637
123
5
637
165
5
637
637
5
637
637
5
637
637
5
637
.i
638
.t
surge:
a
recoding
of
the
cobol
merchandise
control
algorithm
.b
cacm
february,
1962
.a
longo,
l.
f.
.n
ca620205
jb
march
20,
1978
3:53
pm
.x
638
4
638
300
5
638
638
5
638
638
5
638
638
5
638
.i
639
.t
difference
expression
coefficients
(algorithm
79)
.b
cacm
february,
1962
.a
giammo,
t.
p.
.n
ca620204
jb
march
20,
1978
3:54
pm
.x
639
5
639
639
5
639
639
5
639
.i
640
.t
rational
roots
of
polynomials
with
integer
coefficients
(algorithm
78)
.b
cacm
february,
1962
.a
perry,
c.
.n
ca620203
jb
march
20,
1978
3:55
pm
.x
640
5
640
640
5
640
640
5
640
.i
641
.t
interpolation,
differentiation,
and
integration
(algorithm
77)
.b
cacm
february,
1962
.a
hennion,
p.
e.
.n
ca620202
jb
march
20,
1978
3:56
pm
.x
641
5
641
641
5
641
641
5
641
.i
642
.t
an
introduction
to
algol
.b
cacm
february,
1962
.a
schwarz,
h.
r.
.n
ca620201
jb
march
20,
1978
3:57
pm
.x
205
4
642
210
4
642
214
4
642
249
4
642
254
4
642
272
4
642
1102
4
642
1109
4
642
1140
4
642
1188
4
642
1306
4
642
1464
4
642
1491
4
642
1767
4
642
1781
4
642
1787
4
642
1949
4
642
1982
4
642
321
4
642
398
4
642
2059
4
642
2126
4
642
435
4
642
437
4
642
463
4
642
483
4
642
491
4
642
2732
4
642
560
4
642
583
4
642
3073
4
642
627
4
642
631
4
642
632
4
642
642
4
642
642
4
642
644
4
642
653
4
642
669
4
642
680
4
642
761
4
642
762
4
642
763
4
642
100
4
642
123
4
642
123
4
642
140
4
642
164
4
642
919
4
642
989
4
642
196
5
642
1
5
642
1173
5
642
1188
5
642
642
5
642
642
5
642
642
5
642
196
6
642
642
6
642
642
6
642
.i
643
.t
simulation
and
analysis
of
biochemcial
systems
(ii.
solution
of
differential
equations)
.b
cacm
january,
1962
.a
larson,
r.
sellers,
p.
meyer,
r.
.n
ca620116
jb
march
20,
1978
3:58
pm
.x
238
4
643
633
4
643
643
4
643
643
4
643
238
5
643
633
5
643
643
5
643
643
5
643
643
5
643
238
6
643
633
6
643
643
6
643
643
6
643
.i
644
.t
a
string
language
for
symbol
manipulation
based
on
algol
60
.w
an
artificial
computer
programming
language
is
proposed
for
describing
the
manipulation
of
strings
of
characters
and
symbols.
the
concept
of
strings,
introduced
in
the
algol
60
report,
is
extended
by
adding:
(1)
the
declaration
of
strings,
substrings,
and
string
arrays
with
explicit
lengths;
(2)
the
ability
to
concatenate
and
shift
strings;
and
(3)
the
ranking
of
symbols
for
comparing
stings
in
boolean
relations.
a
primer
or
informal
description
of
the
language
is
followed
by
examples,
a
description
of
experiments
with
the
language
on
an
ibm
704
computer,
and
a
formal
description
which,
taken
with
the
algol
60
report,
defines
the
proposed
string
language.
.b
cacm
january,
1962
.a
wegstein,
j.
h.
youden,
w.
w.
.n
ca620115
jb
march
20,
1978
4:02
pm
.x
249
4
644
254
4
644
272
4
644
1102
4
644
1109
4
644
1140
4
644
1188
4
644
1306
4
644
1464
4
644
1491
4
644
1767
4
644
1781
4
644
1787
4
644
1949
4
644
321
4
644
2059
4
644
2126
4
644
435
4
644
437
4
644
463
4
644
483
4
644
491
4
644
2732
4
644
560
4
644
583
4
644
3073
4
644
627
4
644
631
4
644
632
4
644
642
4
644
644
4
644
644
4
644
644
4
644
653
4
644
680
4
644
761
4
644
762
4
644
763
4
644
123
4
644
140
4
644
919
4
644
989
4
644
196
5
644
1084
5
644
206
5
644
207
5
644
644
5
644
644
5
644
644
5
644
868
6
644
603
6
644
644
6
644
669
6
644
791
6
644
797
6
644
.i
645
.t
invrs
(algorithm
66)
.b
cacm
january,
1962
.a
randell,
b.
broyden,
c.
g.
.n
ca620114
jb
march
20,
1978
4:04
pm
.x
645
5
645
645
5
645
645
5
645
.i
646
.t
inverse
of
a
finite
segment
of
the
hilbert
matrix
(algorithm
50)
.b
cacm
january,
1962
.a
randell,
b.
.n
ca620113
jb
march
20,
1978
4:31
pm
.x
646
5
646
646
5
646
646
5
646
.i
647
.t
numerical
solution
of
the
polynomial
equation
(algorithm
30)
.b
cacm
january,
1962
.a
cohen,
k.
j.
.n
ca620112
jb
march
20,
1978
4:32
pm
.x
647
5
647
647
5
647
647
5
647
.i
648
.t
sorting
procedures
(algorithm
76)
.b
cacm
january,
1962
.a
flores,
i.
.n
ca620111
jb
march
20,
1978
4:33
pm
.x
648
5
648
648
5
648
648
5
648
.i
649
.t
factors
(algorithm
75)
.b
cacm
january,
1962
.a
peck,
j.
e.
l.
.n
ca620110
jb
march
20,
1978
4:34
pm
.x
649
5
649
649
5
649
649
5
649
.i
650
.t
curve
fitting
with
constraints
(algorithm
74)
.b
cacm
january,
1962
.a
peck,
j.
e.
l.
.n
ca620109
jb
march
20,
1978
4:35
pm
.x
650
5
650
650
5
650
650
5
650
.i
651
.t
a
survey
of
languages
and
systems
for
information
retrieval
.b
cacm
january,
1962
.a
grems,
m.
.n
ca620108
jb
march
20,
1978
4:36
pm
.x
651
5
651
651
5
651
651
5
651
.i
652
.t
use
of
semantic
structure
in
information
systems
.b
cacm
january,
1962
.a
sable,
j.
d.
.n
ca620107
jb
march
20,
1978
4:37
pm
.x
1324
5
652
652
5
652
652
5
652
652
5
652
634
6
652
652
6
652
653
6
652
.i
653
.t
translation
of
retrieval
requests
couched
in
a
"semiformal"
english-like
language*
.b
cacm
january,
1962
.a
cheatham
jr.,
t.
e.
warshall,
s.
.n
ca620106
jb
march
20,
1978
4:39
pm
.x
249
4
653
254
4
653
272
4
653
1046
4
653
1102
4
653
1105
4
653
1109
4
653
1139
4
653
1140
4
653
1140
4
653
1188
4
653
1234
4
653
1263
4
653
1265
4
653
1306
4
653
1464
4
653
1491
4
653
1496
4
653
1767
4
653
1781
4
653
1781
4
653
1787
4
653
1824
4
653
1949
4
653
321
4
653
2059
4
653
2126
4
653
2126
4
653
2546
4
653
435
4
653
437
4
653
463
4
653
464
4
653
483
4
653
491
4
653
2732
4
653
560
4
653
583
4
653
584
4
653
3073
4
653
627
4
653
631
4
653
631
4
653
632
4
653
642
4
653
644
4
653
653
4
653
653
4
653
680
4
653
680
4
653
761
4
653
762
4
653
763
4
653
763
4
653
795
4
653
799
4
653
123
4
653
140
4
653
919
4
653
945
4
653
989
4
653
196
5
653
1324
5
653
404
5
653
653
5
653
653
5
653
653
5
653
892
5
653
634
6
653
652
6
653
653
6
653
653
6
653
656
6
653
.i
654
.t
language
problems
posed
by
heavily
structured
data
.b
cacm
january,
1962
.a
barnes,
r.
f.
.n
ca620105
jb
march
20,
1978
4:40
pm
.x
654
5
654
654
5
654
654
5
654
.i
655
.t
comit
as
an
ir
language
.w
many
of
the
features
that
make
comit
a
good
all
around
symbol
manipulation
language
also
render
it
well
suited
to
various
types
of
information
retrieval
programs.
presented
here
is
a
general
discussion
of
this
unique
and
different
programming
language
and
an
examination
of
some
of
its
applications.
.b
cacm
january,
1962
.a
yngve,
v.
h.
.n
ca620104
jb
march
20,
1978
4:46
pm
.x
1145
5
655
655
5
655
655
5
655
655
5
655
655
6
655
.i
656
.t
an
information
system
with
the
ability
to
extract
intelligence
from
data
.b
cacm
january,
1962
.a
wang,
t.
l.
.n
ca620103
jb
march
20,
1978
4:47
pm
.x
1309
5
656
656
5
656
656
5
656
656
5
656
892
5
656
653
6
656
656
6
656
656
6
656
.i
657
.t
information
structures
for
processing
and
retrieving
.b
cacm
january,
1962
.a
colilla,
r.
a.
sams,
b.
h.
.n
ca620102
jb
march
20,
1978
4:48
pm
.x
657
4
657
657
4
657
1136
5
657
279
5
657
409
5
657
657
5
657
657
5
657
657
5
657
493
6
657
616
6
657
657
6
657
.i
658
.t
discussion-the
pros
and
cons
of
a
special
ir
language
.b
cacm
january,
1962
.a
sammet,
j.
e.
ohlman,
h.
bohnest,
h.
g.
.n
ca620101
jb
march
20,
1978
4:50
pm
.x
658
5
658
658
5
658
658
5
658
.i
659
.t
reversion
of
series
(algorithm
193)
.b
cacm
december,
1963
.a
thacher
jr.,
h.
c.
.n
ca631215
jb
march
23,
1978
8:08
pm
.x
1121
4
659
659
4
659
964
4
659
659
5
659
659
5
659
659
5
659
759
5
659
.i
660
.t
more
test
matrices
for
determinants
and
inverses
(pracnique)
.b
cacm
december,
1963
.a
englar,
t.
s.
.n
ca631214
jb
march
13,
1978
2:46
pm
.x
660
5
660
660
5
660
660
5
660
.i
661
.t
indexing
and
the
lambda-notation
.w
some
methods
of
indexing
sequentially
stored
elements
of
sparse
multi-dimensional
arrays
are
described
in
the
scheme
a
notation.
.b
cacm
december,
1963
.a
barnett,
m.
p.
.n
ca631213
jb
march
13,
1978
2:51
pm
.x
661
5
661
661
5
661
661
5
661
.i
662
.t
shuttle
sort
(algorithm
175)
.b
cacm
december,
1963
.a
juelich,
o.
c.
.n
ca631212
jb
march
13,
1978
2:52
pm
.x
662
5
662
662
5
662
662
5
662
.i
663
.t
determinant
(algorithm
159)
.b
cacm
december,
1963
.a
lapidus,
a.
.n
ca631211
jb
march
13,
1978
2:53
pm
.x
663
5
663
663
5
663
663
5
663
.i
664
.t
assignment
(algorithm
27)
.b
cacm
december,
1963
.a
witty,
r.
d.
.n
ca631210
jb
march
13,
1978
2:54
pm
.x
664
5
664
664
5
664
664
5
664
.i
665
.t
gauss-seidel
(algorithm
220)
.b
cacm
december,
1963
.a
shantz,
p.
w.
.n
ca631209
jb
march
13,
1978
2:55
pm
.x
665
5
665
665
5
665
665
5
665
.i
666
.t
topological
ordering
for
pert
networks
(algorithm
219)
.b
cacm
december,
1963
.a
kase,
r.
h.
.n
ca631208
jb
march
13,
1978
2:56
pm
.x
1916
5
666
666
5
666
666
5
666
666
5
666
1533
6
666
666
6
666
.i
667
.t
kutta
merson
(algorithm
218)
.b
cacm
december,
1963
.a
lukehart,
p.
m.
.n
ca631207
jb
march
13,
1978
2:57
pm
.x
667
5
667
667
5
667
667
5
667
.i
668
.t
minimum
excess
cost
curve
(algorithm
217)
.b
cacm
december,
1963
.a
briggs,
w.
a.
.n
ca631206
jb
march
13,
1978
2:58
pm
.x
668
5
668
668
5
668
668
5
668
.i
669
.t
a
specification
of
jovial
.b
cacm
december,
1963
.a
shaw,
c.
j.
.n
ca631205
jb
march
13,
1978
2:59
pm
.x
205
4
669
210
4
669
214
4
669
1086
4
669
1132
4
669
1234
4
669
1263
4
669
1265
4
669
1270
4
669
1323
4
669
1358
4
669
1379
4
669
1380
4
669
1453
4
669
1464
4
669
1484
4
669
1491
4
669
1498
4
669
1613
4
669
1614
4
669
1781
4
669
1781
4
669
1825
4
669
1860
4
669
1982
4
669
398
4
669
2083
4
669
2178
4
669
2179
4
669
2252
4
669
2325
4
669
2341
4
669
2546
4
669
2645
4
669
2652
4
669
2684
4
669
2842
4
669
2929
4
669
2934
4
669
3069
4
669
642
4
669
669
4
669
669
4
669
669
4
669
679
4
669
691
4
669
761
4
669
100
4
669
123
4
669
164
4
669
949
4
669
989
4
669
1
5
669
1084
5
669
1379
5
669
1625
5
669
1945
5
669
410
5
669
3184
5
669
669
5
669
669
5
669
669
5
669
823
6
669
868
6
669
914
6
669
915
6
669
917
6
669
984
6
669
989
6
669
990
6
669
1012
6
669
1084
6
669
1098
6
669
1122
6
669
1138
6
669
1139
6
669
1141
6
669
1200
6
669
1223
6
669
1248
6
669
1263
6
669
1265
6
669
1336
6
669
1396
6
669
1455
6
669
1477
6
669
1477
6
669
1487
6
669
1491
6
669
1496
6
669
483
6
669
3184
6
669
584
6
669
603
6
669
644
6
669
669
6
669
669
6
669
669
6
669
669
6
669
680
6
669
761
6
669
763
6
669
791
6
669
797
6
669
.i
670
.t
some
legal
implications
of
the
use
of
computers
in
the
banking
business
.w
the
introduction
of
computers
in
to
the
banking
business
has
a
wide
variety
of
legal
implications
that
merit
careful
attention
at
this
very
early
stage.
the
industry
is
highly
regulated
by
government
and,
hence,
is
subject
to
many
statutes
and
regulations.
it
also
is
affected
by
important
common
law
rules
established
by
courts.
the
legal
ramifications
involve
not
only
the
mechanization
itself,
but
also
the
very
significant,
economically
attractive
phenomenon
of
off
premises
processing.
it
is
essential
to
identify
and
provide
for
many
legal
aspects
right
now,
before
systems
and
practices
crystallize,
in
order
to
avoid
the
later
impact
of
unanticipated
physical
complications
and
expense.
the
legal
aspects
of
computerization
in
the
banking
business
are
especially
diverse.
in
some
states,
there
might
be
the
basic
question
whether
banks
are
authorized
by
law
to
invest
in
the
new
facilities,
either
directly
or
through
cooperatives.
more
challenging
are
questions
relating
to
off-premises
processors,
particularly
with
respect
to
the
obligation
not
to
disclose
information
concerning
a
bank's
customers,
the
adequacy
of
fidelity
bond
coverage,
the
extent
of
liability
for
improper
refusal
to
pay
a
check,
and
susceptibility
to
regulation
by
government
agencies.
also
pertinent
is
the
propriety
of
data
processing
by
banks
for
nonbank
entities
and
particularly
of
the
rendering
of
that
service
without
charge
for
bank
depositors.
.b
cacm
december,
1963
.a
freed,
r.
n.
.n
ca631204
jb
march
13,
1978
3:09
pm
.x
670
5
670
670
5
670
670
5
670
.i
671
.t
telefile-a
case
study
of
an
on-line
savings
bank
application
.w
the
development
of
an
on-line
computer
system
for
a
savings
bank
institution
is
traced
from
the
early
conceptual
needs
of
the
bank
to
the
consummation
of
design
by
the
teleregister
corporation.
both
bank
and
equipment
criteria
are
specified
which
led
to
the
development
of
the
telefile
system
of
the
teleregister
corporation.
operation
of
the
on-line
and
off-line
programs
are
described
and
statistics
are
cited
for
reliability
and
performance
of
the
system.
benefits
to
the
bank
are
discussed
from
the
banker's
point
of
view;
an
indication
of
future
trends
in
the
on-line
savings
bank
field
is
also
discussed.
.b
cacm
december,
1963
.a
sanders,
m.
.n
ca631203
jb
march
13,
1978
3:13
pm
.x
671
5
671
671
5
671
671
5
671
.i
672
.t
recent
developments
affecting
adp
in
tax
administration
.b
cacm
december,
1963
.a
leibowitz,
g.
j.
.n
ca631202
jb
march
13,
1978
3:14
pm
.x
672
5
672
672
5
672
672
5
672
.i
673
.t
account
classification
at
automating
banks
.b
cacm
december,
1963
.a
eckert,
j.
b.
.n
ca631201
jb
march
13,
1978
3:15
pm
.x
673
5
673
673
5
673
673
5
673
.i
674
.t
application
of
ibm
1620
edp
methods
to
the
calculation
of
the
formation
constants
of
complex
irons
.b
cacm
november,
1963
.a
andrews,
a.
c.
hassler,
j.
decou,
f.
.n
ca631118
jb
march
13,
1978
3:18
pm
.x
674
5
674
674
5
674
674
5
674
.i
675
.t
coding
clinical
laboratory
data
for
automatic
storage
and
retrieval
.w
a
series
of
clinical
laboratory
codes
have
been
developed
to
accept
and
store
urin
analysis,
blood
chemistry,
and
hematology
test
results
for
automatic
data
processing.
the
codes,
although
constructed
as
part
of
a
computerized
hospital
simulation,
have
been
able
to
handle
the
results
of
every
laboratory
test
that
they
have
encountered.
the
unique
feature
of
these
codes
is
that
they
can
accept
conventionally
recorded
qualitative
as
well
as
quantitative
test
results.
consequently,
clinical
test
results
need
not
be
arbitrarily
stratified,
standardized,
or
altered
in
any
way
to
be
coded.
this
paper
describes
how
the
codes
were
developed
and
presents
a
listing
of
the
urin
analysis
codes.
five
criteria
used
in
developing
the
codes
are
outlined
and
the
problem
of
multiple-synonymous
terminology
is
discussed.
a
solution
to
the
problem
is
described.
flexible,
computer-produced,
composite
laboratory
reports
are
also
discussed,
along
with
reproduction
of
such
a
report.
the
paper
concludes
that
even
though
many
problems
remain
unsolved,
the
next
ten
years
could
witness
the
emergence
of
a
practical
automated
information
system
in
the
laboratory.
.b
cacm
november,
1963
.a
gross,
l.
d.
.n
ca631117
jb
march
13,
1978
3:26
pm
.x
675
5
675
675
5
675
675
5
675
.i
676
.t
on
the
computation
of
a
certain
type
of
incompletebeta
functions
.b
cacm
november,
1963
.a
tang,
i.
c.
.n
ca631116
jb
march
13,
1978
3:27
pm
.x
676
5
676
676
5
676
676
5
676
.i
677
.t
length
of
strings
for
a
merge
sort
.w
detailed
statistics
are
given
on
the
length
of
maximal
sorted
strings
which
result
form
the
first
(internal
sort)
phase
of
a
merge
sort
onto
tapes.
it
is
shown
that
the
strings
produced
by
an
alternating
method
(i.e.
one
which
produces
ascending
and
descending
strings
alternately)
tend
to
be
only
three-fourths
as
long
as
those
in
a
method
which
produces
only
ascending
strings,
contrary
to
statements
which
have
appeared
previously
in
the
literature.
a
slight
modification
of
the
read-backward
polyphase
merge
algorithm
is
therefore
suggested.
.b
cacm
november,
1963
.a
knuth,
d.
e.
.n
ca631115
jb
march
13,
1978
3:31
pm
.x
1117
4
677
2017
4
677
2146
4
677
677
4
677
860
4
677
1638
5
677
2176
5
677
2272
5
677
677
5
677
677
5
677
677
5
677
861
5
677
1638
6
677
677
6
677
677
6
677
677
6
677
.i
678
.t
optimizing
bit-time
computer
simulation
.w
a
major
component
of
a
bit-time
computer
simulation
program
is
the
boolean
compiler.
the
compiler
accepts
the
boolean
functions
representing
the
simulated
computer's
digital
circuits,
and
generates
corresponding
sets
of
machine
instructions
which
are
subsequently
executed
on
the
"host"
computer.
techniques
are
discussed
for
increasing
the
sophistication
of
the
boolean
compiler
so
as
to
optimize
bit-time
computer
simulation.
the
techniques
are
applicable
to
any
general-purpose
computer.
.b
cacm
november,
1963
.a
katz,j.
h.
.n
ca631114
jb
march
13,
1978
3:34
pm
.x
678
4
678
1030
5
678
270
5
678
1886
5
678
1939
5
678
678
5
678
678
5
678
678
5
678
1030
6
678
678
6
678
678
6
678
678
6
678
.i
679
.t
recent
improvements
in
madcap
.w
madcap
is
a
programming
language
admitting
subscripts,
superscripts
and
certain
forms
of
displayed
formulas.
the
basic
implementation
of
this
language
was
described
in
a
previous
paper
[madcap:
a
scientific
compiler
for
a
displayed
formula
textbook
language,
comm.
acm
4
(jan.
61),
31-36].
this
paper
discusses
recent
improvements
in
the
language
in
three
areas:
complex
display,
logical
control,
and
subprogramming.
in
the
area
of
complex
display,
the
most
prominent
improvements
are
a
notation
for
integration
and
for
the
binomial
coefficients.
in
the
area
of
logical
control
the
chief
new
feature
is
a
notation
for
variably
nested
looping.
the
discussion
of
subprogramming
is
focused
on
madcap's
notation
for
and
use
of
"procedures."
.b
cacm
november,
1963
.a
wells,
m.
b.
.n
ca631113
jb
march
13,
1978
3:39
pm
.x
1083
4
679
1086
4
679
1132
4
679
1234
4
679
1263
4
679
1265
4
679
1270
4
679
1323
4
679
1358
4
679
1379
4
679
1380
4
679
1396
4
679
1453
4
679
1464
4
679
1484
4
679
1491
4
679
1498
4
679
1613
4
679
1614
4
679
1781
4
679
1825
4
679
1860
4
679
2083
4
679
2178
4
679
2179
4
679
2252
4
679
2325
4
679
2341
4
679
2546
4
679
2645
4
679
2652
4
679
2684
4
679
2842
4
679
2929
4
679
2934
4
679
3069
4
679
669
4
679
679
4
679
679
4
679
679
4
679
691
4
679
761
4
679
949
4
679
989
4
679
407
5
679
21
5
679
3184
5
679
679
5
679
679
5
679
679
5
679
.i
680
.t
an
error-correcting
parse
algorithm
.b
cacm
november,
1963
.a
irons,
e.
t.
.n
ca631112
jb
march
13,
1978
3:40
pm
.x
249
4
680
254
4
680
272
4
680
1046
4
680
1102
4
680
1105
4
680
1109
4
680
1139
4
680
1140
4
680
1140
4
680
1188
4
680
1234
4
680
1263
4
680
1265
4
680
1306
4
680
1464
4
680
1491
4
680
1496
4
680
1767
4
680
1781
4
680
1781
4
680
1787
4
680
1824
4
680
1949
4
680
321
4
680
2059
4
680
2126
4
680
2126
4
680
2546
4
680
435
4
680
437
4
680
463
4
680
464
4
680
483
4
680
491
4
680
2732
4
680
560
4
680
583
4
680
584
4
680
3073
4
680
627
4
680
631
4
680
631
4
680
632
4
680
642
4
680
644
4
680
653
4
680
653
4
680
680
4
680
680
4
680
761
4
680
762
4
680
763
4
680
763
4
680
795
4
680
799
4
680
123
4
680
140
4
680
919
4
680
945
4
680
989
4
680
196
5
680
1225
5
680
1350
5
680
1646
5
680
1781
5
680
1945
5
680
2650
5
680
2698
5
680
2708
5
680
404
5
680
3093
5
680
680
5
680
680
5
680
680
5
680
823
6
680
830
6
680
830
6
680
123
6
680
196
6
680
914
6
680
915
6
680
917
6
680
919
6
680
984
6
680
987
6
680
989
6
680
990
6
680
990
6
680
1007
6
680
1012
6
680
1012
6
680
1012
6
680
1046
6
680
1072
6
680
1084
6
680
1098
6
680
1122
6
680
1131
6
680
1138
6
680
1139
6
680
1139
6
680
1140
6
680
1141
6
680
1149
6
680
1179
6
680
1198
6
680
1200
6
680
1215
6
680
1223
6
680
1223
6
680
1225
6
680
1265
6
680
1265
6
680
1265
6
680
1303
6
680
1323
6
680
1336
6
680
1358
6
680
1366
6
680
1396
6
680
1399
6
680
1421
6
680
1455
6
680
1460
6
680
1462
6
680
1463
6
680
1467
6
680
1468
6
680
1477
6
680
1477
6
680
1477
6
680
1477
6
680
1487
6
680
1491
6
680
1491
6
680
1491
6
680
1491
6
680
1491
6
680
1496
6
680
1496
6
680
1531
6
680
1535
6
680
1565
6
680
1601
6
680
1602
6
680
1613
6
680
1614
6
680
1626
6
680
1641
6
680
1647
6
680
1781
6
680
1787
6
680
1787
6
680
1788
6
680
205
6
680
224
6
680
249
6
680
288
6
680
316
6
680
381
6
680
398
6
680
2110
6
680
2111
6
680
2111
6
680
11
6
680
2179
6
680
2534
6
680
2556
6
680
2556
6
680
2708
6
680
404
6
680
410
6
680
463
6
680
464
6
680
483
6
680
483
6
680
3184
6
680
3188
6
680
576
6
680
584
6
680
584
6
680
600
6
680
669
6
680
680
6
680
680
6
680
680
6
680
680
6
680
680
6
680
680
6
680
680
6
680
680
6
680
680
6
680
691
6
680
763
6
680
763
6
680
799
6
680
799
6
680
.i
681
.t
flexible
abbreviation
of
words
in
a
computer
language
.b
cacm
november,
1963
.a
lomis,
r.
g.
rubin,
j.
.n
ca631111
jb
march
13,
1978
3:42
pm
.x
681
5
681
681
5
681
681
5
681
.i
682
.t
recursive
programming
in
fortran
ii
.b
cacm
november,
1963
.a
ayers,
j.
a.
.n
ca631110
jb
march
13,
1978
3:43
pm
.x
682
5
682
682
5
682
682
5
682
.i
683
.t
a
serial
technique
to
determine
minimum
paths
.b
cacm
november,
1963
.a
weimer,
d.
l.
.n
ca631109
jb
march
13,
1978
3:44
pm
.x
683
5
683
683
5
683
683
5
683
.i
684
.t
interpolation,
differentiation,
and
integration
(algorithm
77)
.b
cacm
november,
1963
.a
hennion,
p.
e.
.n
ca631108
jb
march
13,
1978
3:45
pm
.x
684
5
684
684
5
684
684
5
684
.i
685
.t
euler
summation
(algorithm
8)
.b
cacm
november,
1963
.a
thacher
jr.,
h.
c.
.n
ca631108
jb
march
13,
1978
3:46
pm
.x
685
5
685
685
5
685
685
5
685
.i
686
.t
smooth
(algorithm
216)
.b
cacm
november,
1963
.a
george,
r.
.n
ca631106
jb
march
13,
1978
3:47
pm
.x
686
5
686
686
5
686
686
5
686
.i
687
.t
shanks
(algorithm
215)
.b
cacm
november,
1963
.a
thacher
jr.,
h.
c.
.n
ca631105
jb
march
13,
1978
3:48
pm
.x
687
5
687
687
5
687
687
5
687
.i
688
.t
q-bessel
functions
in(t)(algorithm
214)
.b
cacm
november,
1963
.a
simoes
pereira,
j.
m.
s.
.n
ca631104
jb
march
13,
1978
3:49
pm
.x
688
5
688
688
5
688
688
5
688
.i
689
.t
report
of
a
visit
to
discuss
common
programming
languages
in
czechoslovakia
and
poland,
1963
.b
cacm
november,
1963
.a
gosden,
j.
a.
merner,
j.
n.
gay,
r.
e.
jones,
j.
l.
christopher,
j.
s.
.n
ca631103
jb
march
13,
1978
3:51
pm
.x
1349
4
689
323
4
689
689
4
689
689
4
689
689
4
689
217
5
689
323
5
689
3197
5
689
689
5
689
689
5
689
689
5
689
.i
690
.t
usa
participation
in
an
international
standard
glossary
on
information
processing
.b
cacm
november,
1963
.a
traub,
j.
f.
.n
ca631102
jb
march
13,
1978
3:52
pm
.x
690
4
690
690
4
690
690
4
690
929
5
690
3195
5
690
690
5
690
690
5
690
690
5
690
890
5
690
.i
691
.t
a
description
of
the
apt
language
.w
the
apt
(automatically
programmed
tools)
language
for
numerical
control
programming
is
described
using
the
metalinguistic
notation
introduced
in
the
algol
60
report.
examples
of
apt
usage
are
included.
presented
also
are
an
historical
summary
of
the
development
of
apt
and
a
statement
concerning
its
present
status.
.b
cacm
november,
1963
.a
brown,
s.
a.
drayton,
c.
e.
mittman,
b.
.n
ca631101
jb
march
13,
1978
3:59
pm
.x
1086
4
691
1132
4
691
1234
4
691
1263
4
691
1265
4
691
1270
4
691
1323
4
691
1358
4
691
1379
4
691
1380
4
691
1453
4
691
1464
4
691
1484
4
691
1491
4
691
1498
4
691
1613
4
691
1614
4
691
1781
4
691
1825
4
691
1860
4
691
1945
4
691
2083
4
691
2126
4
691
2178
4
691
2179
4
691
2252
4
691
2325
4
691
2341
4
691
2546
4
691
2645
4
691
2652
4
691
2684
4
691
2842
4
691
2929
4
691
2934
4
691
3069
4
691
669
4
691
679
4
691
691
4
691
691
4
691
761
4
691
949
4
691
989
4
691
1781
5
691
3184
5
691
691
5
691
691
5
691
691
5
691
823
5
691
123
6
691
196
6
691
919
6
691
990
6
691
1007
6
691
1046
6
691
1131
6
691
1139
6
691
1140
6
691
1149
6
691
1198
6
691
1215
6
691
1223
6
691
1265
6
691
1303
6
691
1323
6
691
1358
6
691
1366
6
691
1421
6
691
1460
6
691
1462
6
691
1463
6
691
1467
6
691
1468
6
691
1477
6
691
1491
6
691
1496
6
691
1531
6
691
1535
6
691
1565
6
691
1601
6
691
1602
6
691
1613
6
691
1614
6
691
1626
6
691
1641
6
691
1787
6
691
1788
6
691
205
6
691
224
6
691
249
6
691
288
6
691
316
6
691
381
6
691
398
6
691
11
6
691
404
6
691
410
6
691
463
6
691
464
6
691
483
6
691
3184
6
691
3188
6
691
584
6
691
600
6
691
680
6
691
691
6
691
763
6
691
799
6
691
.i
692
.t
on
the
inverse
of
a
test
matrix
.b
cacm
october,
1963
.a
stockmal,
f.
j.
.n
ca631033
jb
march
27,
1978
9:00
pm
.x
692
5
692
692
5
692
692
5
692
.i
693
.t
an
extension
of
fibonaccian
search
to
several
variables
.w
a
technique
which
uses
fibonaccian
search
concepts
has
been
developed
to
solve
optimization
problems
involving
unimodal
functions
of
several
variables.
the
technique
has
not
been
proven
to
be
optimal
in
the
sense
that
the
one-dimensional
fibonaccian
search
is.
however,
it
is
valuable
for
certain
kinds
of
calculations.
.b
cacm
october,
1963
.a
krolak,
p.
cooper,
l.
.n
ca631032
jb
march
13,
1978
4:19
pm
.x
693
5
693
693
5
693
693
5
693
.i
694
.t
a
comparison
of
disks
and
tapes
.w
the
principal
characteristics
of
current
magnetic
disks
and
tape
units
are
summarized
and
compared.
some
of
the
characteristics
of
disk
files
are
illustrated
in
a
sorting
example
and
compared
to
a
tapesort.
the
conclusion
is
presented
that
disk
files
are
competitive
to
tapes
in
some
important
applications.
.b
cacm
october,
1963
.a
hess,
h.
.n
ca631031
jb
march
13,
1978
4:21
pm
.x
694
5
694
694
5
694
694
5
694
.i
695
.t
use
of
the
disk
file
on
stretch
.w
the
paper
begins
by
briefly
describing
the
stretch
(ibm
7030)
computer
with
special
emphasis
given
to
the
organization
and
operation
of
its
input-output
equipment.
physical
characteristics
of
the
two-disk
system
(4,194,304
72-bit
words,
8
usec-per-word
transmission
rate,
etc.)
are
noted.
timing
limitations
due
to
arm
motion
and
disk
rotation
are
discussed.
applications
of
disk
usage
are
discussed
separately
for
problem
programs
and
for
systems
programs
such
as
compilers
and
the
supervisory
program.
approximately
260,000
words
of
disk
storage
are
reserved
for
the
storage
of
systems
programs
and
the
subroutine
library.
problem
programs,
however,
are
not
currently
filed
on
the
disk.
certain
programming
techniques
are
discussed
for
transmitting
words
between
disk
and
core
storage
with
minimum
delaying
and
interruption
of
the
arithmetic
unit.
dumps
on
disk
are
considered
for
both
recovery
from
computer
malfunction
and
for
mathematical
or
physical
developments
during
the
calculation.
some
comments
are
made
regarding
the
reliability,
economics,
utility
and
weaknesses
or
limitations
of
the
disk
system.
several
possible
future
applications
are
noted
which
appear
to
have
disk
connotations.
.b
cacm
october,
1963
.a
carlson,
b.
g.
voorhes,
e.
a.
.n
ca631030
jb
march
13,
1978
4:28
pm
.x
695
5
695
695
5
695
695
5
695
.i
696
.t
an
automatic
data
acquisition
and
inquiry
system
using
disk
files
.w
lockheed
missiles
and
space
company
has
installed
a
large-scale
automatic
data
acquisition
(ada)
system
which
ties
together
the
company's
manufacturing
facilities
located
in
van
nuys
and
sunnyvale,
california.
the
system
includes
over
200
remote
input
stations
which
collect
and
transmit
company
operating
data
to
a
central
data
processing
center.
two
rca
301
edp
systems
are
used
to
record
and
control
the
flow
of
data
transmitted
to
the
data
processing
center.
a
large
capacity
rca
366
data
disc
file
is
used
to
store
information
required
to
provide
up-to-date
information
in
response
to
inquiries
received
from
remotely
located
inquiry
stations.
in
addition
to
storage
of
data
on
the
disk
files,
the
system
automatically
records
all
incoming
and
outgoing
data
on
magnetic
tape
to
be
used
as
input
to
the
company's
conventional
off-line
business
data
processing
applications.
.b
cacm
october,
1963
.a
edwards,
j.
d.
.n
ca631029
jb
march
13,
1978
4:34
pm
.x
696
5
696
696
5
696
696
5
696
.i
697
.t
a
numerical
method
for
the
determination
of
moving
field
isodose
curves
for
treatment
planning
in
radiotherapy
.b
cacm
october,
1963
.a
dalrymple,
g.
v.
perez-tamayo,
r.
.n
ca631028
jb
march
13,
1978
5:19
pm
.x
697
5
697
697
5
697
697
5
697
.i
698
.t
data-dial:
two-way
communication
with
computers
from
ordinary
dial
telephones
.w
an
operating
system
is
described
which
allows
users
to
call
up
a
remotely
located
computer
from
ordinary
dial
telephones.
no
special
hardware
or
connections
are
required
at
the
users'
telephones.
input
to
the
computer
is
through
the
telephone
dial;output
from
the
computer
is
in
spoken
form.
results
of
a
test
with
telephones
in
the
boston
area
are
reported.
.b
cacm
october,
1963
.a
marill,
t.
edwards,
d.
feurzeig,
w.
.n
ca631027
jb
march
13,
1978
5:23
pm
.x
1181
5
698
698
5
698
698
5
698
698
5
698
698
6
698
.i
699
.t
a
contour-map
program
for
x-ray
crystallography
.w
a
fortran
program
is
described
for
use
with
the
ibm
7090
system
and
an
x,
y-plotter
to
produce
a
contour
map.
a
matrix
of
points
evenly
spaced
in
each
dimension
is
contoured.
scale
factors
along
the
axes
may
be
different
and
the
axes
need
not
be
perpendicular.
.b
cacm
october,
1963
.a
dayhoff,
m.
o.
.n
ca631026
jb
march
13,
1978
5:26
pm
.x
2633
5
699
699
5
699
699
5
699
699
5
699
699
6
699
.i
700
.t
hermite
interpolation
(algorithm
210)
.b
cacm
october,
1963
.a
dwyer,
t.
a.
.n
ca631025
jb
march
13,
1978
5:27
pm
.x
700
5
700
700
5
700
700
5
700
.i
701
.t
shuttle
sort
(algorithm
175)
.b
cacm
october,
1963
.a
schubert,
g.
r.
.n
ca631024
jb
march
13,
1978
5:29
pm
.x
701
5
701
701
5
701
701
5
701
.i
702
.t
assign
(algorithm
173)
.b
cacm
october,
1963
.a
filsak,
z.
vrchovecka,
l.
.n
ca631023
jb
march
13,
1978
5:31
pm
.x
702
5
702
702
5
702
702
5
702
.i
703
.t
assign
(algorithm
173)
.b
cacm
october,
1963
.a
scowen,
r.
s.
.n
ca631022
jb
march
13,
1978
5:32
pm
.x
703
5
703
703
5
703
703
5
703
.i
704
.t
combinatorial
of
m
things
taken
one
at
a
time
two
at
a
time,
up
to
n
at
a
time
(algorithm
161)
.b
cacm
october,
1963
.a
collins,
d.
h.
.n
ca631021
jb
march
13,
1978
5:34
pm
.x
704
5
704
704
5
704
704
5
704
.i
705
.t
combinatorial
of
m
things
taken
n
at
a
time
(algorithm
160)
.b
cacm
october,
1963
.a
blakely,
r.
e.
.n
ca631020
jb
march
13,
1978
5:36
pm
.x
705
5
705
705
5
705
705
5
705
.i
706
.t
fourier
series
approximation
(algorithm
157)
.b
cacm
october,
1963
.a
schubert,
g.
r.
.n
ca631019
jb
march
13,
1978
5:37
pm
.x
706
5
706
706
5
706
706
5
706
.i
707
.t
erf(x)
(algorithm
123)
.b
cacm
october,
1963
.a
ibbetson,
d.
.n
ca631018
jb
march
13,
1978
5:40
pm
.x
1583
5
707
707
5
707
707
5
707
707
5
707
831
6
707
967
6
707
1126
6
707
707
6
707
.i
708
.t
evaluation
of
the
fresnel
integrals
(algorithm
88,
89,
90)
.b
cacm
october,
1963
.a
gray,
m.
d.
.n
ca631017jb
march
13,
1978
5:45
pm
.x
708
5
708
708
5
708
708
5
708
.i
709
.t
assignment
(algorithm
27)
.b
cacm
october,
1963
.a
newhouse,
a.
.n
ca631016
jb
march
13,
1978
5:46
pm
.x
709
5
709
709
5
709
709
5
709
.i
710
.t
fresnel
integrals
(algorithm
213)
.b
cacm
october,
1963
.a
gray,
m.
d.
.n
ca631015
jb
march
13,
1978
5:47
pm
.x
710
5
710
710
5
710
710
5
710
.i
711
.t
frequency
distribution
(algorithm
212)
.b
cacm
october,
1963
.a
gray,
m.
d.
.n
ca631014
jb
march
13,
1978
5:50
pm
.x
711
5
711
711
5
711
711
5
711
.i
712
.t
hermite
interpolation
(algorithm
211)
.b
cacm
october,
1963
.a
schubert,
g.
r.
.n
ca631013
jb
march
13,
1978
5:51
pm
.x
712
5
712
712
5
712
712
5
712
.i
713
.t
lagrangian
interpolation
(algorithm
210)
.b
cacm
october,
1963
.a
schubert,
g.
r.
.n
ca631012
jb
march
13,
1978
5:52
pm
.x
713
5
713
713
5
713
713
5
713
.i
714
.t
gauss
(algorithm
209)
.b
cacm
october,
1963
.a
ibbetson,
d.
.n
ca631011
jb
march
13,
1978
5:52
pm
.x
1157
5
714
1779
5
714
1920
5
714
1944
5
714
1987
5
714
2548
5
714
714
5
714
714
5
714
714
5
714
836
6
714
1081
6
714
1561
6
714
1581
6
714
1778
6
714
1779
6
714
1779
6
714
1944
6
714
485
6
714
714
6
714
714
6
714
714
6
714
714
6
714
714
6
714
714
6
714
.i
715
.t
discrete
convolution
(algorithm
208)
.b
cacm
october,
1963
.a
foreman
jr.,
w.
t.
.n
ca631010
jb
march
13,
1978
5:53
pm
.x
715
5
715
715
5
715
715
5
715
.i
716
.t
stringsort
(algorithm
207)
.b
cacm
october,
1963
.a
boothroyd,
j.
.n
ca631009
jb
march
13,1978
5:54
pm
.x
2679
5
716
716
5
716
716
5
716
716
5
716
970
6
716
1175
6
716
1190
6
716
1228
6
716
1969
6
716
1997
6
716
308
6
716
2042
6
716
3187
6
716
507
6
716
716
6
716
783
6
716
.i
717
.t
partitioning
algorithms
for
finite
sets
.w
the
partitions
of
a
set
with
n
elements
are
represented
by
certain
n-tuples
of
positive
integers.
algorithm
are
described
which
generate
without
repetitions
the
n-tuples
corresponding
to:
(1)
all
partitions
of
the
given
set,
(2)
all
partitions
of
the
given
set
into
m
or
fewer
sets
(1
<=
m
<=
n),
and
(3)
all
partitions
of
the
given
set
into
exactly
m
sets
(1
<=
m
<=
n).
.b
cacm
october,
1963
.a
hutchinson,
g.
.n
ca631008
jb
march
13,
1978
5:57
pm
.x
717
5
717
717
5
717
717
5
717
.i
718
.t
an
experiment
in
automatic
verification
of
programs
.w
how
effective
is
a
compiler
at
replacing
explicit
verification,
and
what
is
the
cost
of
this
technique?
.b
cacm
october,
1963
.a
weinberg,
g.
m.
gressett,
g.
l.
.n
ca631007
jb
march
13,
1978
5:59
pm
.x
1053
5
718
718
5
718
718
5
718
718
5
718
435
6
718
474
6
718
718
6
718
720
6
718
.i
719
.t
variable
width
stacks
.w
character
addressable,
variable
field
computers
permit
ready
establishment
and
manipulation
of
variable
width
stacks.
single
machine
commands
may
push
variable
field
items
down
into
such
stacks
or
pop
them
up.
the
availability
of
a
variety
of
field
delimiters
allows
the
machine
to
push
down
or
pop
up
more
than
one
variable
width
item
with
one
command.
since
these
stacking
operations
can
be
made
the
basis
of
compiler
decoding
algorithms
the
proper
use
of
machines
of
this
class
for
compilation
has
advantages
over
machines
with
fixed-length
words.
.b
cacm
october,
1963
.a
rotenberg,
n.
opler,
a.
.n
ca631006
jb
march
13,
1978
6:25
pm
.x
719
5
719
719
5
719
719
5
719
.i
720
.t
format-free
input
in
fortran
.b
cacm
october,
1963
.a
bailey,
m.
j.
barnett,
m.
p.
futrelle,
r.
p.
.n
ca631005
jb
march
13,
1978
6:26
pm
.x
1053
4
720
1062
4
720
1121
4
720
1139
4
720
1265
4
720
1781
4
720
464
4
720
720
4
720
720
4
720
720
4
720
759
4
720
1053
5
720
265
5
720
464
5
720
474
5
720
720
5
720
720
5
720
720
5
720
435
6
720
474
6
720
718
6
720
720
6
720
.i
721
.t
report
on
proposed
american
standard
flowchart
symbols
for
information
processing
.w
this
paper
presents
the
essential
contents
of
the
proposed
american
standard
flowchart
symbols
for
information
processing.
this
is
the
first
proposed
standard
prepared
by
subcommittee
x3.6
on
problem
description
and
analysis
of
the
american
standards
association
(asa).
.b
cacm
october,
1963
.a
rossheim,
r.
j.
.n
ca631004
jb
march
13,
1978
6:33
pm
.x
2961
5
721
721
5
721
721
5
721
721
5
721
721
6
721
.i
722
.t
alcor
group
representation
of
algol
symbols
.b
cacm
october,
1963
.n
ca631003
jb
march
13,
1978
6:36
pm
.x
722
5
722
722
5
722
722
5
722
.i
723
.t
ecma
subset
of
algol
60
.b
cacm
october,
1963
.n
ca631002
jb
march
13,
1978
6:38
pm
.x
723
5
723
723
5
723
723
5
723
.i
724
.t
a
profile
of
the
programmer
.w
synopsis:
549
members
of
the
acm
participated
in
a
study
concerned
primarily
with
the
attitudes
of
programmers
toward
their
careers
and
jobs.
a
very
high
percentage
of
programmers
have
apparently
entered
their
careers
by
accident;
it
has
proven
a
happy
choice
for
most
and
they
expect
to
remain
in
the
field
during
the
next
five
years.
their
principal
job
satisfactions
relate
to
the
nature
of
their
work,
and
mostfind
their
jobs
offer
high
level
of
professional
interest
and
good
working
conditions.
salary
and
advancement
prospects,
however,are
not
as
satisfactory.
more
than
half
report
a
positive
attitude
toward
programmers
and
programming
on
the
part
of
their
organizations.
turnover
among
themselves
is
attributed
primarily
to
poor
management-salary
is
seen
as
the
principal
motivating
factor
in
turnover
among
other
programmers.
nature
of
the
work
offered
and
salary
are
principal
determinants
in
accepting
a
new
job.
programmers
are
less
mobile
than
expected.
programmers
tend
to
see
their
colleagues
in
a
favorable
light,
on
the
whole.
personalities
seem
to
vary
with
function,
systems
programmers
differing
from
applications
programmers.
four
principal
problems
for
programming
in
the
immediate
future
are
listed
by
participants:
languages,
personnel,
various
specific
applications
and
techniques,
and
building
programming
as
a
profession.
.b
cacm
october,
1963
.n
ca631001
jb
march
13,
1978
6:48
pm
.x
724
5
724
724
5
724
724
5
724
.i
725
.t
group
participation
computer
demonstration
.b
cacm
october,
1963
.a
mccormick,
e.
m.
.n
ca630933
jb
march
13,
1978
6:50
pm
.x
725
5
725
725
5
725
725
5
725
.i
726
.t
a
general
program
for
the
analysis
of
square
and
rectangular
lattice
designs
.w
this
paper
describes
a
general-purpose
program
that
will
handle
those
incomplete
block
designs
known
as
square
and
rectangular
lattices.
flow
diagrams
are
given
so
that
the
method
of
calculation
may
be
programmed
for
any
digital
computer.
.b
cacm
september,
1963
.a
smillie,
k.
w.
.n
ca630932
jb
march
13,
1978
6:53
pm
.x
726
5
726
726
5
726
726
5
726
.i
727
.t
on
the
approximate
solution
of
delta(u)=f(u)
.w
three-dimensional
dirichlet
problems
for
delta(u)=f(u),
fu
>=
0,
are
treated
numerically
by
an
exceptionally
fast,
exceptionally
accurate
numerical
method.
programming
details,
numerous
examples
and
mathematical
theory
are
supplied.extension
of
the
method
in
a
natural
way
to
n-dimensional
problems
is
indicated
by
means
of
a
4-dimensional
example.
.b
cacm
september,
1963
.a
greenspan,
d.
yohe,
m.
.n
ca630931
jb
march
13,
1978
6:57
pm
.x
727
5
727
727
5
727
727
5
727
.i
728
.t
computer-drawn
flowcharts*
.w
to
meet
the
need
for
improved
documentation
of
written
computer
programs,
a
simple
system
for
effective
communication
is
presented,
which
has
shown
great
promise.
the
programmer
describes
his
program
in
a
simple
format,
and
the
computer
prepares
flow
charts
and
other
cross-referenced
listings
from
this
input.
the
description
can
be
kept
up-to-date
easily,
and
the
final
output
clearly
explains
the
original
program.
the
system
has
also
proved
to
be
a
valuable
debugging
and
coding
aid.
.b
cacm
september,
1963
.a
knuth,
d.
e.
.n
ca630930
jb
march
13,
1978
7:01
pm
.x
728
4
728
728
4
728
920
5
728
1330
5
728
1348
5
728
2315
5
728
45
5
728
728
5
728
728
5
728
728
5
728
1348
6
728
1834
6
728
1987
6
728
528
6
728
728
6
728
728
6
728
728
6
728
.i
729
.t
a
generalization
of
algol
.b
cacm
september,
1963
.a
wirth,
n.
.n
ca630929
jb
march
13,
1978
7:02
pm
.x
1135
4
729
1136
4
729
1781
4
729
493
4
729
2710
4
729
2765
4
729
2888
4
729
2906
4
729
729
4
729
729
4
729
989
4
729
1037
5
729
1234
5
729
1358
5
729
288
5
729
1491
5
729
616
5
729
729
5
729
729
5
729
729
5
729
196
6
729
944
6
729
1140
6
729
1303
6
729
1460
6
729
205
6
729
321
6
729
385
6
729
400
6
729
402
6
729
404
6
729
3184
6
729
3184
6
729
3184
6
729
729
6
729
729
6
729
729
6
729
729
6
729
799
6
729
.i
730
.t
mirfag:
a
compiler
based
on
standard
mathematical
notation
and
plain
english
.w
a
pilot
version
of
the
compiler
mirfag,
now
in
operation,
is
described.
the
chief
features
of
the
system,
which
is
intended
for
the
solution
of
scientific
problems,
are
the
presentation
of
mathematical
formulas
entirely
in
standard
textbook
notation.
the
use
of
plain
english
for
organizational
instructions,
automatic
error
diagnosis
indicating
the
actual
location
of
the
error
in
the
uncompiled
program,
and
an
attempt
to
minimize
that
fragmentation
of
the
original
problem
statement
which
is
a
normal
feature
of
programming
systems.
.b
cacm
september,
1963
.a
gawlik,
h.
j.
.n
ca630928
jb
march
13,
1978
7:06
pm
.x
1083
5
730
1396
5
730
730
5
730
730
5
730
730
5
730
964
6
730
1028
6
730
1029
6
730
1083
6
730
1132
6
730
1214
6
730
1278
6
730
1334
6
730
1365
6
730
1386
6
730
1387
6
730
1388
6
730
1392
6
730
1393
6
730
1394
6
730
1395
6
730
1396
6
730
1397
6
730
1496
6
730
284
6
730
407
6
730
407
6
730
3192
6
730
3193
6
730
3199
6
730
3200
6
730
3201
6
730
3202
6
730
3203
6
730
3204
6
730
561
6
730
730
6
730
730
6
730
.i
731
.t
symmetric
list
processor
.w
a
list
processing
system
in
which
each
list
cell
contains
both
a
forward
and
a
backward
link
as
well
as
a
datum
is
described.
this
system
is
intended
for
imbeding
in
higher
level
languages
capable
of
calling
functions
and
subroutines
coded
in
machine
language.
the
presentation
is
in
the
form
of
fortran
programs
depending
on
only
a
limited
set
of
fortran
programs
depending
on
only
a
limited
set
of
"primitive"
machine
language
subroutines
which
are
also
defined.
finally,
a
set
of
field,
particularly
character,
manipulation
primitives
are
given
to
round
out
the
system.
.b
cacm
september,
1963
.a
weizenbaum,
j.
.n
ca630927
jb
march
13,
1978
7:10
pm
.x
1050
4
731
1050
4
731
1102
4
731
1549
4
731
378
4
731
2723
4
731
2882
4
731
3008
4
731
731
4
731
731
4
731
793
4
731
798
4
731
1024
5
731
1051
5
731
1098
5
731
1214
5
731
209
5
731
1380
5
731
1388
5
731
1393
5
731
1485
5
731
1487
5
731
1549
5
731
1570
5
731
1878
5
731
1946
5
731
1957
5
731
2168
5
731
2723
5
731
2857
5
731
3112
5
731
627
5
731
731
5
731
731
5
731
731
5
731
878
6
731
106
6
731
106
6
731
106
6
731
902
6
731
1051
6
731
1093
6
731
1098
6
731
1132
6
731
1177
6
731
1380
6
731
1387
6
731
1389
6
731
1393
6
731
1393
6
731
1421
6
731
1549
6
731
1626
6
731
1749
6
731
1826
6
731
1826
6
731
1826
6
731
210
6
731
210
6
731
210
6
731
210
6
731
210
6
731
210
6
731
1860
6
731
1878
6
731
296
6
731
1972
6
731
360
6
731
378
6
731
2438
6
731
2651
6
731
2723
6
731
2736
6
731
2833
6
731
2838
6
731
405
6
731
406
6
731
406
6
731
3184
6
731
627
6
731
627
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
753
6
731
793
6
731
794
6
731
799
6
731
.i
732
.t
monte
carlo
inverse
(algorithm
166)
.b
cacm
september,
1963
.a
rodman,r.
d.
.n
ca630926
jb
march
13,
1978
7:11
pm
.x
732
5
732
732
5
732
732
5
732
.i
733
.t
newton
interpolation
with
forward
divided
differences
(algorithm
169)
.b
cacm
september,
1963
.a
thacher
jr.,
h.
c.
.n
ca630925
jb
march
13,
1978
7:13
pm
.x
733
5
733
733
5
733
733
5
733
.i
734
.t
newton
interpolation
with
backward
divided
differences
(algorithm
168)
.b
cacm
september,
1963
.a
thacher
jr.,
h.
c.
.n
ca630924
jb
march
13,
1978
7:15
pm
.x
734
5
734
734
5
734
734
5
734
.i
735
.t
calculation
of
confluent
divided
differences
(algorithm
167)
.b
cacm
september,
1963
.a
thacher
jr.,
h.
c.
.n
ca630923
jb
march
13,
1978
7:17
pm
.x
735
5
735
735
5
735
735
5
735
.i
736
.t
modified
hankel
functions
(algorithm
163)
.b
cacm
september,
1963
.a
thacher
jr.,h.
c.
.n
ca630922
jb
march
13,
1978
7:18
pm
.x
736
5
736
736
5
736
736
5
736
.i
737
.t
exponentiation
of
series
(algorithm
158)
.b
cacm
september,
1963
.a
lawrence,
j.
d.
.n
ca630921
jb
march
13,
1978
7:19
pm
.x
737
5
737
737
5
737
737
5
737
.i
738
.t
fourier
series
approximation
(algorithm
157)
.b
cacm
september,
1963
.a
george,
r.
.n
ca630920
jb
march
13,
1978
7:20
pm
.x
738
5
738
738
5
738
738
5
738
.i
739
.t
minifun
(algorithm
129)
.b
cacm
september,
1963
.a
wasscher,
e.
j.
.n
ca630919
jb
march
13,
1978
7:22
pm
.x
739
5
739
739
5
739
739
5
739
.i
740
.t
interest
(algorithm
45)
.b
cacm
september,
1963
.a
wright,
c.
b.
.n
ca630918
jb
march
13,
1978
7:23
pm
.x
740
5
740
740
5
740
740
5
740
.i
741
.t
evaluation
of
determinant
(algorithm
41)
.b
cacm
september,
1963
.a
freed,
b.
h.
.n
ca630917
jb
march
13,
1978
7:24
pm
.x
741
5
741
741
5
741
741
5
741
.i
742
.t
evaluation
of
determinant
(algorithm
41)
.b
cacm
september,
1963
.a
freed,
b.
h.
.n
ca630916
jb
march
13,
1978
7:25
pm
.x
742
5
742
742
5
742
742
5
742
.i
743
.t
arccosin
(algorithm
206)
.b
cacm
september,
1963
.a
konda,
m.
.n
ca630915
jb
march
13,
1978
7:26
pm
.x
743
5
743
743
5
743
743
5
743
.i
744
.t
ative
(algorithm
205)
.b
cacm
september,
1963
.a
haubrich,
j.
g.
a.
.n
ca630914
jb
march
13,
1978
7:28
pm
.x
744
5
744
744
5
744
744
5
744
.i
745
.t
steep2
(algorithm
204)
.b
cacm
september,
1963
.a
wasscher,
e.
j.
.n
ca630913
jb
march
13,
1978
7:29
pm
.x
745
5
745
745
5
745
745
5
745
.i
746
.t
steep1
(algorithm
203)
.b
cacm
september,
1963
.a
wasscher,
e.
j.
.n
ca630912
jb
march
13,
1978
7:30
pm
.x
746
5
746
746
5
746
746
5
746
.i
747
.t
generation
of
permutations
in
lexicographical
order
(algorithm
202)
.b
cacm
september,
1963
.a
shen,
m.
k.
.n
ca630911
jb
march
13,
1978
7:31
pm
.x
2443
5
747
747
5
747
747
5
747
747
5
747
747
6
747
.i
748
.t
a
semi-iterative
process
for
evaluating
arctangents
.b
cacm
september,
1963
.a
chu,
w.
h.
saathoff,
d.
r.
.n
ca630910
jb
march
13,
1978
7:33
pm
.x
748
5
748
748
5
748
748
5
748
.i
749
.t
note
onstochastic
matrices
.b
cacm
september,
1963
.a
dumey,
a.
i.
.n
ca630909
jb
march
13,
1978
7:35
pm
.x
749
5
749
749
5
749
749
5
749
.i
750
.t
pei
matrix
eigenvectors
.b
cacm
september,
1963
.a
newbery,
a.
c.
r.
.n
ca630908
jb
march
13,
1978
7:36
pm
.x
1963
5
750
750
5
750
750
5
750
750
5
750
909
6
750
475
6
750
750
6
750
.i
751
.t
a
note
on
a
set
of
test
matrices
for
inversion
.b
cacm
september,
1963
.a
rodman,
r.
d.
.n
ca630907
jb
march
13,
1978
7:38
pm
.x
751
5
751
751
5
751
751
5
751
.i
752
.t
closing
out
a
print
tape
.b
cacm
september,
1963
.a
moore,
d.
p.
.n
ca630906
jb
march
13,
1978
7:39
pm
.x
752
5
752
752
5
752
752
5
752
.i
753
.t
a
procedure
for
converting
logic
table
conditions
into
an
efficient
sequence
of
test
instructions
.b
cacm
september,
1963
.a
egler,
j.
f.
.n
ca630905
jb
march
13,
1978
7:40
pm
.x
1237
4
753
2220
4
753
753
4
753
1237
5
753
250
5
753
1549
5
753
1564
5
753
2453
5
753
753
5
753
753
5
753
753
5
753
106
6
753
1051
6
753
1172
6
753
1354
6
753
210
6
753
250
6
753
320
6
753
2053
6
753
2220
6
753
406
6
753
627
6
753
731
6
753
753
6
753
753
6
753
753
6
753
753
6
753
.i
754
.t
ye
indiscreet
monitor
.b
cacm
september,
1963
.a
blatt,
j.
m.
.n
ca630904
jb
march
13,
1978
7:41
pm
.x
754
4
754
153
5
754
754
5
754
754
5
754
754
5
754
.i
755
.t
an
exponential
method
of
numerical
integration
of
ordinary
differential
equations
.w
a
formula
for
numerical
integration
is
prepared,
which
involves
an
exponential
term.
this
formula
is
compared
to
two
standard
integration
methods,
and
it
is
shown
that
for
a
large
class
of
differential
equations,
the
exponential
formula
has
superior
stability
properties
for
large
step
sizes.
thus
this
formula
may
be
used
with
a
large
step
size
to
decrease
the
total
computing
time
for
a
solution
significantly,
particularly
in
those
engineering
problems
where
high
accuracy
is
not
needed.
.b
cacm
august,
1963
.a
pope,
d.
a.
.n
ca630843
jb
march
13,
1978
7:52
pm
.x
2567
5
755
755
5
755
755
5
755
755
5
755
2268
6
755
755
6
755
.i
756
.t
a
computer
program
for
editing
the
news
.b
cacm
august,
1963
.a
danielson,
w.
a.
briggs,
b.
.n
ca630842
jb
march
13,
1978
7:53
pm
.x
756
5
756
756
5
756
756
5
756
.i
757
.t
simulation
of
a
traffic
network
.b
cacm
august,
1963
.a
katz,
j.
h.
.n
ca630841
jb
march
13,
1978
7:55
pm
.x
1890
5
757
757
5
757
757
5
757
757
5
757
757
6
757
.i
758
.t
skeletal
structure
of
pert
and
cpa
computer
programs
.w
an
introduction
to
the
inner
mechanics
of
pert
and
cpa
computer
programs
is
provided.
the
major
components
of
these
programs
as
well
as
their
purposes
and
interrelationships
are
outlined.
.b
cacm
august,
1963
.a
kahn,
a.
b.
.n
ca630840
jb
march
13,
1978
7:58
pm
.x
1050
4
758
1226
4
758
1723
4
758
441
4
758
758
4
758
758
4
758
367
5
758
441
5
758
758
5
758
758
5
758
758
5
758
.i
759
.t
continued
operation
notation
for
symbol
manipulation
and
array
processing
.w
a
brief
account
is
given
of
a
notational
device
that
is
very
useful
in
the
formal
representation
of
syntaxes,
string
relationships
and
string
transformation
procedures
and
also
of
computing
procedures
that
deal
with
arrays
of
functions
of
many
variables.
the
device
consists
of
the
use
of
certain
"continued
operation"
or
"collective"
symbols
that
are
analogous
to
the
summation
symbol
(sigma)
and
continued
multiplication
symbol
(pi)
of
conventional
mathematics.
.b
cacm
august,
1963
.a
barnett,
m.
p.
.n
ca630839
jb
march
13,
1978
8:02
pm
.x
1062
4
759
1121
4
759
1139
4
759
1265
4
759
1781
4
759
720
4
759
759
4
759
964
5
759
1121
5
759
464
5
759
659
5
759
759
5
759
759
5
759
759
5
759
284
6
759
464
6
759
561
6
759
759
6
759
759
6
759
759
6
759
.i
760
.t
dialects
of
fortran
.b
cacm
august,
1963
.a
pyle,
i.
c.
.n
ca630838
jb
march
13,
1978
8:03
pm
.x
760
5
760
760
5
760
760
5
760
.i
761
.t
a
note
on
the
dangling
else
in
algol
60
.w
some
revisions
of
algol
60
are
proposed,
which
not
only
eliminate
certain
ambiguous
statements
but
also
add
some
convenience
to
the
language.
a
discussion
of
the
background
of
the
problem
and
a
sketch
of
a
proof
that
the
ambiguities
have
been
removed
is
included.
.b
cacm
august,
1963
.a
kaupe
jr.,
a.
f.
.n
ca630837
jb
march
13,
1978
8:06
pm
.x
249
4
761
254
4
761
272
4
761
1086
4
761
1102
4
761
1109
4
761
1132
4
761
1140
4
761
1188
4
761
1234
4
761
1263
4
761
1265
4
761
1270
4
761
1306
4
761
1323
4
761
1358
4
761
1379
4
761
1380
4
761
1453
4
761
1464
4
761
1464
4
761
1484
4
761
1491
4
761
1491
4
761
1498
4
761
1613
4
761
1614
4
761
1767
4
761
1781
4
761
1781
4
761
1787
4
761
1825
4
761
1860
4
761
1949
4
761
321
4
761
2059
4
761
2083
4
761
2126
4
761
2178
4
761
2179
4
761
2252
4
761
2325
4
761
2341
4
761
2546
4
761
435
4
761
437
4
761
463
4
761
483
4
761
491
4
761
2645
4
761
2652
4
761
2684
4
761
2732
4
761
2842
4
761
2929
4
761
2934
4
761
560
4
761
583
4
761
3069
4
761
3073
4
761
627
4
761
631
4
761
632
4
761
642
4
761
644
4
761
653
4
761
669
4
761
679
4
761
680
4
761
691
4
761
761
4
761
761
4
761
761
4
761
762
4
761
763
4
761
123
4
761
140
4
761
919
4
761
949
4
761
989
4
761
989
4
761
196
5
761
947
5
761
1379
5
761
3184
5
761
761
5
761
761
5
761
761
5
761
1263
6
761
1477
6
761
3184
6
761
669
6
761
761
6
761
.i
762
.t
some
remarks
on
the
syntax
of
symbolic
programming
languages
.b
cacm
august,
1963
.a
diforino,
a.
c.
.n
ca630836
jb
march
13,
1978
8:07
pm
.x
249
4
762
254
4
762
272
4
762
1102
4
762
1102
4
762
1109
4
762
1140
4
762
1142
4
762
1188
4
762
1306
4
762
1425
4
762
1464
4
762
1491
4
762
1767
4
762
1781
4
762
1781
4
762
1781
4
762
1787
4
762
1945
4
762
1949
4
762
321
4
762
2059
4
762
2126
4
762
435
4
762
437
4
762
438
4
762
463
4
762
483
4
762
491
4
762
2732
4
762
560
4
762
583
4
762
3073
4
762
627
4
762
631
4
762
632
4
762
642
4
762
644
4
762
653
4
762
680
4
762
761
4
762
762
4
762
762
4
762
762
4
762
763
4
762
123
4
762
140
4
762
919
4
762
949
4
762
989
4
762
196
5
762
249
5
762
483
5
762
762
5
762
762
5
762
762
5
762
.i
763
.t
a
syntax
controlled
generator
of
formal
language
processors
.b
cacm
august,
1963
.a
eickel,
j.
bauer,
f.
l.
paul,
m.
samelson,
k.
.n
ca630835
jb
march
13,
1978
8:08
pm
.x
249
4
763
254
4
763
267
4
763
272
4
763
1046
4
763
1102
4
763
1105
4
763
1109
4
763
1139
4
763
1139
4
763
1139
4
763
1140
4
763
1140
4
763
1141
4
763
1188
4
763
1215
4
763
1223
4
763
1234
4
763
1263
4
763
1265
4
763
1265
4
763
1306
4
763
1464
4
763
1491
4
763
1496
4
763
1647
4
763
1665
4
763
1767
4
763
1781
4
763
1781
4
763
1781
4
763
1787
4
763
1787
4
763
1792
4
763
1824
4
763
1949
4
763
321
4
763
364
4
763
2059
4
763
2126
4
763
2126
4
763
405
4
763
2546
4
763
435
4
763
437
4
763
438
4
763
463
4
763
464
4
763
483
4
763
491
4
763
2732
4
763
560
4
763
583
4
763
584
4
763
3073
4
763
627
4
763
631
4
763
631
4
763
632
4
763
642
4
763
644
4
763
653
4
763
653
4
763
680
4
763
680
4
763
761
4
763
762
4
763
763
4
763
763
4
763
763
4
763
763
4
763
763
4
763
795
4
763
799
4
763
123
4
763
140
4
763
919
4
763
945
4
763
989
4
763
196
5
763
1215
5
763
224
5
763
1781
5
763
1787
5
763
1945
5
763
2603
5
763
404
5
763
412
5
763
631
5
763
763
5
763
763
5
763
763
5
763
823
6
763
123
6
763
196
6
763
196
6
763
914
6
763
915
6
763
917
6
763
919
6
763
984
6
763
989
6
763
990
6
763
990
6
763
1007
6
763
1012
6
763
1025
6
763
1046
6
763
1084
6
763
1098
6
763
1122
6
763
1131
6
763
1138
6
763
1139
6
763
1139
6
763
1140
6
763
1141
6
763
1141
6
763
1149
6
763
1198
6
763
1200
6
763
1215
6
763
1215
6
763
1223
6
763
1223
6
763
1265
6
763
1265
6
763
1303
6
763
1323
6
763
1336
6
763
1358
6
763
1366
6
763
1396
6
763
1421
6
763
1455
6
763
1460
6
763
1462
6
763
1463
6
763
1467
6
763
1468
6
763
1477
6
763
1477
6
763
1487
6
763
1491
6
763
1491
6
763
1491
6
763
1491
6
763
1496
6
763
1496
6
763
1496
6
763
1531
6
763
1535
6
763
1565
6
763
1601
6
763
1602
6
763
1613
6
763
1614
6
763
1626
6
763
1641
6
763
1781
6
763
1787
6
763
1788
6
763
205
6
763
224
6
763
224
6
763
224
6
763
249
6
763
288
6
763
316
6
763
381
6
763
398
6
763
11
6
763
404
6
763
410
6
763
463
6
763
464
6
763
483
6
763
483
6
763
3184
6
763
3188
6
763
584
6
763
584
6
763
600
6
763
669
6
763
680
6
763
680
6
763
691
6
763
763
6
763
763
6
763
763
6
763
763
6
763
763
6
763
799
6
763
799
6
763
.i
764
.t
reduction
of
a
matrix
containing
polynomial
elements
(algorithm
170)
.b
cacm
august,
1963
.a
hennion,
p.
e.
.n
ca630834
jb
march
13,
1978
8:09
pm
.x
764
5
764
764
5
764
764
5
764
.i
765
.t
orthogonal
polynomial
least
squares
surface
fit
(algorithm
164)
.b
cacm
august,
1963
.a
bitterli,
c.
v.
.n
ca630833
jb
march
13,
1978
8:10
pm
.x
765
5
765
765
5
765
765
5
765
.i
766
.t
xy-move
plotting
(algorithm
162)
.b
cacm
august,
1963
.a
fletcher,
w.
e.
.n
ca630832
jb
march
13,
1978
8:12
pm
.x
766
5
766
766
5
766
766
5
766
.i
767
.t
certification
of
algorithm
161
combinatorial
of
m
things
taken
one
at
a
time,
two
at
a
time,
up
to
n
at
a
time
[m.
l.
wolfson
and
h.
v.
wright,
comm.
acm,
apr.
1963]
.b
cacm
august,
1963
.a
thoro,
d.
.n
ca630831
jb
march
13,
1978
8:13
pm
.x
767
5
767
767
5
767
767
5
767
.i
768
.t
certification
of
algorithm
160
combinatorial
of
m
things
taken
n
at
a
time
[m.
l.
wolfson
and
h.
v.
wright,
comm.
acm,
apr.
1963]
.b
cacm
august,
1963
.a
thoro,
d.
.n
ca630830
jb
march
13,
1978
8:14
pm
.x
768
5
768
768
5
768
768
5
768
.i
769
.t
algebra
of
sets
(algorithm
156)
.b
cacm
august,
1963
.a
bosworth,
k.
m.
.n
ca630829
jb
march
13,
1978
8:15
pm
.x
769
5
769
769
5
769
769
5
769
.i
770
.t
combination
in
any
order
(algorithm
155)
.b
cacm
august,
1963
.a
bosworth,
k.
m.
.n
ca630828
jb
march
13,
1978
8:17
pm
.x
770
5
770
770
5
770
770
5
770
.i
771
.t
combination
in
lexicographical
order
(algorithm
154)
.b
cacm
august,
1963
.a
bosworth,
k.
m.
.n
ca630827
jb
march
13,
1978
8:18
pm
.x
771
5
771
771
5
771
771
5
771
.i
772
.t
gomory
(algorithm
153)
.b
cacm
august,
1963
.a
lefkowitz,
b.
d'esopo,
d.
a.
.n
ca630826
jb
march
13,
1978
8:19
pm
.x
772
5
772
772
5
772
772
5
772
.i
773
.t
matrix
inversion
(algorithm
140)
.b
cacm
august,
1963
.a
george,
r.
.n
ca630825
jb
march
13,
1978
8:20
pm
.x
2061
5
773
773
5
773
773
5
773
773
5
773
1140
6
773
1141
6
773
1477
6
773
1491
6
773
1825
6
773
773
6
773
.i
774
.t
jacobi
(algorithm
85)
.b
cacm
august,
1963
.a
naur,
p.
.n
ca630824
jb
march
13,
1978
8:21
pm
.x
2349
5
774
774
5
774
774
5
774
774
5
774
1648
6
774
1716
6
774
1794
6
774
1894
6
774
2043
6
774
501
6
774
613
6
774
774
6
774
.i
775
.t
interpolation,
differentiation,
and
integration
(algorithm
77)
.b
cacm
august,
1963
.a
hennion,
p.
e.
.n
ca630823
jb
march
13,
1978
8:22
pm
.x
775
5
775
775
5
775
775
5
775
.i
776
.t
partition,
quicksort,
and
find
(algorithm
62,
64,
&
65)
.b
cacm
august,
1963
.a
randell,
b.
russell,
l.
j.
.n
ca630822
jb
march
13,
1978
8:23
pm
.x
3054
5
776
776
5
776
776
5
776
776
5
776
1175
6
776
1880
6
776
1919
6
776
1969
6
776
1980
6
776
1997
6
776
307
6
776
308
6
776
309
6
776
2017
6
776
2679
6
776
776
6
776
.i
777
.t
a
set
of
test
matrices
(algorithm
52)
.b
cacm
august,
1963
.a
naur,
p.
.n
ca630821
jb
march
13,
1978
8:24
pm
.x
777
5
777
777
5
777
777
5
777
.i
778
.t
associated
legendre
functions
of
the
first
kind
for
real
or
imaginary
arguments
(algorithm
47)
.b
cacm
august,
1963
.a
george,
r.
.n
ca630820
jb
march
13,
1978
8:26
pm
.x
1818
5
778
778
5
778
778
5
778
778
5
778
778
6
778
.i
779
.t
crout
ii
(algorithm
43)
.b
cacm
august,
1963
.a
domingo,
c.
rodriguez-gil,
f.
.n
ca630819
jb
march
13,
1978
8:27
pm
.x
779
5
779
779
5
779
779
5
779
.i
780
.t
algorithm
42
invert,
alg.107
gauss's
method,
alg.120
inversion
ii,
and
gjr
.b
cacm
august,
1963
.a
naur,
p.
.n
ca630818
jb
march
13,
1978
8:29
pm
.x
780
5
780
780
5
780
780
5
780
.i
781
.t
telescope
2
(algorithm
38)
.b
cacm
august,
1963
.a
bridges,
j.
f.
.n
ca630817
jb
march
13,
1978
8:30
pm
.x
781
5
781
781
5
781
781
5
781
.i
782
.t
telescope
1
(algorithm
37)
.b
cacm
august,
1963
.a
bridges,
j.
f.
.n
ca630816
jb
march
13,
1978
8:31
pm
.x
782
5
782
782
5
782
782
5
782
.i
783
.t
shellsort
(algorithm
201)
.b
cacm
august,
1963
.a
boothroyd,
j.
.n
ca630815
jb
march
13,
1978
8:32
pm
.x
2679
5
783
783
5
783
783
5
783
783
5
783
970
6
783
1175
6
783
1190
6
783
1228
6
783
1969
6
783
1997
6
783
308
6
783
2042
6
783
3187
6
783
507
6
783
716
6
783
783
6
783
.i
784
.t
normal
random
(algorithm
200)
.b
cacm
august,
1963
.a
george,
r.
.n
ca630814
jb
march
13,
1978
8:33
pm
.x
784
5
784
784
5
784
784
5
784
.i
785
.t
conversions
between
calendar
date
and
julian
day
number
(algorithm
199)
.b
cacm
august,
1963
.a
tantzen,
r.
g.
.n
ca630813
jb
march
13,
1978
8:34
pm
.x
2269
5
785
3115
5
785
785
5
785
785
5
785
785
5
785
907
6
785
2045
6
785
2417
6
785
2466
6
785
2884
6
785
579
6
785
785
6
785
785
6
785
.i
786
.t
adaptive
integration
and
multiple
integration
(algorithm
198)
.b
cacm
august,
1963
.a
mckeeman,
w.
m.
.n
ca630812
jb
march
13,
1978
8:35
pm
.x
1352
5
786
2048
5
786
2074
5
786
786
5
786
786
5
786
786
5
786
834
6
786
834
6
786
834
6
786
872
6
786
872
6
786
1040
6
786
1092
6
786
1241
6
786
1273
6
786
324
6
786
429
6
786
429
6
786
429
6
786
570
6
786
621
6
786
786
6
786
786
6
786
786
6
786
.i
787
.t
matrix
division
(algorithm
197)
.b
cacm
august,
1963
.a
wells,
m.
.n
ca630811
jb
march
13,
1978
8:37
pm
.x
787
5
787
787
5
787
787
5
787
.i
788
.t
muller's
method
for
finding
roots
of
an
arbitrary
function
(algorithm
196)
.b
cacm
august,
1963
.a
roman,
r.
d.
.n
ca630810
jb
march
13,
1978
8:38
pm
.x
788
5
788
788
5
788
788
5
788
.i
789
.t
bandsolve
(algorithm
195)
.b
cacm
august,
1963
.a
thurnau,
d.
h.
.n
ca630809
jb
march
13,
1978
8:39
pm
.x
789
5
789
789
5
789
789
5
789
.i
790
.t
zersol
(algorithm
194)
.b
cacm
august,
1963
.a
domingo,
c.
.n
ca630808
jb
march
13,
1978
8:40
pm
.x
790
5
790
790
5
790
790
5
790
.i
791
.t
character
manipulation
in
7090
fortran
.b
cacm
august,
1963
.a
smith,
d.
d.
.n
ca630807
jb
march
13,
1978
8:41
pm
.x
1084
5
791
791
5
791
791
5
791
791
5
791
868
6
791
603
6
791
644
6
791
669
6
791
791
6
791
797
6
791
.i
792
.t
multiple-precision
binary-to-decimal
integer
conversion
using
only
addition
and
subtraction
.b
cacm
august,
1963
.a
keyes,
d.
f.
moore,
d.
p.
.n
ca630806
jb
march
13,
1978
8:42
pm
.x
792
5
792
792
5
792
792
5
792
.i
793
.t
mapped
list
structures
.b
cacm
august,
1963
.a
baecker,
h.
d.
.n
ca630805
jb
march
13,
1978
8:43
pm
.x
1050
4
793
1549
4
793
2723
4
793
2882
4
793
731
4
793
793
4
793
1051
5
793
627
5
793
793
5
793
793
5
793
793
5
793
210
6
793
378
6
793
406
6
793
731
6
793
793
6
793
794
6
793
.i
794
.t
a
list-type
storage
technique
for
alphameric
information
.w
a
method
which
is
economic
in
terms
of
space
and
time
is
proposed
for
the
storage
and
manipulation
of
character
strings
of
arbitrary
length
in
a
fixed
word-length
computer.
the
method
is
illustrated
in
an
application
to
algol-type
identifiers
in
an
algol-like
block
structure.
.b
cacm
august,
1963
.a
bowlden,
h.
j.
.n
ca630804
jb
march
13,
1978
8:45
pm
.x
794
4
794
1051
5
794
1062
5
794
254
5
794
794
5
794
794
5
794
794
5
794
210
6
794
378
6
794
406
6
794
464
6
794
731
6
794
793
6
794
794
6
794
794
6
794
.i
795
.t
debugging
systems
at
the
source
language
level
.b
cacm
august,
1963
.a
ferguson,
h.
e.
berner,
e.
.n
ca630803
jb
march
13,
1978
8:46
pm
.x
1046
4
795
1105
4
795
1139
4
795
1140
4
795
1234
4
795
1263
4
795
1265
4
795
1496
4
795
1781
4
795
1824
4
795
2126
4
795
2546
4
795
464
4
795
2616
4
795
584
4
795
631
4
795
653
4
795
680
4
795
763
4
795
795
4
795
795
4
795
799
4
795
945
4
795
931
5
795
404
5
795
795
5
795
795
5
795
795
5
795
.i
796
.t
sabrag,
a
time-sharing
low-cost
computer
.w
the
serial
sabrac
computer
designed
and
built
in
the
scientific
department
of
the
israel
defense
ministry
has
a
5000-location
magnetic
drum,
main
store.
to
avoid
a
need
to
resort
to
optimum
programming
techniques
and
to
increase
its
overall
efficiency
the
computer
has
also
been
given
a
224-word
ferrite
core
store
from
which
the
program
is
obeyed.
transfers
between
the
core
and
drum
stores
and
to
and
from
the
twin
paper-tape
input
and
output
channels
are
all
available
autonomously
(concurrently,
time-shared).
multiplication
and
division
orders
are
also
autonomous,
so
that
the
machine
may
be
executing
up
to
three
orders
simultaneously.
all
functions
naturally
are
interlocked.
a
number
of
other
advanced
orders
and
facilities
are
also
incorporated.in
particular,
an
"execute"
order
permits
a
temporary
jump
for
up
to
four
orders
and
a
second
modifier
register
permits
double
modification
in
general
and
relative
addressing
of
subroutines
in
particular.
thus
the
overall
effective
speed
of
the
machine
is
muchhigher
than
its
basic
specification
would
lead
one
to
expect
and
its
design
indicates
one
way
in
which
the
concepts
of
time
sharing
may
be
incorporated
in
"low-cost"
computers.
.b
cacm
august,
1963
.a
lehman,
m.
netter,
z.
eshed,
r.
.n
ca630802
jb
march
13,
1978
8:54
pm
.x
3193
4
796
796
4
796
491
5
796
796
5
796
796
5
796
796
5
796
.i
797
.t
american
standard
code
for
information
interchange
.b
cacm
august,
1963
.n
ca630801
jb
march
13,
1978
8:55
pm
.x
1084
5
797
797
5
797
797
5
797
797
5
797
868
6
797
603
6
797
644
6
797
669
6
797
791
6
797
797
6
797
.i
798
.t
a
catalogue
entry
retrieval
system
.a
scheff,
b.
h.
.b
cacm
july,
1963
.n
ca630726
jb
march
14,
1978
8:08
am
.x
1050
4
798
1102
4
798
378
4
798
3008
4
798
731
4
798
798
4
798
209
5
798
798
5
798
798
5
798
798
5
798
.i
799
.t
design
of
a
separable
transition-diagram
compiler*
.w
a
cobol
compiler
design
is
presented
which
is
compact
enough
to
permit
rapid,
one-pass
compilation
of
a
large
subset
of
cobol
on
a
moderately
large
computer.
versions
of
the
same
compiler
for
smaller
machines
require
only
two
working
tapes
plus
a
compiler
tape.
the
methods
given
are
largely
applicable
to
the
construction
of
algol
compilers.
.b
cacm
july,
1963
.a
conway,
m.
e.
.n
ca630725
jb
march
14,
1978
8:11
am
.x
222
4
799
1046
4
799
1105
4
799
1139
4
799
1139
4
799
1140
4
799
1234
4
799
1263
4
799
1265
4
799
1496
4
799
1781
4
799
1824
4
799
1947
4
799
2126
4
799
2546
4
799
464
4
799
556
4
799
584
4
799
631
4
799
653
4
799
680
4
799
763
4
799
795
4
799
799
4
799
799
4
799
799
4
799
799
4
799
945
4
799
945
5
799
1323
5
799
1358
5
799
1380
5
799
1665
5
799
1781
5
799
1787
5
799
1989
5
799
399
5
799
2112
5
799
2534
5
799
2541
5
799
2698
5
799
2733
5
799
2820
5
799
404
5
799
82
5
799
3073
5
799
3155
5
799
799
5
799
799
5
799
799
5
799
830
6
799
123
6
799
196
6
799
196
6
799
196
6
799
919
6
799
990
6
799
1007
6
799
1046
6
799
1131
6
799
1139
6
799
1140
6
799
1141
6
799
1149
6
799
1198
6
799
1215
6
799
1215
6
799
1223
6
799
1265
6
799
1303
6
799
1323
6
799
1358
6
799
1366
6
799
1421
6
799
1421
6
799
1460
6
799
1460
6
799
1462
6
799
1463
6
799
1467
6
799
1468
6
799
1477
6
799
1477
6
799
1491
6
799
1491
6
799
1491
6
799
1496
6
799
1496
6
799
1531
6
799
1535
6
799
1565
6
799
1601
6
799
1602
6
799
1613
6
799
1614
6
799
1626
6
799
1641
6
799
1781
6
799
1781
6
799
1781
6
799
1781
6
799
1787
6
799
1787
6
799
1788
6
799
205
6
799
205
6
799
224
6
799
224
6
799
249
6
799
267
6
799
288
6
799
1959
6
799
1973
6
799
316
6
799
378
6
799
381
6
799
398
6
799
2110
6
799
2110
6
799
2111
6
799
11
6
799
2179
6
799
2182
6
799
2204
6
799
2247
6
799
2423
6
799
2534
6
799
2556
6
799
2732
6
799
2786
6
799
404
6
799
410
6
799
463
6
799
464
6
799
483
6
799
3073
6
799
3184
6
799
3184
6
799
3184
6
799
3184
6
799
3186
6
799
3188
6
799
584
6
799
600
6
799
631
6
799
680
6
799
680
6
799
691
6
799
729
6
799
731
6
799
763
6
799
763
6
799
799
6
799
799
6
799
799
6
799
799
6
799
799
6
799
799
6
799
799
6
799
799
6
799
799
6
799
799
6
799
799
6
799
799
6
799
799
6
799
799
6
799
799
6
799
.i
800
.t
the
linking
segment
subprogram
language
and
linking
loader
.b
cacm
july,
1963
.a
mccarthy,
j.
corbato,
f.
j.
daggett,
m.
m.
.n
ca630724
jb
march
14,
1978
8:13
am
.x
1471
5
800
1774
5
800
800
5
800
800
5
800
800
5
800
800
6
800
800
6
800
1173
6
800
271
6
800
276
6
800
.i
801
.t
least
squares
solution
with
constraints
(algorithm
177)
.b
cacm
july,
1963
.a
synge,
m.
j.
.n
ca630723
jb
march
14,
1978
8:14
am
.x
801
5
801
801
5
801
801
5
801
.i
802
.t
syminv2
(algorithm
150)
.b
cacm
july,
1963
.a
rutishauser,
h.
.n
ca630722jb
march
14,
1978
8:15
am
.x
802
5
802
802
5
802
802
5
802
.i
803
.t
syminv2
(algorithm
150)
.b
cacm
july,
1963
.a
evans
jr.,
a.
.n
ca630721
jb
march
14,
1978
8:16
am
.x
803
5
803
803
5
803
803
5
803
.i
804
.t
exponentiation
of
series
(algorithms
134)
.b
cacm
july,
1963
.a
thacher
jr.,
h.
c.
.n
ca630720
jb
march
14,
1978
8:19
am
.x
804
5
804
804
5
804
804
5
804
.i
805
.t
newton
maehly
(algorithm
105)
.b
cacm
july,
1963
.a
kondo,
j.
.n
ca630719
jb
march
14,
1978
8:20
am
.x
805
5
805
805
5
805
805
5
805
.i
806
.t
remark
on
certification
of
matrix
inversion
procedures
.b
cacm
july,
1963
.a
moler,
c.
.n
ca630718
jb
march
14,
1978
8:21
am
.x
1177
4
806
806
4
806
806
4
806
932
5
806
454
5
806
806
5
806
806
5
806
806
5
806
.i
807
.t
reversion
of
series
(algorithm
193)
.b
cacm
july,
1963
.a
fettis,
h.
e.
.n
ca630717
jb
march
14,
1978
8:22
am
.x
807
5
807
807
5
807
807
5
807
.i
808
.t
confluent
hypergeometric
(algorithm
192)
.b
cacm
july,
1963
.a
relph,
a.
p.
.n
ca630716
jb
march
14,
1978
8:29
am
.x
808
5
808
808
5
808
808
5
808
.i
809
.t
hypergeometric
(algorithm
191)
.b
cacm
july,
1963
.a
relph,
a.
p.
.n
ca630715
jb
march
14,
1978
8:30
am
.x
809
5
809
809
5
809
809
5
809
.i
810
.t
complex
power
(algorithm
190)
.b
cacm
july,
1963
.a
relph,
a.
p.
.n
ca630714
jb
march
14,
1978
8:32
am
.x
810
5
810
810
5
810
810
5
810
.i
811
.t
smoothing
2
(algorithm
189)
.b
cacm
july,
1963
.a
rodriguez
gil,
f.
.n
ca630713
jb
march
14,
1978
8:33
am
.x
811
5
811
811
5
811
811
5
811
.i
812
.t
smoothing
1
(algorithm
188)
.b
cacm
july,
1963
.a
rodriguez-gil,
f.
.n
ca630712
jb
march
14,
1978
8:34
am
.x
812
5
812
812
5
812
812
5
812
.i
813
.t
differences
and
derivatives
(algorithm
187)
.b
cacm
july,
1963
.a
vande
riet,
r.
p.
.n
ca630711
jb
march
14,
1978
8:35
am
.x
813
5
813
813
5
813
813
5
813
.i
814
.t
complex
arithmetic
(algorithm
186)
.b
cacm
july,
1963
.a
vande
riet,
r.
p.
.n
ca630710
jb
march
14,
1978
8:36
am
.x
814
5
814
814
5
814
814
5
814
.i
815
.t
normal
probability
for
curve
fitting
(algorithm
185)
.b
cacm
july,
1963
.a
colker,
a.
.n
ca630709
jb
march
14,
1978
8:38
am
.x
815
5
815
815
5
815
815
5
815
.i
816
.t
erlang
probability
for
curve
fitting
(algorithm
184)
.b
cacm
july,
1963
.a
colker,
a.
.n
ca630708
jb
march
14,
1978
8:39
am
.x
816
5
816
816
5
816
816
5
816
.i
817
.t
nexcom
(algorithm
152)
.b
cacm
july,
1963
.a
hopley,
j.
.n
ca630707
jb
march
14,
1978
8:40
am
.x
817
5
817
817
5
817
817
5
817
.i
818
.t
realizing
boolean
connectives
on
the
ibm
1620
.b
cacm
july,
1963
.a
hellerman,
h.
senzig,
d.
n.
.n
ca630706
jb
march
14,
1978
8:44
am
.x
818
5
818
818
5
818
818
5
818
.i
819
.t
polynomial
evaluation
revised
.b
cacm
july,
1963
.a
eisman,
s.
h.
.n
ca630705
jb
march
14,
1978
8:46
am
.x
1620
4
819
819
4
819
1620
5
819
436
5
819
819
5
819
819
5
819
819
5
819
819
6
819
436
6
819
.i
820
.t
checking
for
loops
in
networks
.b
cacm
july,
1963
.a
gordon,
r.
m.
.n
ca630704
jb
march
14,
1978
8:47
am
.x
820
5
820
820
5
820
820
5
820
.i
821
.t
further
remarks
on
sampling
a
tape
file-iii
.b
cacm
july,
1963
.a
juelich,
o.
c.
.n
ca630703
jb
march
14,
1978
8:48
am
.x
821
5
821
821
5
821
821
5
821
.i
822
.t
real-time
programming
specifications
.w
problems
in
the
implementation
of
large
real-time
applications
are
treated,
and
suggested
guidelines
for
both
program
and
file
specifications
are
developed.
the
problems
delineated
also
occur
in
systems
programming.
.b
cacm
july,
1963
.a
head,
r.
v.
.n
ca630702
jb
march
14,
1978
8:50
am
.x
822
5
822
822
5
822
822
5
822
.i
823
.t
a
syntactic
description
of
bc
nelliac
.b
cacm
july,
1963
.a
huskey,
h.
d.
love,
r.
wirth,
n.
.n
ca630701
jb
march
14,
1978
8:51
am
.x
1945
5
823
2126
5
823
691
5
823
823
5
823
823
5
823
823
5
823
823
6
823
823
6
823
823
6
823
196
6
823
914
6
823
915
6
823
917
6
823
984
6
823
989
6
823
990
6
823
1012
6
823
1084
6
823
1098
6
823
1122
6
823
1138
6
823
1139
6
823
1141
6
823
1200
6
823
1223
6
823
1265
6
823
1336
6
823
1396
6
823
1455
6
823
1477
6
823
1487
6
823
1491
6
823
1496
6
823
1614
6
823
1693
6
823
404
6
823
483
6
823
3184
6
823
584
6
823
669
6
823
680
6
823
763
6
823
.i
824
.t
descriptran-automated
descriptive
geometry*
.w
descriptive
geometry
consists
of
procedures
originally
designed
to
solve
3-space
geometry
problems
by
graphical
constructions
and
measurement
instead
of
by
computation.
however,
in
addition
to
this
it
unifies
and
simplifies
the
approach
to
many
such
problems.
when
one
can
call
subroutines
that
compute
new
coordinates
that
correspond
to
those
obtainable
from
the
graphical
constructions,
there
is
the
three-way
advantage
of
the
approach
of
descriptive
geometry,
the
accuracy
of
computation
and
the
speed
of
the
digital
computer.
descriptran
makes
it
possible
to
program
many
problems
in
3-space
with
a
few
statements;
it
consists
of
15
subroutines
analogous
to
the
procedures
of
descriptive
geometry.
.b
cacm
june,
1963
.a
kliphardt,
r.
a.
.n
ca630625
jb
march
14,
1978
9:56
am
.x
824
5
824
824
5
824
824
5
824
.i
825
.t
pip:
a
photo-interpretive
program
for
the
analysis
of
spark-chamber
data*
.w
an
operating
computer
program
that
processes
photographically
recorded
data
is
described.
the
input
to
the
program
consists
of
spark-chamber
photographs
on
which
tracks
of
high-energy
particles
are
recorded.
the
program
automatically
scans,
measures
and
performs
the
preliminary
interpretation
of
these
photographs.
in
continuous
operation
a
processing
rate
of
5,000
photographic
frames
per
hour
is
achieved.
.b
cacm
june,
1963
.a
rudloe,
h.
deutsch,
m.
marill,
t.
.n
ca630624
jb
march
14,
1978
9:59
am
.x
825
5
825
825
5
825
825
5
825
.i
826
.t
remarks
on
fortran
subroutines
for
time
series
analysis
.b
cacm
june,
1963
.a
bennett,
c.
m.
.n
ca630623
jb
march
14,
1978
10:00
am
.x
1118
4
826
826
4
826
948
4
826
942
5
826
1118
5
826
826
5
826
826
5
826
826
5
826
826
6
826
942
6
826
.i
827
.t
disk
file
sorting
.w
sorting
techniques
using
an
ibm
1401
with
a
random
access
storage
device
are
evaluated.
.b
cacm
june,
1963
.a
schick,
t.
.n
ca630622
jb
march
14,
1978
10:02
am
.x
827
5
827
827
5
827
827
5
827
.i
828
.t
incompressible
flow
network
calculations
.w
a
general
method
for
the
calculation
of
flows
and
pressures
in
fluid
flow
networks
is
presented.
the
method
is
applicable
to
computer
use.
.b
cacm
june,
1963
.a
cantrell,
h.
n.
.n
ca630621
jb
march
14,
1978
10:03
am
.x
828
5
828
828
5
828
828
5
828
.i
829
.t
the
external
language
klipa
for
the
ural-2
digital
computer
.b
cacm
june,
1963
.a
greniewski,
m,
turski,
w.
.n
ca630620
jb
march
14,
1978
10:04
am
.x
2905
5
829
829
5
829
829
5
829
829
5
829
829
6
829
.i
830
.t
corc-the
cornell
computing
language
.b
cacm
june,
1963
.a
conway,
r.
w.
maxwell,
w.
l.
.n
ca630619
jb
march
14,
1978
10:06
am
.x
1179
5
830
1288
5
830
1544
5
830
1646
5
830
2111
5
830
2534
5
830
2556
5
830
2650
5
830
830
5
830
830
5
830
830
5
830
830
6
830
830
6
830
830
6
830
830
6
830
830
6
830
830
6
830
830
6
830
830
6
830
987
6
830
1072
6
830
1112
6
830
1179
6
830
1592
6
830
1647
6
830
1787
6
830
1935
6
830
1936
6
830
1959
6
830
1973
6
830
2111
6
830
2111
6
830
2111
6
830
2182
6
830
408
6
830
576
6
830
619
6
830
680
6
830
680
6
830
799
6
830
.i
831
.t
real
error
function,
erf
(algorithm
123)
.b
cacm
june,
1963
.a
thacher
jr.,
h.
c.
.n
ca630618
jb
march
14,
1978
10:07
am
.x
1583
5
831
831
5
831
831
5
831
831
5
831
831
6
831
967
6
831
1126
6
831
707
6
831
.i
832
.t
curve
fitting
with
constraints
(algorithm
74)
.b
cacm
june,
1963
.a
isoda,
k.
.n
ca630617
jb
march
14,
1978
10:08
am
.x
832
5
832
832
5
832
832
5
832
.i
833
.t
reduction
of
a
symmetric
bandmatrix
to
triple
diagonal
form
.b
cacm
june,
1963
.a
schwartz,
h.
r.
.n
ca630616jb
march
14,
1978
10:09
am
.x
833
5
833
833
5
833
833
5
833
.i
834
.t
nonrecursive
adaptive
integration
(algorithm
182)
.b
cacm
june,
1963
.a
mckeeman,
w.
m.
tesler,
l.
.n
ca630615
jb
march
14,
1978
10:10
am
.x
1352
5
834
2048
5
834
2074
5
834
2093
5
834
834
5
834
834
5
834
834
5
834
834
6
834
834
6
834
834
6
834
834
6
834
872
6
834
872
6
834
872
6
834
1040
6
834
1092
6
834
1092
6
834
1241
6
834
1273
6
834
1298
6
834
1573
6
834
324
6
834
429
6
834
429
6
834
429
6
834
429
6
834
570
6
834
621
6
834
786
6
834
786
6
834
786
6
834
.i
835
.t
complementary
error
function-large
x
(algorithm
181)
.b
cacm
june,
1963
.a
thacher
jr.,
h.
c.
.n
ca630614
jb
march
14,
1978
10:12
am
.x
835
5
835
835
5
835
835
5
835
.i
836
.t
error
function-large
x
(algorithm
180)
.b
cacm
june,
1963
.a
thacher
jr.,
h.
c.
.n
ca630613
jb
march
14,
1978
10:13
am
.x
1157
5
836
836
5
836
836
5
836
836
5
836
836
6
836
1081
6
836
485
6
836
714
6
836
.i
837
.t
incomplete
beta
ratio
(algorithm
179)
.b
cacm
june,
1963
.a
ludwig,
o.
g.
.n
ca630612
jb
march
14,
1978
10:15
am
.x
837
5
837
837
5
837
837
5
837
.i
838
.t
direct
search
(algorithm
178)
.b
cacm
june,
1963
.a
kaupe
jr.,
a.
f.
.n
ca630611
jb
march
14,
1978
10:16
am
.x
838
5
838
838
5
838
838
5
838
.i
839
.t
least
squares
solution
with
constraints
(algorithm
177)
.b
cacm
june,
1963
.a
synge,
m.
j.
.n
ca630610
jb
march
14,
1978
10:17
am
.x
839
5
839
839
5
839
839
5
839
.i
840
.t
least
squares
surface
fit
(algorithm
176)
.b
cacm
june,
1963
.a
arthurs,
t.
d.
.n
ca630609
jb
march
14,
1978
10:18
am
.x
840
5
840
840
5
840
840
5
840
.i
841
.t
shuttle
sort
(algorithm
175)
.b
cacm
june,
1963
.a
shaw,
c.
j.
trimble,
t.
n.
.n
ca630608
jb
march
14,
1978
10:20
am
.x
841
5
841
841
5
841
841
5
841
.i
842
.t
a
posteriori
bounds
on
a
zero
of
a
polynomial
(algorithm
174)
.b
cacm
june,
1963
.a
gibb,
a.
.n
ca630607
jb
march
14,
1978
10:21
am
.x
842
5
842
842
5
842
842
5
842
.i
843
.t
assign
(algorithm
173)
.b
cacm
june,
1963
.a
hajek,
o.
.n
ca630606
jb
march
14,
1978
10:22
am
.x
843
5
843
843
5
843
843
5
843
.i
844
.t
1410
fortran
edit
feature
.b
cacm
june,
1963
.a
fedako,j.
e.
.n
ca630605
jb
march
14,
1978
10:23
am
.x
844
5
844
844
5
844
844
5
844
.i
845
.t
another
test
matrix
for
determinants
and
inverses
.b
cacm
june,
1963
.a
caffrey,
j.
.n
ca630604
jb
march
14,
1978
10:24
am
.x
845
5
845
845
5
845
845
5
845
.i
846
.t
self-inverse
conversion
table
.b
cacm
june,
1963
.a
sanborn,
t.
g.
.n
ca630603
jb
march
14,
1978
10:25
am
.x
846
5
846
846
5
846
846
5
846
.i
847
.t
a
penny-matching
program
.w
the
logic
of
a
penny-matching
program
written
for
the
csx-1
is
described.
.b
cacm
june,
1963
.a
wall,
e.
brown,
r.
m.
.n
ca630602
jb
march
14,
1978
10:27
am
.x
847
5
847
847
5
847
847
5
847
.i
848
.t
a
note
on
range
transformations
for
square
root
and
logarithm
.w
there
was
the
germ
of
an
idea
in
two
previous
papers
[1,2]
which
no
one
seems
to
have
picked
up
in
almost
five
years.
for
certain
functions
it
seems
desirable
to
transform
the
argument
to
a
short
range
symmetric
about
10.1
will
give
examples
of
this
usage
for
the
square
root
and
logarithm
function
for
both
binary
and
decimal
machines.
.b
cacm
june,
1963
.a
bemer,
r.
w.
.n
ca630601
jb
march
14,
1978
10:41
am
.x
848
4
848
848
4
848
26
5
848
35
5
848
848
5
848
848
5
848
848
5
848
.i
849
.t
use
of
tree
structures
for
processing
files
.w
in
data
processing
problems,
files
are
frequently
used
which
must
both
be
searched
and
altered.
binary
search
techniques
are
efficient
for
searching
large
files,
but
the
associated
file
organization
is
not
readily
adapted
to
the
file
alterations.
conversely,
a
chained
file
allocation
permits
efficient
alteration
but
cannot
be
searched
efficiently.
a
file
organized
into
a
tree-like
structure
is
discussed,
and
it
is
shown
that
such
a
file
may
both
be
searched
and
altered
with
times
proportional
to
slog(s)n,
where
n
is
the
number
of
file
items
and
s
is
a
parameter
of
the
tree.
it
is
also
shown
that
optimizing
the
value
of
s
leads
to
a
search
time
which
is
only
25
per
cent
slower
than
the
binary
search.
the
tree
organization
employs
two
data
chains
and
may
be
considered
to
be
a
compromise
between
the
organizations
for
the
binary
search
and
the
chained
file.
the
relation
of
the
tree
organization
to
multidimensional
indexing
and
to
the
trie
structure
is
also
discussed.
.b
cacm
may,
1963
.a
sussenguth
jr.,
e.
h.
.n
ca630518
jb
march
14,
1978
10:49
am
.x
435
4
849
2846
4
849
849
4
849
849
4
849
944
4
849
155
5
849
1050
5
849
1935
5
849
1936
5
849
2017
5
849
2032
5
849
2257
5
849
2360
5
849
2451
5
849
2452
5
849
615
5
849
849
5
849
849
5
849
849
5
849
849
6
849
849
6
849
849
6
849
849
6
849
849
6
849
849
6
849
849
6
849
849
6
849
849
6
849
850
6
849
851
6
849
852
6
849
853
6
849
854
6
849
855
6
849
856
6
849
857
6
849
858
6
849
859
6
849
860
6
849
861
6
849
862
6
849
863
6
849
864
6
849
865
6
849
866
6
849
106
6
849
944
6
849
1115
6
849
1785
6
849
209
6
849
1831
6
849
1831
6
849
1935
6
849
1936
6
849
1936
6
849
1936
6
849
1936
6
849
1976
6
849
367
6
849
2198
6
849
2360
6
849
627
6
849
.i
850
.t
conversion,
reconversion
and
comparison
techniques
in
variable-length
sorting
.w
the
logic
is
described
for
converting
highly
variable
input
records
into
a
format
that
can
be
easily
and
efficiently
processed
by
a
sorting
program.
the
internal
record
formats
are
discussed
in
relation
to
(1)
their
conversion
from
input
formats,
(2)
their
reconversion
to
output
formats,
and
(3)
comparison
techniques
between
internal
formats.
.b
cacm
may,
1963
.a
waks,
d.
j.
.n
ca630517
jb
march
14,
1978
10:52
am
.x
2017
5
850
850
5
850
850
5
850
850
5
850
849
6
850
850
6
850
851
6
850
852
6
850
853
6
850
854
6
850
855
6
850
856
6
850
857
6
850
858
6
850
859
6
850
860
6
850
861
6
850
862
6
850
863
6
850
864
6
850
865
6
850
866
6
850
.i
851
.t
design
and
characteristics
of
a
variable-length
record
sort
using
new
fixed-length
record
sorting
techniques
.w
this
paper
describes
the
application
of
several
new
techniques
for
sorting
fixed-length
records
to
the
problems
of
variable-length
record
sorting.
the
techniques
have
been
implemented
on
a
sylvania
9400
computer
system
with
32,000
fixed-length
words
of
memory.
specifically,
the
techniques
sequence
variable-length
records
of
unrestricted
size,
produce
long
initial
strings
of
data,
merge
strings
of
data
at
the
power
of
t-1,
where
t
is
the
number
of
work
tapes
in
a
system,
and
do
not
restrict
the
volume
of
input
data.
.b
cacm
may,1963
.a
goetz,
m.
a.
.n
ca630516
jb
march
14,
1978
10:57
am
.x
2017
4
851
2017
4
851
851
4
851
851
4
851
2017
5
851
851
5
851
851
5
851
851
5
851
858
5
851
865
5
851
849
6
851
850
6
851
851
6
851
852
6
851
853
6
851
854
6
851
855
6
851
856
6
851
857
6
851
858
6
851
859
6
851
860
6
851
861
6
851
862
6
851
863
6
851
864
6
851
865
6
851
866
6
851
.i
852
.t
a
method
of
comparing
the
time
requirements
of
sorting
methods
.b
cacm
may,
1963
.a
hall,
m.
h.
.n
ca630515
jb
march
14,
1978
10:58
am
.x
1919
4
852
852
4
852
852
4
852
864
4
852
864
4
852
865
4
852
232
5
852
2017
5
852
74
5
852
852
5
852
852
5
852
852
5
852
849
6
852
850
6
852
851
6
852
852
6
852
853
6
852
854
6
852
855
6
852
856
6
852
857
6
852
858
6
852
859
6
852
860
6
852
861
6
852
862
6
852
863
6
852
864
6
852
865
6
852
866
6
852
.i
853
.t
the
cobol
sort
verb
.b
cacm
may,
1963
.a
paterson,
j.
b.
.n
ca630514
jb
march
14,
1978
10:59
am
.x
2017
5
853
853
5
853
853
5
853
853
5
853
849
6
853
850
6
853
851
6
853
852
6
853
853
6
853
854
6
853
855
6
853
856
6
853
857
6
853
858
6
853
859
6
853
860
6
853
861
6
853
862
6
853
863
6
853
864
6
853
865
6
853
866
6
853
.i
854
.t
some
characteristics
of
sorting
in
computing
systems
using
random
access
storage
devices
.w
the
substantial
differences
in
characteristics
of
random
access
storage
and
tape
devices
dictate
that
concepts
and
objectives
of
computer
program
design
be
considered
from
the
viewpoint
of
the
external
file
medium
used.
this
is
particularly
true
in
the
case
of
sorting.
in
a
tape-oriented
system,
the
major
sorting
problem
is
that
of
minimizing
merge
time
despite
the
limited
orders
of
merge
possible.
in
contrast,
sorting
in
a
random
access-oriented
system
encourages
the
selection
of
the
optimum
order
of
merge
from
many
possible
orders.
the
latter
problem
is
discussed
in
this
paper,
along
with
criteria
developed
for
determining
the
optimum
order
of
merge
according
to
the
various
properties
of
random
access
storage
devices.
attention
is
also
given
to
the
problem
of
key
sorting
versus
record
sorting
and
the
possibly
serious
disadvantage
of
key
sorting
on
a
random
access
system.
.b
cacm
may,
1963
.a
hubbard,
g.
u.
.n
ca630513
jb
march
14,
1978
11:05
am
.x
1956
5
854
2017
5
854
854
5
854
854
5
854
854
5
854
849
6
854
850
6
854
851
6
854
852
6
854
853
6
854
854
6
854
854
6
854
855
6
854
856
6
854
857
6
854
858
6
854
859
6
854
860
6
854
861
6
854
862
6
854
863
6
854
864
6
854
865
6
854
866
6
854
.i
855
.t
organization
and
structure
of
dataon
disk
file
memory
systems
for
efficient
sorting
and
other
data
processing
programs
.w
an
approach
to
the
organization
and
structure
of
data
on
bryant
disc
file
memory
systems
for
sorting
and
performing
other
data
processing
functions
is
presented.
the
following
areas
are
covered:
characteristics
of
bryant
disc
file
systems
on
the
bendix
g-20
and
rca
301;
two
proposed
"chaining"
structures
for
data;
and
functions
of
a
disk
file
executive
routine.
the
concepts
for
sorting
and
performing
file
maintenance
processing
using
the
proposed
structure
and
executive
routine
are
discussed.
additionally,
it
is
shown
that
sorting
can
be
accomplished
without
the
use
of
disk
storage
work
areas.
.b
cacm
may,
1963
.a
goetz,
m.
a.
.n
ca630512
jb
march
14,
1978
11:10
am
.x
2017
5
855
855
5
855
855
5
855
855
5
855
849
6
855
850
6
855
851
6
855
852
6
855
853
6
855
854
6
855
855
6
855
856
6
855
857
6
855
858
6
855
859
6
855
860
6
855
861
6
855
862
6
855
863
6
855
864
6
855
865
6
855
866
6
855
.i
856
.t
sorting
with
large
volume,
random
access,
drum
storage
.w
an
approach
to
sorting
records
is
described
using
random
access
drum
memory.
the
sort
program
described
is
designed
to
be
a
generalized,
self-generating
sort,
applicable
to
a
variety
of
record
statements.
this
description
is
divided
into
three
parts.
the
first
part
presents
the
operating
environment;
the
second
defines
the
general
solution;
the
third
part
describes
the
internal
sort-merge
technique.
.b
cacm
may,
1963
.a
falkin,
j.
savastano
jr.,
s.
.n
ca630511
jb
march
14,
1978
11:14
am
.x
2017
5
856
856
5
856
856
5
856
856
5
856
849
6
856
850
6
856
851
6
856
852
6
856
853
6
856
854
6
856
855
6
856
856
6
856
857
6
856
858
6
856
859
6
856
860
6
856
861
6
856
862
6
856
863
6
856
864
6
856
865
6
856
866
6
856
.i
857
.t
sorting
nonredundant
files-techniques
used
in
the
fact
compiler
.w
some
typical
file
structures,
including
some
called
"non-redundant,"
are
examined,and
the
methods
used
in
fact
to
sort
such
files
are
discussed.
.b
cacm
may,
1963
.a
glore,
j.
b.
.n
ca630510
jb
march
14,
1978
11:16
am
.x
2017
5
857
857
5
857
857
5
857
857
5
857
849
6
857
850
6
857
851
6
857
852
6
857
853
6
857
854
6
857
855
6
857
856
6
857
857
6
857
858
6
857
859
6
857
860
6
857
861
6
857
862
6
857
863
6
857
864
6
857
865
6
857
866
6
857
.i
858
.t
a
tape
file
merge
pattern
generator
.w
a
routine
is
presented
which
specifies
the
sequence
of
merge
cycles
to
effect
the
merging
of
sorted
tape
files.
the
routine
is
designed
to
minimize
elapsed
computer
time
by
varying
the
power
of
the
merge
cycles,
so
as
to
use
all
the
available
tape
drives,
with
its
characteristic
of
assigning
one
drive
to
a
single-reel
file
and
two
drives
to
each
multiple-reel
file.
.b
cacm
may,
1963
.a
cooke,
w.
s.
.n
ca630509
jb
march
14,
1978
11:21
am
.x
2017
5
858
851
5
858
858
5
858
858
5
858
858
5
858
849
6
858
850
6
858
851
6
858
852
6
858
853
6
858
854
6
858
855
6
858
856
6
858
857
6
858
858
6
858
858
6
858
859
6
858
860
6
858
861
6
858
862
6
858
863
6
858
864
6
858
865
6
858
865
6
858
866
6
858
.i
859
.t
computer
planned
collates
.b
cacm
may,
1963
.a
french,
n.c.
.n
ca630508
jb
march
14,
1978
11:22
am
.x
2017
5
859
859
5
859
859
5
859
859
5
859
849
6
859
850
6
859
851
6
859
852
6
859
853
6
859
854
6
859
855
6
859
856
6
859
857
6
859
858
6
859
859
6
859
860
6
859
861
6
859
862
6
859
863
6
859
864
6
859
865
6
859
866
6
859
.i
860
.t
a
comparison
between
the
polyphase
and
oscillating
sort
techniques
.w
a
comparison
between
the
oscillating
and
polyphase
sort
techniques
is
developed
for
computer
systems
having
from
four
to
ten
tape
drives.
the
basis
for
the
comparison
is
the
total
reading
and
writing
required
for
various
number
of
input
strings
and
tape
drives
for
the
two
techniques.
.b
cacm
may,
1963
.a
goetz,
m.
a.
toth,
g.
s.
.n
ca630507
jb
march
14,
1978
11:25
am
.x
1117
4
860
2017
4
860
2146
4
860
677
4
860
860
4
860
860
4
860
862
4
860
2017
5
860
479
5
860
860
5
860
860
5
860
860
5
860
861
5
860
849
6
860
850
6
860
851
6
860
852
6
860
853
6
860
854
6
860
855
6
860
856
6
860
857
6
860
858
6
860
859
6
860
860
6
860
861
6
860
862
6
860
863
6
860
864
6
860
865
6
860
866
6
860
.i
861
.t
read-backward
polyphase
sorting
.w
read-backward
polyphase
sorting
provides
more
efficient
use
of
the
tapes
available
to
a
sort
than
most
other
sorting
techniques.
backward
polyphase
produces
a
continuous
merging
process
from
n-1
tapes
where
n
is
the
total
number
of
tapes
being
used
in
the
sorting
process.
any
of
the
available
presorting
techniques
may
be
used
in
conjunction
with
the
polyphase
merge
sort
provided
that
the
presort
has
the
capability
of
producing
both
ascending
and
descending
strings
and
distributing
the
strings
on
the
various
tapes
as
required
by
the
polyphase
merge.
.b
cacm
may,
1963
.a
gilstad,
r.
l.
.n
ca630506
jb
march
14,
1978
11:28
am
.x
1117
4
861
2017
4
861
2146
4
861
861
4
861
1117
5
861
2017
5
861
2146
5
861
677
5
861
860
5
861
862
5
861
861
5
861
861
5
861
861
5
861
849
6
861
850
6
861
851
6
861
852
6
861
853
6
861
854
6
861
855
6
861
856
6
861
857
6
861
858
6
861
859
6
861
860
6
861
861
6
861
861
6
861
861
6
861
861
6
861
861
6
861
862
6
861
862
6
861
862
6
861
863
6
861
863
6
861
864
6
861
865
6
861
866
6
861
299
6
861
479
6
861
636
6
861
.i
862
.t
string
distribution
for
the
polyphase
sort
.b
cacm
may,
1963
.a
malcolm
jr.,
w.
d.
.n
ca630505
jb
march
14,
1978
11:29
am
.x
2146
4
862
479
4
862
860
4
862
862
4
862
862
4
862
863
4
862
1117
5
862
299
5
862
2017
5
862
2146
5
862
479
5
862
862
5
862
862
5
862
862
5
862
861
5
862
849
6
862
850
6
862
851
6
862
852
6
862
853
6
862
854
6
862
855
6
862
856
6
862
857
6
862
858
6
862
859
6
862
860
6
862
861
6
862
861
6
862
861
6
862
862
6
862
862
6
862
862
6
862
862
6
862
863
6
862
863
6
862
864
6
862
865
6
862
866
6
862
299
6
862
636
6
862
.i
863
.t
multiphase
sorting
.b
cacm
may,
1963
.a
manker,
h.
h.
.n
ca630504
jb
march
14,
1978
11:30
am
.x
2146
4
863
479
4
863
862
4
863
863
4
863
299
5
863
2017
5
863
2146
5
863
863
5
863
863
5
863
863
5
863
849
6
863
850
6
863
851
6
863
852
6
863
853
6
863
854
6
863
855
6
863
856
6
863
857
6
863
858
6
863
859
6
863
860
6
863
861
6
863
861
6
863
862
6
863
862
6
863
863
6
863
863
6
863
864
6
863
865
6
863
866
6
863
299
6
863
.i
864
.t
an
empirical
study
of
minimal
storage
sorting
.b
cacm
may,
1963
.a
hibbard,
t.
n.
.n
ca630503
jb
march
14,
1978
11:31
am
.x
1919
4
864
1919
4
864
2191
4
864
2388
4
864
2783
4
864
2784
4
864
3054
4
864
3121
4
864
852
4
864
852
4
864
864
4
864
864
4
864
864
4
864
865
4
864
1175
5
864
232
5
864
1919
5
864
309
5
864
2017
5
864
2041
5
864
2216
5
864
74
5
864
864
5
864
864
5
864
864
5
864
849
6
864
850
6
864
851
6
864
852
6
864
853
6
864
854
6
864
855
6
864
856
6
864
857
6
864
858
6
864
859
6
864
860
6
864
861
6
864
862
6
864
863
6
864
864
6
864
864
6
864
864
6
864
864
6
864
864
6
864
865
6
864
866
6
864
1175
6
864
1919
6
864
1969
6
864
1997
6
864
308
6
864
308
6
864
309
6
864
74
6
864
3187
6
864
.i
865
.t
internal
and
tape
sorting
using
the
replacement-selection
technique
.w
a
general
technique
for
sequencing
unsorted
records
is
presented.
the
technique
is
shown
to
be
applicable
for
the
first
stage
of
a
generalized
sort
program
(the
formation
of
initial
strings)
as
well
as
for
sorting
records
within
a
memory
storage
(an
internal
sort).
it
is
shown
that
given
n
records
in
memory
storage,
records
are
sequenced
using
1+log2
n
tests
per
record,
that
initial
string
lengths
will
average
2n
for
random
input
records,
and
that
reading,
writing
and
processing
can
be
accomplished
simultaneously
if
the
computer
permits
such
overlap.
.b
cacm
may,
1963
.a
goetz,
m.
a.
.n
ca630502
jb
march
14,
1978
11:36
am
.x
1919
4
865
852
4
865
864
4
865
865
4
865
2017
5
865
74
5
865
851
5
865
865
5
865
865
5
865
865
5
865
849
6
865
850
6
865
851
6
865
852
6
865
853
6
865
854
6
865
855
6
865
856
6
865
857
6
865
858
6
865
858
6
865
859
6
865
860
6
865
861
6
865
862
6
865
863
6
865
864
6
865
865
6
865
865
6
865
866
6
865
.i
866
.t
sorting
on
computers
.b
cacm
may,
1963
.a
gotlieb,
c.
c.
.n
ca630501
jb
march
14,
1978
11:37
am
.x
2017
5
866
866
5
866
866
5
866
866
5
866
849
6
866
850
6
866
851
6
866
852
6
866
853
6
866
854
6
866
855
6
866
856
6
866
857
6
866
858
6
866
859
6
866
860
6
866
861
6
866
862
6
866
863
6
866
864
6
866
865
6
866
866
6
866
.i
867
.t
least
squares
fitting
of
planes
to
surfaces
using
dynamic
programming
.w
dynamic
programming
has
recently
been
used
by
stone,
by
bellman
and
by
gluss
to
determine
the
closet
fit
of
broken
line
segments
to
a
curve
in
an
interval
under
the
constraint
that
the
number
of
segments
is
fixed.
in
the
present
paper
successive
models
are
developed
to
extend
the
method
to
the
fitting
of
broken
plane
segments
to
surfaces
z=g(x,y)
defined
over
certain
types
of
subareas
of
the
(x,y)-space.
the
first
model
considers
a
rectangular
area,
with
the
constraint
that
the
plane
segments
are
defined
over
a
grid
in
the
(x,y)-space.
it
is
then
shown
how
this
model
may
be
incorporated
into
an
algorithm
that
provides
successive
approximations
to
optimal
fits
for
any
type
of
closed
area.
finally,
applications
are
briefly
described.
.b
cacm
april,
1963
.a
gluss,
b.
.n
ca630424
jb
march
14,
1978
11:43
am
.x
497
4
867
867
4
867
867
4
867
317
5
867
497
5
867
867
5
867
867
5
867
867
5
867
.i
868
.t
a
suggested
method
of
making
fuller
use
of
strings
in
algol
60
.b
cacm
april,
1963
.a
shoffner,
m.
g.
brown,
p.
j.
.n
ca630423
jb
march
14,
1978
11:45
am
.x
1084
5
868
868
5
868
868
5
868
868
5
868
868
6
868
603
6
868
644
6
868
669
6
868
791
6
868
797
6
868
.i
869
.t
term
of
magic
square
(algorithm
148)
.b
cacm
april,
1963
.a
thoro,
d.
.n
ca630422
jb
march
14,
1978
11:46
am
.x
869
5
869
869
5
869
869
5
869
.i
870
.t
term
of
magic
square
(algorithm
148)
.b
cacm
april,
1963
.a
barnecut,
j.
n.
r.
.n
ca630421
jb
march
14,
1978
11:47
am
.x
870
5
870
870
5
870
870
5
870
.i
871
.t
psif
(algorithm
147)
.b
cacm
april,
1963
.a
thacher
jr.,
h.
c.
.n
ca630420
jb
march
14,
1978
11:48
am
.x
1800
5
871
871
5
871
871
5
871
871
5
871
871
6
871
.i
872
.t
adaptive
numerical
integration
by
simpson's
rule
(algorithm
145)
.b
cacm
april,
1963
.a
mckeeman,
w.
m.
.n
ca630419
jb
march
14,
1978
11:49
am
.x
1352
5
872
2074
5
872
2093
5
872
872
5
872
872
5
872
872
5
872
834
6
872
834
6
872
834
6
872
872
6
872
872
6
872
872
6
872
1040
6
872
1092
6
872
1092
6
872
1241
6
872
1273
6
872
1298
6
872
1573
6
872
324
6
872
429
6
872
429
6
872
429
6
872
570
6
872
621
6
872
786
6
872
786
6
872
.i
873
.t
random
(algorithm
133)
.b
cacm
april,
1963
.a
poore
jr.,
j.
h.
.n
ca630418
jb
march
14,
1978
11:50
am
.x
873
5
873
873
5
873
873
5
873
.i
874
.t
chebyshev
curvefit
(algorithm
91)
.b
cacm
april,
1963
.a
hale,
r.
p.
.n
ca630417
jb
march
14,
1978
11:56
am
.x
874
5
874
874
5
874
874
5
874
.i
875
.t
incomplete
elliptic
integrals
(algorithm
73)
.b
cacm
april,
1963
.a
van
de
riet,
r.
p.
.n
ca630416
jb
march
14,
1978
12:06
pm
.x
875
5
875
875
5
875
875
5
875
.i
876
.t
complete
elliptic
integral
(algorithm
149)
.b
cacm
april,
1963
.a
thacher,
h.
c.
.n
ca630415
jb
march
14,
1978
12:14
pm
.x
876
5
876
876
5
876
876
5
876
.i
877
.t
complete
elliptic
integral
of
the
first
kind
(algorithm
55)
.b
cacm
april,
1963
.a
thacher
jr.,
h.
c.
.n
ca630414
jb
march
14,
1978
12:15
pm
.x
877
5
877
877
5
877
877
5
877
.i
878
.t
reduction
of
a
matrix
containing
polynomial
elements
(algorithm
170)
.b
cacm
april,
1963
.a
hennion,
p.
e.
.n
ca630413
jb
march
14,
1978
12:17
pm
.x
1946
5
878
878
5
878
878
5
878
878
5
878
878
6
878
902
6
878
1093
6
878
1177
6
878
1387
6
878
1393
6
878
360
6
878
731
6
878
.i
879
.t
newton
interpolation
with
forward
divided
differences
(algorithm
169)
.b
cacm
april,
1963
.a
kahan,
w.
farkas,
i.
.n
ca630412
jb
march
14,
1978
12:18
pm
.x
1524
5
879
879
5
879
879
5
879
879
5
879
879
6
879
1197
6
879
311
6
879
.i
880
.t
newton
interpolation
with
backward
divided
differences
.b
cacm
april,
1963
.a
kahan,
w.
farkas,
i.
.n
ca630411
jb
march
14,
1978
12:20
pm
.x
880
5
880
880
5
880
880
5
880
.i
881
.t
calculation
of
confluent
divided
differences
(algorithm
167)
.b
cacm
april,
1963
.a
kahan,
w.
farkas,
i.
.n
ca630410
jb
march
14,
1978
12:21
pm
.x
881
5
881
881
5
881
881
5
881
.i
882
.t
monte
carlo
(algorithm
166)
.b
cacm
april,
1963
.a
rodman,
r.
d.
.n
ca630409
jb
march
14,
1978
12:22
pm
.x
882
5
882
882
5
882
882
5
882
.i
883
.t
complete
elliptic
integrals
(algorithm
165)
.b
cacm
april,
1963
.a
thacher
jr.,
h.
c.
.n
ca630408
jb
march
14,
1978
12:23
pm
.x
883
5
883
883
5
883
883
5
883
.i
884
.t
orthogonal
polynomial
least
squares
surface
fit
(algorithm
164)
.b
cacm
april,
1963
.a
clark,
r.
e.
kubik,
r.
n.
phillips,
l.
p.
.n
ca630407
jb
march
14,
1978
12:25
pm
.x
884
5
884
884
5
884
884
5
884
.i
885
.t
modified
hankel
function
(algorithm
163)
.b
cacm
april,
1963
.a
fettis,
h.
e.
.n
ca630406
jb
march
14,
1978
12:26
pm
.x
1040
5
885
885
5
885
885
5
885
885
5
885
885
6
885
587
6
885
621
6
885
.i
886
.t
xy-move
plotting
(algorithm
162)
.b
cacm
april,
1963
.a
stockton,
f.
g.
.n
ca630405
jb
march
14,
1978
12:27
pm
.x
886
5
886
886
5
886
886
5
886
.i
887
.t
combinatorial
of
m
things
taken
one
at
a
time,
two
at
a
time,
up
to
n
at
a
time
(algorithm
161)
.b
cacm
april,
1963
.a
wright,
h.
v.
wolfson,
m.
l.
.n
ca630404
jb
march
14,
1978
12:28
pm
.x
887
5
887
887
5
887
887
5
887
.i
888
.t
algorithm
160
combinatorial
of
m
things
taken
n
at
a
time
.b
cacm
april,
1963
.a
wolfson,
m.
l.
wright,
h.
v.
.n
ca630403
jb
march
14,
1978
12:29
pm
.x
2590
5
888
888
5
888
888
5
888
888
5
888
888
6
888
.i
889
.t
official
actions
and
responses
to
algol
as
a
programming
language
.b
cacm
april,
1963
.n
ca630402
jb
march
14,
1978
12:30
pm
.x
889
5
889
889
5
889
889
5
889
.i
890
.t
selected
definitions
.w
a
selection
of
the
definitions
prepared
by
the
acm
standards
committee's
subcommittee
on
programming
terminology
is
presented
for
review
by
the
acm
membership.
.b
cacm
april,
1963
.a
fritz,
w.
b.
.n
ca630401
jb
march
14,
1978
12:32
pm
.x
690
5
890
890
5
890
890
5
890
890
5
890
890
6
890
929
6
890
3195
6
890
.i
891
.t
everyman's
information
retrieval
system
.w
the
information
retrieval
problem
whose
solution
is
presented
here
was
posed
by
a
technical
library
with
limited
bubget
and
personnel.
the
solution,
however,
is
quite
general
and
is
applicable
to
many
different
types
of
retrieval
problems.
further,the
method
of
solution
makes
it
possible
for
many
groups
who
have
previously
dismissed
an
information
retrieval
program
as
expensive
and
difficult
(from
a
programming
stand-point)
to
reconsider
their
position,
for
the
present
solution
makes
it
possible
to
install
an
information
retrieval
program
in
less
than
three
months,
and
with
relatively
little
equipment.
.b
cacm
march,
1963
.a
whitley,
v.
w.
.n
ca630329
jb
march
14,
1978
12:37
pm
.x
891
5
891
891
5
891
891
5
891
.i
892
.t
recol-a
retrieval
command
language
.w
an
interrogation
scheme
is
described
for
the
retrieval
and
manipulation
of
data
file
records.
the
language
of
the
interrogation
scheme
allows
for
selecting
file
records
with
the
are
of
logical
condition
statements,
defining
record
classes,
associating
file
records,
editing
printed
output,
and
summarizing
the
results
of
the
above
operations.
some
examples
of
a
typical
file
application
and
the
more
significant
features
of
a
particular
machine
implementation
are
given.
.b
cacm
march,
1963
.a
climenson,
w.
d.
.n
ca630328
jb
march
14,
1978
12:42
pm
.x
1309
4
892
1324
4
892
892
4
892
892
4
892
653
5
892
656
5
892
892
5
892
892
5
892
892
5
892
.i
893
.t
significance
arithmetic
on
a
digital
computer
.w
the
7090
at
nyu
has
been
modified
to
include
a
"significance
mode"
of
operation
which
is
intended
to
facilitate
the
identification
of
significant
bits
in
the
results
of
floating-point
arithmetic
operations.
the
manner
in
which
floating-point
arithmetic
is
handled
in
this
mode
is
discussed.
several
numerical
experiments
using
this
mode
are
described
and
comparisons
are
made
with
the
ordinary
"normalized
mode."
examples
include
power
series
evaluation,
linear
equations
solution,
determinant
evaluation
and
matrix
inversion.
.b
cacm
march,
1963
.a
goldstein,
m.
.n
ca630327
jb
march
14,
1978
12:47
pm
.x
3131
5
893
893
5
893
893
5
893
893
5
893
893
6
893
1148
6
893
.i
894
.t
an
iterative
factorization
technique
for
polynomials
.w
an
iterative
technique
is
displayed
whereby
factors
of
arbitrary
degree
can
be
found
for
polynomials
in
one
variable.
convergence
is
shown
to
occur
always
if
a
certain
jacobian
does
not
vanish
and
if
the
initial
approximation
to
a
factor
is
near
enough
to
an
actual
factor.
the
process
is
simply
programmed,
and
preliminary
results
indicate
it
to
be
well
adapted
to
use
with
digital
computers.
for
factors
of
degree
two,
the
technique
is
similar
to
that
of
bairstow,
the
present
method
being
somewhat
simpler.
.b
cacm
march,
1963
.a
luther,
h.
a.
.n
ca630326
jb
march
14,
1978
12:51
pm
.x
1111
5
894
894
5
894
894
5
894
894
5
894
894
6
894
.i
895
.t
a
computational
extension
of
the
variate
difference
method
.w
presented
here
is
a
computational
extension
of
the
variate
difference
method
as
developed
by
g.
tintner
[1].
.b
cacm
march,
1963
.a
scheinok,
p.
a.
.n
ca630325
jb
march
14,
1978
12:57
pm
.x
895
5
895
895
5
895
895
5
895
.i
896
.t
characteristic
values
and
vectors
of
defective
matrices
.b
cacm
march,
1963
.a
thompson,
g.
t.
.n
ca630324
jb
march
14,
1978
12:58
pm
.x
896
5
896
896
5
896
896
5
896
.i
897
.t
note
on
the
proof
of
the
non-existence
of
a
phrase
structure
grammar
for
algol
60
.b
cacm
march,
1963
.a
brown,
p.
j.
.n
ca630323
jb
march
14,
1978
1:00
pm
.x
897
5
897
897
5
897
897
5
897
.i
898
.t
random
(algorithm
133)
.b
cacm
march,
1963
.a
laughlin,
d.
l.
.n
ca630322
jb
march
14,
1978
1:01
pm
.x
898
5
898
898
5
898
898
5
898
.i
899
.t
magic
square
(algorithm
117
&
118)
.b
cacm
march,
1963
.a
bosworth,
k.
m.
.n
ca630321
jb
march
14,
1978
1:02
pm
.x
899
5
899
899
5
899
899
5
899
.i
900
.t
ancestor
(algorithm
79)
.b
cacm
march,
1963
.a
thacher
jr.,
h.
c.
.n
ca630320
jb
march
14,
1978
1:23
pm
.x
900
5
900
900
5
900
900
5
900
.i
901
.t
difference
expression
coefficients
(algorithm
79)
.b
cacm
march,
1963
.a
clark,
e.
s.
.n
ca630319
jb
march
14,
1978
1:24
pm
.x
901
5
901
901
5
901
901
5
901
.i
902
.t
determinant
(algorithm
159)
.b
cacm
march,
1963
.a
digby,
d.
w.
.n
ca630318
jb
march
14,
1978
1:28
pm
.x
902
5
902
902
5
902
902
5
902
1946
5
902
878
6
902
902
6
902
1093
6
902
1177
6
902
1387
6
902
1393
6
902
360
6
902
731
6
902
.i
903
.t
exponentiation
of
series
(algorithm
134
)
.b
cacm
march,
1963
.a
fettis,
h.
e.
.n
ca630317
jb
march
14,
1978
1:29
pm
.x
903
5
903
903
5
903
903
5
903
.i
904
.t
fourier
series
approximation
(algorithm
157)
.b
cacm
march,
1963
.a
mifsud,
c.
j.
.n
ca630316
jb
march
14,
1978
1:31
pm
.x
904
5
904
904
5
904
904
5
904
.i
905
.t
algebra
of
sets
(algorithm
156)
.b
cacm
march,
1963
.a
mifsud,
c.
j.
.n
ca630315
jb
march
14,
1978
1:32
pm
.x
905
5
905
905
5
905
905
5
905
.i
906
.t
combination
in
any
order
(algorithm
155)
.b
cacm
march,
1963
.a
mifsud,
c.
j.
.n
ca630314
jb
march
14,
1978
1:33
pm
.x
906
5
906
906
5
906
906
5
906
.i
907
.t
combination
in
lexicographical
order
(algorithm
154)
.b
cacm
march,
1963
.a
mifsud,
c.
j.
.n
ca630313
jb
march
14,
1978
1:34
pm
.x
907
5
907
907
5
907
907
5
907
3115
5
907
907
6
907
2045
6
907
2417
6
907
2466
6
907
2884
6
907
579
6
907
785
6
907
.i
908
.t
test
matrix
for
inversion
.b
cacm
march,
1963
.a
lasor,
w.
s.
.n
ca630312a
jb
march
14,
1978
1:38
pm
.x
908
5
908
908
5
908
908
5
908
.i
909
.t
arithmetizing
declarations
(corrigendum)
.b
cacm
march,
1963
.a
conway,
m.
e.
speroni,
j.
.n
ca630312b
jb
march
14,
1978
1:40
pm
.x
909
5
909
909
5
909
909
5
909
1963
5
909
909
6
909
475
6
909
750
6
909
.i
910
.t
selective
instruction
trap
for
the
7090
.b
cacm
march,
1963
.a
mayer,
r.
j.
.n
ca630311
jb
march
14,
1978
1:41
pm
.x
910
5
910
910
5
910
910
5
910
.i
911
.t
a
variant
method
of
file
searching
.b
cacm
march,
1963
.a
mcilroy,
m.
d.
.n
ca630310
jb
march
14,
1978
1:42
pm
.x
1271
4
911
1785
4
911
1785
4
911
2203
4
911
2543
4
911
2552
4
911
2860
4
911
911
4
911
911
4
911
911
5
911
911
5
911
911
5
911
1785
5
911
332
5
911
2203
5
911
2552
5
911
492
5
911
911
6
911
911
6
911
911
6
911
1785
6
911
1785
6
911
1786
6
911
332
6
911
332
6
911
2107
6
911
2109
6
911
2203
6
911
492
6
911
492
6
911
.i
912
.t
addressing
an
array
yi
in
k-dimensions
by
fortran
for
analysis
of
variance
.b
cacm
march,
1963
.a
garber,
m.
j.
.n
ca630309
jb
march
14,
1978
1:44
pm
.x
912
5
912
912
5
912
912
5
912
1014
5
912
912
6
912
.i
913
.t
neliac
.b
cacm
march,
1963
.a
halstead,
m.
h.
.n
ca630308
jb
march
14,
1978
1:45
pm
.x
913
5
913
913
5
913
913
5
913
.i
914
.t
jovial
and
its
documentation
.b
cacm
march,
1963
.a
shaw,
c.
j.
.n
ca630307
jb
march
14,
1978
1:46
pm
.x
914
5
914
914
5
914
914
5
914
1945
5
914
823
6
914
914
6
914
915
6
914
917
6
914
984
6
914
989
6
914
990
6
914
1012
6
914
1084
6
914
1098
6
914
1122
6
914
1138
6
914
1139
6
914
1141
6
914
1200
6
914
1223
6
914
1265
6
914
1336
6
914
1396
6
914
1455
6
914
1477
6
914
1487
6
914
1491
6
914
1496
6
914
483
6
914
584
6
914
669
6
914
680
6
914
763
6
914
.i
915
.t
documentation
of
ipl-v
.b
cacm
march,
1963
.a
newell,
a.
.n
ca630306
jb
march
14,
1978
1:46
pm
.x
915
5
915
915
5
915
915
5
915
1945
5
915
823
6
915
914
6
915
915
6
915
917
6
915
984
6
915
989
6
915
990
6
915
1012
6
915
1084
6
915
1098
6
915
1122
6
915
1138
6
915
1139
6
915
1141
6
915
1200
6
915
1223
6
915
1265
6
915
1336
6
915
1396
6
915
1455
6
915
1477
6
915
1487
6
915
1491
6
915
1496
6
915
483
6
915
584
6
915
669
6
915
680
6
915
763
6
915
.i
916
.t
fortran
.b
cacm
march,
1963
.a
heising,
w.
p.
.n
ca630305
jb
march
14,
1978
1:47
pm
.x
916
5
916
916
5
916
916
5
916
.i
917
.t
comit
.b
cacm
march,
1963
.a
yngve,
v.
h.
.n
ca630304
jb
march
14,
1978
1:48
pm
.x
917
5
917
917
5
917
917
5
917
1068
5
917
1945
5
917
823
6
917
914
6
917
915
6
917
917
6
917
917
6
917
984
6
917
989
6
917
990
6
917
1012
6
917
1084
6
917
1098
6
917
1122
6
917
1138
6
917
1139
6
917
1141
6
917
1200
6
917
1223
6
917
1265
6
917
1336
6
917
1396
6
917
1455
6
917
1477
6
917
1487
6
917
1491
6
917
1496
6
917
483
6
917
584
6
917
669
6
917
680
6
917
763
6
917
.i
918
.t
cobol
.b
cacm
march,
1963
.a
cunningham,
j.
f.
.n
ca630303
jb
march
27,
1978
9:22
pm
.x
918
5
918
918
5
918
918
5
918
.i
919
.t
documentation
problems:
algol
60
.b
cacm
march,
1963
.a
naur,
p.
.n
ca630302
jb
march
14,
1978
1:50
pm
.x
249
4
919
254
4
919
272
4
919
1102
4
919
1109
4
919
1140
4
919
1188
4
919
1306
4
919
1464
4
919
1491
4
919
1767
4
919
1781
4
919
1787
4
919
1949
4
919
321
4
919
2059
4
919
2126
4
919
435
4
919
437
4
919
463
4
919
483
4
919
491
4
919
2732
4
919
560
4
919
583
4
919
3073
4
919
627
4
919
631
4
919
632
4
919
642
4
919
644
4
919
653
4
919
680
4
919
761
4
919
762
4
919
763
4
919
123
4
919
140
4
919
919
4
919
989
4
919
196
5
919
919
5
919
919
5
919
919
5
919
1781
5
919
123
6
919
196
6
919
919
6
919
990
6
919
1007
6
919
1046
6
919
1131
6
919
1139
6
919
1140
6
919
1149
6
919
1198
6
919
1215
6
919
1223
6
919
1265
6
919
1303
6
919
1323
6
919
1358
6
919
1366
6
919
1421
6
919
1460
6
919
1462
6
919
1463
6
919
1467
6
919
1468
6
919
1477
6
919
1491
6
919
1496
6
919
1531
6
919
1535
6
919
1565
6
919
1601
6
919
1602
6
919
1613
6
919
1614
6
919
1626
6
919
1641
6
919
1787
6
919
1788
6
919
205
6
919
224
6
919
249
6
919
288
6
919
316
6
919
381
6
919
398
6
919
11
6
919
404
6
919
410
6
919
463
6
919
464
6
919
483
6
919
3184
6
919
3188
6
919
584
6
919
600
6
919
680
6
919
691
6
919
763
6
919
799
6
919
.i
920
.t
toward
better
documentation
of
programming
languages
.b
cacm
march,
1963
.a
yngve,
v.
h.
sammet,
j.
e.
.n
ca630301
jb
march
14,
1978
1:51
pm
.x
920
5
920
920
5
920
920
5
920
728
5
920
920
6
920
45
6
920
.i
921
.t
incomplete
elliptic
integrals
(algorithm
73)
.b
cacm
february,
1963
.a
meyer,
n.
a.
.n
ca630212
jb
march
14,
1978
2:03
pm
.x
921
5
921
921
5
921
921
5
921
.i
922
.t
multint
(algorithm
32)
.b
cacm
february,
1963
.a
thacher
jr.,
h.
c.
.n
ca630211jb
march
14,
1978
2:10
pm
.x
922
5
922
922
5
922
922
5
922
.i
923
.t
gomory
(algorithm
153)
.b
cacm
february,
1963
.a
bauer,
f.
l.
.n
ca630210
jb
march
14,
1978
2:12
pm
.x
923
5
923
923
5
923
923
5
923
.i
924
.t
nexcom
(algorithm
152)
.b
cacm
february,
1963
.a
hopley,
j.
.n
ca630209
jb
march
14,
1978
2:12
pm
.x
924
5
924
924
5
924
924
5
924
.i
925
.t
location
of
a
vector
in
a
lexicographically
ordered
listalgorithm
151)
.b
cacm
february,
1963
.a
walter,
h.
f.
.n
ca630208
jb
march
14,
1978
2:17
pm
.x
925
5
925
925
5
925
925
5
925
.i
926
.t
syminv2
(algorithm
150)
.b
cacm
february,
1963
.a
rutishauser,
h.
.n
ca630207
jb
march
14,
1978
2:18
pm
.x
926
5
926
926
5
926
926
5
926
.i
927
.t
linear
programming
applied
to
ultraviolet
absorption
spectroscopy
.b
cacm
february,
1963
.a
white,
w.
c.
shapiro,
b.
pratt,
a.
w.
.n
ca630206
jb
march
14,
1978
2:19
pm
.x
927
5
927
927
5
927
927
5
927
.i
928
.t
character
manipulation
in
fortran
.b
cacm
february,
1963
.a
lewis,
t.
s.
.n
ca630205
jb
march
14,
1978
2:20
pm
.x
928
5
928
928
5
928
928
5
928
.i
929
.t
glossary
construction
.b
cacm
february,
1963
.a
grems,
m.
.n
ca630204
jb
march
14,
1978
2:21
pm
.x
929
4
929
929
5
929
929
5
929
929
5
929
397
5
929
690
5
929
890
6
929
929
6
929
3195
6
929
.i
930
.t
decimal-to-binary
conversion
of
short
fields
.b
cacm
february,
1963
.a
yarbrough,
l.
d.
.n
ca630203
jb
march
14,
1978
2:22
pm
.x
930
5
930
930
5
930
930
5
930
.i
931
.t
systematic
mistake
analysis
of
digital
computer
programs
.b
cacm
february,
1963
.a
miller,
j.
c.
maloney,
c.
j.
.n
ca630202
jb
march
14,
1978
2:23
pm
.x
1324
4
931
931
4
931
931
4
931
931
4
931
931
5
931
931
5
931
931
5
931
202
5
931
396
5
931
2616
5
931
634
5
931
795
5
931
931
6
931
931
6
931
1548
6
931
1684
6
931
2517
6
931
404
6
931
.i
932
.t
matrix
inversion
by
gauss-jordan
inversion
ii
(algorithm
120)
.b
cacm
january,
1963
.a
naur,
p.
.n
ca630116
jb
march
14,
1978
2:27
pm
.x
932
5
932
932
5
932
932
5
932
806
5
932
932
6
932
454
6
932
.i
933
.t
magic
squares
(algorithm
117
&
118)
.b
cacm
january,
1963
.a
naur,
p.
.n
ca630115
jb
march
14,
1978
2:31
pm
.x
933
5
933
933
5
933
933
5
933
.i
934
.t
gauss's
method
(algorithm
107)
.b
cacm
january,
1963
.a
naur,
p.
.n
ca630114
jb
march
14,
1978
2:32
pm
.x
934
5
934
934
5
934
934
5
934
.i
935
.t
calculating
primes
by
means
of
gps
(algorithm)
.b
cacm
january,
1963
.a
naur,
p.
.n
ca630113
jb
march
14,
1978
2:33
pm
.x
935
5
935
935
5
935
935
5
935
.i
936
.t
a
set
of
test
matrices
(algorithm
52)
.b
cacm
january,
1963
.a
naur,
p.
.n
ca630112
jb
march
14,
1978
2:35
pm
.x
936
5
936
936
5
936
936
5
936
.i
937
.t
inverse
of
a
finite
segment
of
the
hilbert
matrix
(algorithm
50)
.b
cacm
january,
1963
.a
naur,
p.
.n
ca630111
jb
march
14,
1978
2:36
pm
.x
937
5
937
937
5
937
937
5
937
.i
938
.t
invert
(algorithm
42)
.b
cacm
january,
1963
.a
naur,
p.
.n
ca630110
jb
march
14,1978
2:36
pm
.x
938
5
938
938
5
938
938
5
938
.i
939
.t
gamma
function
(algorithm
31)
.b
cacm
january,
1963
.a
behrenz,
p.
g.
.n
ca630109
jb
march
14,
1978
2:37
pm
.x
939
5
939
939
5
939
939
5
939
.i
940
.t
generating
discrete
random
variables
in
a
computer
.w
this
note
is
concerned
with
details
of
how
to
instruct
a
computer
to
choose
one
from
many
things
with
assigned
probabilities.
the
method
uses
a
uniform
variable
to
direct
the
computer
to
a
memory
location;
if
this
is
done
by
a
sequence
of
appropriately
chosen
conditional
probabilities,
efficient
use
of
memory
space
and
quite
fast
programs
will
result.
.b
cacm
january,
1963
.a
marsaglia,
g.
.n
ca630108
jb
march
14,
1978
2:40
pm
.x
940
5
940
940
5
940
940
5
940
1073
5
940
1153
5
940
940
6
940
940
6
940
1153
6
940
.i
941
.t
a
recursive
program
for
the
general
n-dimensional
integral
.w
a
general
program
is
outlined
for
n-dimensional
integration
with
variable
limits.
the
program
is
of
a
recursive
nature
and
uses
simpson's
rule
combined
with
repeated
bisection
to
attain
the
required
accuracy.
it
was
developed
in
the
ferranti
mercury
autocode
scheme.
.b
cacm
january,
1963
.a
cadwell,
j.
h.
.n
ca630107
jb
march
14,
1978
2:43
pm
.x
941
5
941
941
5
941
941
5
941
.i
942
.t
fortran
subroutines
for
time
series
analysis
.w
the
authors
have
recently
been
concerned
in
a
time-series
study
that
constituted
a
fairly
typical
piece
of
applied
statistical
research,
involving
extensive
computations
on
a
moderately
large
quantity
of
data.
wehave
found
that
the
many
different
numerical
processes
that
were
required
could
be
built
up
almost
completely
from
a
small
number
of
basic
operations,
and
a
set
of
fortran
subroutines
has
been
written
to
perform
these.
the
main
purpose
of
this
note
is
to
describe
these
subroutines,
but
since
the
question
of
general
statistical
programs
is
topical
[1],
we
include
some
general
remarks.
.b
cacm
january,
1963
.a
healy,
m.
j.
r.
bogert,
b.
p.
.n
ca630106
jb
march
14,
1978
2:55
pm
.x
942
5
942
942
5
942
942
5
942
948
5
942
1118
5
942
826
5
942
826
6
942
942
6
942
942
6
942
942
6
942
.i
943
.t
terms
frequently
combined
in
problem
description
.b
cacm
january,
1963
.a
grems,
m.
.n
ca630105
jb
march
14,
1978
2:56
pm
.x
943
5
943
943
5
943
943
5
943
.i
944
.t
storage
and
search
properties
of
a
tree-organized
memory
system
.w
a
memory
with
list
properties
[1]
may
be
used
to
construct
numeric,
alphabetic
or
alphanumeric
trees.
such
trees
have
information
storage
and
retrieval
properties
applicable
to
problems
involving
large
quantities
of
data
or
to
problems
where
the
quantity,
word
length
and
distribution
of
stored
information
is
not
known
a
priori,
or
changes
rapidly
during
the
processing.
the
purpose
of
this
paper
is
to
examine
the
storage
and
search
properties
of
a
tree-organized
storage
system
assuming
that
a
memory
possessing
certain
list
properties
is
available.
of
prime
interest
is
the
application
where
a
symbol
table,
dictionary
or
similar
file
is
to
be
stored
and
searched.
.b
cacm
january,
1963
.a
scidmore,
a.
k.
weinberg,
b.
l.
.n
ca630104
jb
march
14,
1978
3:02
pm
.x
2846
4
944
849
4
944
944
4
944
155
5
944
944
5
944
944
5
944
944
5
944
1234
5
944
2451
5
944
849
6
944
944
6
944
944
6
944
1935
6
944
1936
6
944
321
6
944
385
6
944
400
6
944
402
6
944
404
6
944
3184
6
944
729
6
944
.i
945
.t
arithmetizing
declarations:
an
application
to
cobol
.b
cacm
january,
1963
.a
conway,
m.
e.
speroni,
j.
.n
ca630103
jb
march
14,
1978
3:03
pm
.x
1046
4
945
1105
4
945
1139
4
945
1140
4
945
1234
4
945
1263
4
945
1265
4
945
1496
4
945
1781
4
945
1824
4
945
2126
4
945
2546
4
945
464
4
945
584
4
945
631
4
945
653
4
945
680
4
945
763
4
945
795
4
945
799
4
945
945
4
945
945
5
945
945
5
945
945
5
945
404
5
945
799
5
945
945
6
945
399
6
945
82
6
945
404
6
945
.i
946
.t
suggestions
on
algol
60
(rome)
issues
-
a
report
by
the
american
standards
association
subcommittee
x3.4.2
.b
cacm
january,
1963
.a
utman,
r.
e.
.n
ca630102
jb
march
14,
1978
3:05
pm
.x
946
5
946
946
5
946
946
5
946
1949
5
946
196
6
946
946
6
946
.i
947
.t
supplement
to
the
algol
60
report
.b
cacm
january,
1963
.a
woodger,
m.
.n
ca630101
jb
march
14,
1978
3:05
pm
.x
947
5
947
947
5
947
947
5
947
761
5
947
196
6
947
947
6
947
3184
6
947
.i
948
.t
note
on
the
use
of
procedures
.b
cacm
december,
1964
.a
healy,
m.
j.
r.
.n
ca641223
jb
march
9,
1978
2:32
pm
.x
1118
4
948
826
4
948
948
4
948
942
5
948
948
5
948
948
5
948
948
5
948
.i
949
.t
integer
and
signed
constants
in
algol
.w
a
few
remarks
are
given
on
the
relations
between
syntax
and
semantics
in
the
programming
languages.
the
aim
is
to
point
out
that,
if
it
is
true
that
the
grammar
of
a
context-free
language
should
be
conceived
not
only
as
a
strings-generating
device
but
also
as
a
method
for
expressing
a
meaning,
then
the
grammar
of
algol
is
open
to
some
criticism.
.b
cacm
december,
1964
.a
petrone,
l.
vandoni,
c.
e.
.n
ca641222
jb
march
9,
1978
2:35
pm
.x
1086
4
949
1102
4
949
1132
4
949
1142
4
949
1234
4
949
1263
4
949
1265
4
949
1270
4
949
1323
4
949
1358
4
949
1379
4
949
1380
4
949
1453
4
949
1464
4
949
1484
4
949
1491
4
949
1498
4
949
1613
4
949
1614
4
949
1781
4
949
1781
4
949
1781
4
949
1825
4
949
1860
4
949
1945
4
949
1945
4
949
2083
4
949
2178
4
949
2179
4
949
2252
4
949
2325
4
949
2341
4
949
2546
4
949
2645
4
949
2652
4
949
2684
4
949
2842
4
949
2929
4
949
2934
4
949
3069
4
949
669
4
949
679
4
949
691
4
949
761
4
949
762
4
949
949
4
949
949
4
949
949
4
949
989
4
949
949
5
949
949
5
949
949
5
949
483
5
949
584
5
949
3184
5
949
.i
950
.t
parallel
methods
for
integrating
ordinary
differential
equations
.w
this
paper
is
dedicated
to
the
proposition
that,
in
order
to
take
full
advantage
for
real-time
computations
of
highly
parallel
computers
as
can
be
expected
to
be
available
in
the
near
future,
much
of
numerical
analysis
will
have
to
be
recast
in
a
more
"parallel"
form.
by
this
is
meant
that
serial
algorithms
ought
to
be
replaced
by
algorithm
which
consist
of
several
subtasks
which
can
be
computed
without
knowledge
of
the
results
of
the
other
subtasks.
as
an
example,
a
method
is
proposed
for
"parallelizing"
the
numerical
integration
of
an
ordinary
differential
equation,
which
process,
by
all
standard
methods,
is
entirely
serial.
.b
cacm
december,
1964
.a
nievergelt,
j.
.n
ca641221
jb
march
9,
1978
3:09
pm
.x
950
5
950
950
5
950
950
5
950
.i
951
.t
rational
chebyshev
approximations
to
the
bessel
function
integrals
kis(x)
.w
the
second
remes
algorithm
is
used
to
approximate
the
integrals
kis
by
rational
functions.
the
related
coefficients
for
the
approximations
of
ki1,
ki2,
ki3
are
given
for
different
precisions.
.b
cacm
december,
1964
.a
gargantini,
i.
pomentale,
t.
.n
ca641220
jb
march
9,
1978
3:12
pm
.x
1015
4
951
1346
4
951
1440
4
951
1645
4
951
951
4
951
951
5
951
951
5
951
951
5
951
1346
5
951
532
5
951
951
6
951
532
6
951
.i
952
.t
another
use
of
fortran
ii
chaining
.b
cacm
december,
1964
.a
drath,
d.
g.
.n
ca641219
jb
march
9,
1978
3:13
pm
.x
952
5
952
952
5
952
952
5
952
.i
953
.t
scanning
text
with
a
1401
.b
cacm
december,
1964
.a
baker,
j.
j.
.n
ca641218
jb
march
9,
1978
3:13
pm
.x
953
5
953
953
5
953
953
5
953
2870
5
953
953
6
953
2377
6
953
2632
6
953
.i
954
.t
a
note
on
the
calculation
of
probabilities
in
an
f-distribution
.b
cacm
december,
1964
.a
smillie,
k.
w.
anstey,
t.
h.
.n
ca641217
jb
march
9,
1978
3:14
pm
.x
954
5
954
954
5
954
954
5
954
.i
955
.t
a
class
of
matrices
to
test
inversion
procedures
.b
cacm
december,
1964
.a
cline,
r.
e.
.n
ca641216
jb
march
9,
1978
3:16
pm
.x
955
5
955
955
5
955
955
5
955
.i
956
.t
a
family
of
test
matrices
.b
cacm
december,
1964
.a
newbery,
a.
c.
r.
.n
ca641215
jb
march
9,
1978
3:17
pm
.x
956
5
956
956
5
956
956
5
956
.i
957
.t
method
for
partial
rewriting
of
magnetic
tape
.b
cacm
december,
1964
.a
miller,
j.
a.
.n
ca641214
jb
march
9,
1978
3:18
pm
.x
957
5
957
957
5
957
957
5
957
.i
958
.t
a
case
of
too
much
precision
.b
cacm
december,
1964
.a
synge,
m.
j.
.n
ca641213
jb
march
9,
1978
3:23
pm
.x
958
5
958
958
5
958
958
5
958
.i
959
.t
mark
sense
and
port-a-punch
programming
inputs
.b
cacm
december,
1964
.a
lubbert,
w.
f.
.n
ca641212
jb
march
9,
1978
3:24
pm
.x
959
5
959
959
5
959
959
5
959
.i
960
.t
curve
fitting
with
format
fortran
.b
cacm
december,
1964
.a
garber,
m.
j.
.n
ca641211
jb
march
9,
1978
3:25
pm
.x
960
5
960
960
5
960
960
5
960
.i
961
.t
limited
bit
manipulation
using
fortran
ii
.w
techniques
are
developed
for
manipulating
bits
using
only
fortran
ii.
these
techniques
allow
individual
bits
to
be
tested,
certain
fields
to
be
shifted,
and
numbers
coded
in
bcd
to
be
converted
to
binary.
.b
cacm
december,
1964
.a
oster,
c.
a.
.n
ca641210
jb
march
9,
1978
3:27
pm
.x
961
5
961
961
5
961
961
5
961
.i
962
.t
double-precision
squares
root
for
the
cdc-3600
.w
in
january
of
1960,
the
late
hans
j.
maehly
completed
a
summary
of
approximations
to
the
elementary
functions
for
the
cdc-1604
computer.
the
approximations
and
techniques
suggested
by
maehly
are
equally
applicable
to
the
second
large
computer
in
the
cdc
line,
the
3600.
unlike
the
1604,
however,
the
3600
has
built-in
double-precision
floating-point
arithmetic.
the
present
work,
largely
inspired
by
the
successes
of
maehly
and
his
associates,
concerns
the
extension
of
one
of
maehly's
ideas
to
a
double-precision
subroutine
for
the
3600.
.b
cacm
december,
1964
.a
cody,
w.
j.
.n
ca641209
jb
march
9,
1978
3:31
pm
.x
962
5
962
962
5
962
962
5
962
1440
5
962
1932
5
962
2159
5
962
962
6
962
962
6
962
962
6
962
1566
6
962
1932
6
962
532
6
962
.i
963
.t
relative
effects
of
central
processor
and
input-output
speeds
upon
throughput
on
the
large
computer
.w
presented
in
this
paper
is
a
technique
for
determining
the
relative
effects
of
the
internal
speed
of
the
computer
and
the
speed
of
the
input-output
units
upon
the
overall
speed
of
the
system.
equations
are
derived
which
permit
the
determination
of
these
effects
from
hardware
usage
measurements.
.b
cacm
december,
1964
.a
white,
p.
.n
ca641208
jb
march
9,
1978
3:34
pm
.x
963
5
963
963
5
963
963
5
963
1653
5
963
963
6
963
1069
6
963
1417
6
963
.i
964
.t
mechanization
of
tedious
algebra-the
e
coefficients
of
theoretical
chemistry
.w
a
table
of
formulas
for
certain
integrals
involving
legendre
functions
has
been
constructed
mechanically
by
a
program
which
performed
algebraic
operations.
the
formulas
are
all
rational
algebraic
expressions
in
a
single
variable
and
were
constructed
by
a
recurrence
procedure.
they
are
of
interest
in
molecular
quantum
chemistry.
trivial
coding
techniques
were
used
to
write
the
relevant
programs
in
fortran.
the
results
were
photo
composed
on
a
photon
s-560
system,
that
was
controlled
by
tapes
which
were
punched
directly
from
the
computer
output,
so
avoiding
manual
keyboarding,
transcription
errors
and
keyboarded
correction.
.b
cacm
december,
1964
.a
wactlar,
h.
d.
barnett,
m.
p.
.n
ca641207
jb
march
9,
1978
3:38
pm
.x
1028
4
964
1121
4
964
1216
4
964
1392
4
964
1396
4
964
1396
4
964
659
4
964
964
4
964
964
4
964
964
4
964
964
5
964
964
5
964
964
5
964
1334
5
964
1396
5
964
284
5
964
1444
5
964
561
5
964
759
5
964
964
6
964
964
6
964
964
6
964
1028
6
964
1029
6
964
1083
6
964
1132
6
964
1214
6
964
1278
6
964
1334
6
964
1365
6
964
1386
6
964
1387
6
964
1388
6
964
1392
6
964
1393
6
964
1394
6
964
1395
6
964
1396
6
964
1397
6
964
1496
6
964
284
6
964
407
6
964
3199
6
964
3200
6
964
3201
6
964
3202
6
964
3203
6
964
3204
6
964
561
6
964
730
6
964
.i
965
.t
greatest
common
divisor
(algorithm
237
[a1])
.b
cacm
december,
1964
.a
bray,
t.
a.
.n
ca641206
jb
march
9,
1978
3:40
pm
.x
965
5
965
965
5
965
965
5
965
.i
966
.t
evaluation
of
determinant
(algorithm
224
[f3])
.b
cacm
december,
1964
.a
hasselblad,
v.
rulifson,
j.
.n
ca641205
jb
march
9,
1978
3:41
pm
.x
966
5
966
966
5
966
966
5
966
.i
967
.t
complementary
error
function
(algorithm
181
[s15])
.b
cacm
december,
1964
.a
clausen,
i.
hansson,l.
.n
ca641204
jb
march
9,
1978
3:42
pm
.x
967
5
967
967
5
967
967
5
967
1583
5
967
831
6
967
967
6
967
1126
6
967
707
6
967
.i
968
.t
radical-inverse
quasi-random
point
sequence
(algorithm
247
[g5])
.b
cacm
december,
1964
.a
halton,
j.
h.
smith,
g.
b.
.n
ca641203
jb
march
9,
19783:43
pm
.x
968
5
968
968
5
968
968
5
968
.i
969
.t
graycode
(algorithm
246
[z])
.b
cacm
december,
1964
.a
boothroyd,
j.
.n
ca641202
jb
march
9,
1978
3:44
pm
.x
969
5
969
969
5
969
969
5
969
2834
5
969
969
6
969
2045
6
969
2417
6
969
2466
6
969
.i
970
.t
treesort
3
(algorithm
[m1])
.b
cacm
december,
1964
.a
floyd,
r.
w.
.n
ca641201
jb
march
9,
1978
3:45
pm
.x
970
5
970
970
5
970
970
5
970
2042
5
970
2222
5
970
2356
5
970
2679
5
970
2844
5
970
2972
5
970
970
6
970
970
6
970
970
6
970
970
6
970
970
6
970
970
6
970
1059
6
970
1175
6
970
1190
6
970
1228
6
970
1228
6
970
1491
6
970
1800
6
970
1818
6
970
1834
6
970
1969
6
970
1997
6
970
308
6
970
2042
6
970
2042
6
970
2204
6
970
2227
6
970
2597
6
970
2732
6
970
2738
6
970
2742
6
970
2767
6
970
3187
6
970
507
6
970
716
6
970
783
6
970
.i
971
.t
time
sharing
in
a
traffic
control
program
.w
the
toronto
traffic
signal
control
system
consists
of
a
variety
of
logically
distinct
computer
programs,
all
competing
for
machine
time.
to
satisfy
these
demands,
a
time-sharing
program
has
been
written
whose
purpose
is
to
execute,
in
the
order
of
a
predefined
priority,
the
various
subprograms
within
the
real-time
system.
in
this
paper
the
more
interesting
aspects
of
the
time-sharing
program
are
outlined.
.b
cacm
november,
1964
.a
green,
l.
e.
s.
.n
ca641112
jb
march
9,
1978
3:49
pm
.x
971
5
971
971
5
971
971
5
971
.i
972
.t
an
executive
system
implemented
as
a
finite-state
automaton
.w
the
473l
command
and
control
system
used
by
the
air
force
permits
many
operators
to
access
large
data
files
through
the
use
of
a
computer.
the
man-machine
interface
is
satisfied
by
several
communication
consoles
from
which
operators
may
enter
queries
and
view
replies.
a
data
link
permits
remote
stations
to
send
messages,
status
reports
and
inventories
directly
to
the
computer.
the
information
received
over
the
on-line
data
link
is
used
to
update
the
data
files
which
are
stored
on
disk.
the
473l
programming
system
is
divided
into
an
executive
control
program
and
five
components
with
different
processing
priorities.
these
priorities
permit
the
system
to
be
most
sensitive
to
the
console
inputs
and
permit
the
operators
at
all
the
consoles
to
time
share
the
central
processor.
the
executive
control
program
provides
for
the
orderly
transitions
of
control
among
the
programming
system
components.
the
major
emphasis
of
the
paper
is
on
the
technique
of
using
the
definition
of
a
finite-state
automaton
for
organizing
the
executive
control
program.
.b
cacm
november,
1964
.a
heistand,
r.
e.
.n
ca641111
jb
march
9,
1978
3:56
pm
.x
1471
4
972
1774
4
972
2911
4
972
560
4
972
972
4
972
972
4
972
972
4
972
972
5
972
972
5
972
972
5
972
271
5
972
273
5
972
276
5
972
.i
973
.t
estimation
of
heart
parameters
using
skin
potential
measurements
.w
a
fundamental
problem
of
vector
cardiography
is
the
estimation
of
the
state
of
the
heart
on
the
basis
of
skin
potential
measurements.
a
mathematical
model
relating
ventricular
dipoles
to
surface
potentials
is
sketched.
then
it
is
shown
that
the
inverse
problem-that
of
determining
electrical
heart
parameters
on
the
basis
of
skin
potential
measurements-may
be
viewed
as
a
nonlinear
multipoint
boundary
value
problem.
a
feasible
solution,
employing
quasilinearization
and
high-speed
digital
computers,
is
given.
.b
cacm
november,
1964
.a
bellman,
r.
collier,
c.
kagiwada,
h.
kalaba,
r.
selvester,
r.
.n
ca641110
jb
march
9,
1978
4:00
pm
.x
973
5
973
973
5
973
973
5
973
1278
5
973
973
6
973
1028
6
973
1029
6
973
.i
974
.t
a
technique
for
reading
gapless
tapes
makes
electrocardiograph
analysis
feasible
on
the
ibm
7090
.w
to
study
arrhythmias
and
higher
frequency
components
of
the
electrocardiogram,
long
series
of
patient
heart
cycles
must
be
examined
before
valid
comparison
of
different
heart
beats
can
be
made.
a
technique
is
presented
for
the
automatic
analysis
of
long
series
heart
cycles
via
a
digital
computer.
.b
cacm
november,
1964
.a
maher,
a.
s.
.n
ca641109
jb
march
9,
1978
4:03
pm
.x
974
5
974
974
5
974
974
5
974
.i
975
.t
the
new
program
of
work
for
the
international
standard
vocabulary
in
computers
and
information
processing
.b
cacm
november,
1964
.a
traub,
j.
f.
.n
ca641108
jb
march
9,
1978
4:05
pm
.x
975
5
975
975
5
975
975
5
975
1251
5
975
975
6
975
.i
976
.t
fresnel
integrals
(algorithm
213
[s20])
.b
cacm
november,
1964
.a
gray,
m.
.n
ca641107
jb
march
9,
1978
4:06
pm
.x
976
5
976
976
5
976
976
5
976
.i
977
.t
conversions
between
calendar
date
and
julian
day
number
(algorithm
199
[z])
.b
cacm
november,
1964
.a
oppenheim,
d.
k.
.n
ca641106
jb
march
9,
1978
4:08
pm
.x
977
5
977
977
5
977
977
5
977
.i
978
.t
fresnel
integrals
(algorithm
244
[s20])
.b
cacm
november,
1964
.a
lotsch,
h.
.n
ca641105
jb
march
9,1978
4:09
pm
.x
978
5
978
978
5
978
978
5
978
.i
979
.t
logarithm
of
a
complex
number
(algorithm
243
[b3])
.b
cacm
november,
1964
.a
collens,
d.
s.
.n
ca641104
jb
march
9,
1978
4:10
pm
.x
979
5
979
979
5
979
979
5
979
.i
980
.t
multiple-precision
arithmetic
and
the
exact
calculation
of
the
3-j,
6-j
and
9-j
symbols
.w
described
in
this
paper
is
a
system
of
general-purpose
multiple-precision
fixed-point
routines
and
their
use
in
subroutines
which
calculate
exactly
the
quantum-mechanical
3-j,
6-j
and
9-j
symbols
of
large
arguments.
.b
cacm
november,
1964
.a
maer,
r.
m.
redlich,
m.
g.
.n
ca641103
jb
march
9,
1978
4:13
pm
.x
980
5
980
980
5
980
980
5
980
.i
981
.t
rounding
problems
in
commercial
data
processing
.w
a
common
requirement
in
commercial
data
processing
is
that
the
sum
of
a
set
of
numbers,
rounded
in
a
generally
understood
manner,
be
equal
to
the
sum
of
the
numbers
rounded
individually.
four
rounding
procedures
are
described
to
accomplish
this.
the
particular
procedure
that
is
appropriate
depends
upon
whether
the
numbers
being
accumulated
can
vary
in
sign,
whether
their
sum
can
vary
in
sign,
and
whether
the
last
number
being
summed
can
be
recognized
as
such
prior
to
its
rounding.
.b
cacm
november,
1964
.a
kelley,
t.
b.
.n
ca641102
jb
march
9,
1978
4:25
pm
.x
981
5
981
981
5
981
981
5
981
.i
982
.t
an
inductive
approach
to
language
translation
.w
the
possibility
of
natural
language
translation
by
means
of
fixed
operations
on
example
translations
is
considered.
the
conception
of
sentence
translation
which
motivates
the
work
is
informally
presented,
and
the
measurement
of
physical
similarity
in
pairs
of
strings
is
discussed,
a
notion
which
plays
a
central
role
in
the
proposed
type
of
translator.
experimental
evidence
is
presented
in
support
of
the
premise
upon
which
this
conception
is
based.
.b
cacm
november,
1964
.a
faulk,
r.
d.
.n
ca641101
jb
march
9,
1978
4:28
pm
.x
982
5
982
982
5
982
982
5
982
1592
5
982
982
6
982
1112
6
982
619
6
982
.i
983
.t
take-up
reels
for
one-inch
perforated
tape
for
information
interchange
(proposed
american
standard)
.b
cacm
october,
1964
.n
ca641019
jb
march
9,
1978
4:30
pm
.x
983
5
983
983
5
983
983
5
983
.i
984
.t
report
on
input-output
procedures
for
algol
60
(ifip)
.b
cacm
october,
1964
.n
ca641018
jb
march
9,
1978
4:32
pm
.x
984
5
984
984
5
984
984
5
984
1705
5
984
1945
5
984
2034
5
984
823
6
984
914
6
984
915
6
984
917
6
984
984
6
984
984
6
984
984
6
984
986
6
984
989
6
984
990
6
984
1012
6
984
1020
6
984
1084
6
984
1098
6
984
1122
6
984
1138
6
984
1139
6
984
1141
6
984
1200
6
984
1223
6
984
1231
6
984
1265
6
984
1321
6
984
1336
6
984
1396
6
984
1455
6
984
1477
6
984
1487
6
984
1491
6
984
1496
6
984
1565
6
984
1852
6
984
1926
6
984
1947
6
984
483
6
984
584
6
984
669
6
984
680
6
984
763
6
984
.i
985
.t
report
on
subset
algol
60
(ifip)
.b
cacm
october,
1964
.n
ca641017
jb
march
9,
1978
4:33
pm
.x
985
5
985
985
5
985
985
5
985
.i
986
.t
proposed
amendment
to
proposed
american
standard
on
specification
for
general-purpose
paper
cards
for
information
processing
.b
cacm
october,
1964
.n
ca641016
jb
march
9,
1978
4:35
pm
.x
986
5
986
986
5
986
986
5
986
1705
5
986
984
6
986
986
6
986
1020
6
986
1321
6
986
.i
987
.t
fortran
vs.
basic
fortran
(a
programming
language
for
information
processing
on
automatic
data
processing
systems)
.b
cacm
october,
1964
.n
ca641015
jb
march
9,
1978
4:36
pm
.x
987
5
987
987
5
987
987
5
987
1613
5
987
1646
5
987
1900
5
987
1955
5
987
2025
5
987
2154
5
987
2365
5
987
2506
5
987
3060
5
987
830
6
987
987
6
987
987
6
987
987
6
987
987
6
987
987
6
987
987
6
987
987
6
987
987
6
987
987
6
987
988
6
987
988
6
987
1072
6
987
1086
6
987
1134
6
987
1179
6
987
1453
6
987
1647
6
987
1754
6
987
1900
6
987
1900
6
987
1924
6
987
2154
6
987
2362
6
987
3184
6
987
680
6
987
.i
988
.t
history
and
summary
of
fortran
standardization
development
for
the
asa
.b
cacm
october,
1964
.a
heising,
w.
p.
.n
ca641014
jb
march
9,
1978
4:37
pm
.x
988
5
988
988
5
988
988
5
988
1845
5
988
1900
5
988
2083
5
988
2154
5
988
2270
5
988
2693
5
988
987
6
988
987
6
988
988
6
988
988
6
988
988
6
988
988
6
988
988
6
988
988
6
988
1900
6
988
2270
6
988
2696
6
988
3184
6
988
.i
989
.t
a
method
of
syntax
specification
.b
cacm
october,
1964
.a
iverson,
k.
e.
.n
ca641013
jb
march
9,
1978
4:39
pm
.x
249
4
989
254
4
989
272
4
989
1086
4
989
1102
4
989
1109
4
989
1132
4
989
1140
4
989
1188
4
989
1234
4
989
1263
4
989
1265
4
989
1270
4
989
1306
4
989
1323
4
989
1358
4
989
1379
4
989
1380
4
989
1453
4
989
1464
4
989
1464
4
989
1484
4
989
1491
4
989
1491
4
989
1498
4
989
1613
4
989
1614
4
989
1767
4
989
1781
4
989
1781
4
989
1781
4
989
1787
4
989
1825
4
989
1860
4
989
1949
4
989
321
4
989
2059
4
989
2083
4
989
2126
4
989
2178
4
989
2179
4
989
2252
4
989
2325
4
989
2341
4
989
2546
4
989
435
4
989
437
4
989
463
4
989
483
4
989
491
4
989
2645
4
989
2652
4
989
2684
4
989
2732
4
989
2842
4
989
2929
4
989
2934
4
989
560
4
989
583
4
989
3069
4
989
3073
4
989
627
4
989
631
4
989
632
4
989
642
4
989
644
4
989
653
4
989
669
4
989
679
4
989
680
4
989
691
4
989
729
4
989
761
4
989
761
4
989
762
4
989
763
4
989
123
4
989
140
4
989
919
4
989
949
4
989
989
4
989
989
4
989
989
4
989
196
5
989
989
5
989
989
5
989
989
5
989
1263
5
989
288
5
989
1453
5
989
1945
5
989
3184
5
989
823
6
989
914
6
989
915
6
989
917
6
989
984
6
989
989
6
989
989
6
989
989
6
989
990
6
989
1012
6
989
1084
6
989
1098
6
989
1122
6
989
1138
6
989
1139
6
989
1141
6
989
1200
6
989
1223
6
989
1265
6
989
1336
6
989
1396
6
989
1455
6
989
1477
6
989
1487
6
989
1491
6
989
1496
6
989
404
6
989
483
6
989
3184
6
989
3184
6
989
584
6
989
669
6
989
680
6
989
763
6
989
.i
990
.t
constraint-type
statements
in
programming
languages
.w
a
proposal
is
made
for
including
in
a
programming
language
statements
which
imply
relations
between
variables
but
which
are
not
explicit
assignment
statements.
the
compiler
sets
up
a
newtonian
iteration
making
use
for
the
purpose
of
a
routine
for
formal
differentiation.
.b
cacm
october,
1964
.a
wilkes,
m.
v.
.n
ca641012
jb
march
9,
1978
4:42
pm
.x
990
5
990
990
5
990
990
5
990
1781
5
990
1945
5
990
2341
5
990
823
6
990
123
6
990
196
6
990
914
6
990
915
6
990
917
6
990
919
6
990
984
6
990
989
6
990
990
6
990
990
6
990
990
6
990
1007
6
990
1012
6
990
1046
6
990
1084
6
990
1098
6
990
1122
6
990
1131
6
990
1138
6
990
1139
6
990
1139
6
990
1140
6
990
1141
6
990
1149
6
990
1198
6
990
1200
6
990
1215
6
990
1223
6
990
1223
6
990
1265
6
990
1265
6
990
1303
6
990
1323
6
990
1336
6
990
1358
6
990
1366
6
990
1396
6
990
1421
6
990
1455
6
990
1460
6
990
1462
6
990
1463
6
990
1467
6
990
1468
6
990
1468
6
990
1466
6
990
1477
6
990
1477
6
990
1487
6
990
1491
6
990
1491
6
990
1496
6
990
1496
6
990
1531
6
990
1535
6
990
1565
6
990
1601
6
990
1602
6
990
1613
6
990
1614
6
990
1626
6
990
1641
6
990
1787
6
990
1788
6
990
205
6
990
224
6
990
249
6
990
288
6
990
316
6
990
381
6
990
398
6
990
11
6
990
404
6
990
410
6
990
463
6
990
464
6
990
483
6
990
483
6
990
3184
6
990
3184
6
990
3188
6
990
584
6
990
584
6
990
600
6
990
669
6
990
680
6
990
680
6
990
691
6
990
763
6
990
763
6
990
799
6
990
.i
991
.t
gamma
function
with
controller
accuracy
(algorithm
225
[s14])
.b
cacm
october,
1964
.a
bray,
t.
a.
.n
ca641011
jb
march
9,
1978
4:44
pm
.x
991
5
991
991
5
991
991
5
991
.i
992
.t
gamma
function
(algorithm
221
[s14])
.b
cacm
october,
1964
.a
mccombs,
v.
k.
.n
ca641010
jb
march
9,
1978
4:45
pm
.x
992
5
992
992
5
992
992
5
992
.i
993
.t
kutta
merson
(algorithm
218
[d2])
.b
cacm
october,
1964
.a
priebe,
k.
b.
.n
ca641009
jb
march
9,
1978
4:46
pm
.x
993
5
993
993
5
993
993
5
993
.i
994
.t
stringsort
(algorithm
207
[m1])
.b
cacm
october,
1964
.a
blair,
c.
r.
.n
ca641008
jb
march
9,
1978
4:47
pm
.x
994
5
994
994
5
994
994
5
994
.i
995
.t
steep1
(algorithm
203
[e4])
.b
cacm
october,
1964
.a
wallack,
p.
.n
ca641007
jb
march
9,
1978
4:48
pm
.x
995
5
995
995
5
995
995
5
995
.i
996
.t
permutations
of
a
set
with
repetitions
(algorithm
242
[g6])
.b
cacm
october,
1964
.a
sag,
t.
w.
.n
ca641006
jb
march
9,
1978
4:49
pm
.x
996
5
996
996
5
996
996
5
996
2044
5
996
996
6
996
1558
6
996
2230
6
996
521
6
996
.i
997
.t
patent
protection
of
computer
programs
.b
cacm
october,
1964
.a
jacobs,
m.
c.
.n
ca641005
jb
march
9,
1978
4:50
pm
.x
997
5
997
997
5
997
997
5
997
1711
5
997
997
6
997
1001
6
997
.i
998
.t
computer
programs
are
patentable
.b
cacm
october,
1964
.a
hamlin,
k.
b.
.n
ca641004
jb
march
9,
1978
4:53
pm
.x
998
5
998
998
5
998
998
5
998
.i
999
.t
joint
inventorship
of
computers
.b
cacm
october,
1964
.a
hauptman,
g.
a.
.n
ca641003
jb
march
9,
19784:54
pm
.x
999
5
999
999
5
999
999
5
999
.i
1000
.t
computer
patent
disclosures
.b
cacm
october,
1964
.a
kates,
j.
p.
.n
ca641002
jb
march
9,
1978
4:55
pm
.x
1000
5
1000
1000
5
1000
1000
5
1000
.i
1001
.t
copyright
aspects
of
computer
usage
.w
this
paper
is
concerned
with
the
question
of
what
constitutes
infringement
of
a
copyright
on
a
book
or
other
nondramatic
literary
work
when
the
work
is
fed
into
a
computer
and
is
indexed,
analyzed,
partially
reprinted,
or
otherwise
utilized
by
the
computer
to
produce
eye-readable
output.
the
question
of
copyrightability
of
programs
and
infringement
of
copyrights
on
programs
is
also
discussed.
the
paper
is
directed
primarily
to
a
discussion
of
the
present
law.
some
aspects
of
the
proposed
new
copyright
law
are
also
included.
general
recommendations
are
made
with
respect
to
the
proposed
revision
of
the
copyright
law.
.b
cacm
october,
1964
.a
lawlor,
r.
c.
.n
ca641001
jb
march
9,
1978
4:59
pm
.x
1001
5
1001
1001
5
1001
1001
5
1001
1711
5
1001
997
6
1001
1001
6
1001
.i
1002
.t
a
rapid
method
for
digital
filtering
.w
since
much
of
the
computer
time
spent
in
time-series
analysis
is
used
for
multiplications,
a
minimum
multiplication
method
was
devised
for
digital
filtering,
with
the
expectation
that
it
would
be
useful
in
the
on
line,
real-time
analysis
of
biological
data.
the
filters
are
constructed
from
a
succession
of
readily
analyzable
components
in
a
manner
that
facilitates
cascading.
the
repertoire
of
frequency
response
curves
includes
relatively
good
low-pass
and
band-pass
designs.
programs
are
available
for
implementing
both
the
synthesis
of
these
filters,
and
their
application
on
computers
whose
assemblers
allow
the
definition
of
recursive
macros.
.b
cacm
september,
1964
.a
whittlesey,
j.
r.
b.
.n
ca640909
jb
march
9,
1978
5:03
pm
.x
1002
5
1002
1002
5
1002
1002
5
1002
.i
1003
.t
a
computer
analysis
method
for
thermal
diffusion
in
biochemical
systems
.w
in
the
thermal
detection
of
rapid
biochemical
reactions
it
is
necessary
to
correct
the
temperature
data
for
transient
heat
conduction
losses
in
a
cylindrical
calorimeter.
to
handle
the
complexities
arising
from
varying
thermal-relaxation
times
of
concentric
insulating
layers,
a
computer
program
was
developed
which
gives
the
temperature
distribution
of
the
system
as
a
function
of
radius
and
time.
this
distribution
is
corrected
at
each
step
by
a
subroutine
which
calculates
the
instantaneous
chemical
state
of
there
action,
as
well
as
the
heat
produced
by
this
reaction.
the
program
is
based
on
a
direct
statement
of
fourier's
law
of
heat
conduction
and
the
chemical
rate
equation
to
provide
a
"bookkeeping
law"
to
follow
the
reactants
and
the
flow
of
heat
packets,
in
such
a
way
that
the
computer
continually
stores
the
heat
distribution.
a
computer
analysis
method
is
here
regarded
as
one
in
which
the
physical
laws
of
a
process
are
used
explicitly
in
the
program.
usually
this
results
in
by
passing
much
of
the
mathematical
procedures
conventionally
used.
the
program
was
tested
against
some
known
exact
solutions
of
the
heat
equation
and
gave
identical
results,
and
compared
well
with
experimental
data
of
a
known
biochemical
reaction.
the
construction
of
computer
programs
based
on
the
direct
statement
of
the
physical
laws
is
a
principle
of
general
applicability
which
has
been
applied
to
several
other
physical
phenomena.
.b
cacm
september,
1964
.a
davids,
n.
berger,
r.
l.
.n
ca640908
jb
march
9,
1978
5:13
pm
.x
1003
5
1003
1003
5
1003
1003
5
1003
.i
1004
.t
arctangent
(algorithm
[b1])
.b
cacm
september,
1964
.a
mills,
k.
w.
.n
ca640907
jb
march
9,
1978
6:08
pm
.x
1004
5
1004
1004
5
1004
1004
5
1004
.i
1005
.t
coordinates
on
an
ellipsoid
(algorithm
240
[z])
.b
cacm
september,
1964
.a
dorrer,
e.
.n
ca640906
jb
march
9,
1978
6:09
pm
.x
1005
5
1005
1005
5
1005
1005
5
1005
.i
1006
.t
a
storage
allocation
and
reference
structure
.w
a
method
is
proposed
and
discussed
which
allows
a
subscripted-variable
capability
(in
the
fortran
sense)
to
be
added
to
autocoder-type
assembly
systems.
.b
cacm
september,
1964
.a
fitzwater,
d.
r.
.n
ca640905
jb
march
9,
1978
6:11
pm
.x
1006
5
1006
1006
5
1006
1006
5
1006
1788
5
1006
1006
6
1006
1007
6
1006
205
6
1006
3189
6
1006
.i
1007
.t
extension
of
existing
compilers
by
sophisticated
use
of
macros
.w
a
description
is
presented
of
an
application
in
which
macros
and
string
concatenation
were
employed
to
add
a
new
facility
to
belfap.
.b
cacm
september,
1964
.a
benett,
r.
k.
neumann,
h.
d.
.n
ca640904
jb
march
9,
1978
6:13
pm
.x
1007
5
1007
1007
5
1007
1007
5
1007
1781
5
1007
1788
5
1007
123
6
1007
196
6
1007
919
6
1007
990
6
1007
1006
6
1007
1007
6
1007
1007
6
1007
1046
6
1007
1131
6
1007
1139
6
1007
1140
6
1007
1149
6
1007
1198
6
1007
1215
6
1007
1223
6
1007
1265
6
1007
1303
6
1007
1323
6
1007
1358
6
1007
1366
6
1007
1421
6
1007
1460
6
1007
1462
6
1007
1463
6
1007
1467
6
1007
1468
6
1007
1477
6
1007
1491
6
1007
1496
6
1007
1531
6
1007
1535
6
1007
1565
6
1007
1601
6
1007
1602
6
1007
1613
6
1007
1614
6
1007
1626
6
1007
1641
6
1007
1787
6
1007
1788
6
1007
205
6
1007
205
6
1007
224
6
1007
249
6
1007
288
6
1007
316
6
1007
381
6
1007
398
6
1007
11
6
1007
404
6
1007
410
6
1007
463
6
1007
464
6
1007
483
6
1007
3184
6
1007
3188
6
1007
3189
6
1007
584
6
1007
600
6
1007
680
6
1007
691
6
1007
763
6
1007
799
6
1007
.i
1008
.t
scheduling
meetings
with
a
computer
.w
computer
scheduling
of
papers
as
it
was
developed
for
the
1960
meeting
of
the
federation
of
american
societies
for
experimental
biology
(faseb)
is
described.
the
faseb
meeting
is
the
largest
scientific
meeting
held
in
the
united
states
each
year.
the
technique
developed
for
faseb
can
be
applied
to
schedule
any
meeting
with
parallel
sessions.
.b
cacm
september,
1964
.a
schultz,
c.
k.
brooks,
a.
schwartz,
p.
.n
ca640903
jb
march
9,
1978
6:16
pm
.x
1008
5
1008
1008
5
1008
1008
5
1008
2052
5
1008
1008
6
1008
1013
6
1008
1504
6
1008
1540
6
1008
.i
1009
.t
solution
of
combinatorial
problems
using
generating
functions
on
a
variable-field
computer
.w
the
utility
of
generating
functions
in
solving
combinatorial
problems
is
discussed.
particular
implementation
results
are
presented
and
evaluated.
.b
cacm
september,
1964
.a
weinberg,
g.
m.
.n
ca640902
jb
march
9,
1978
6:17
pm
.x
1009
5
1009
1009
5
1009
1009
5
1009
.i
1010
.t
a
multiuser
computation
facility
for
education
and
research
.w
present-day
computing
facilities
are
limited
in
their
value
for
scientific
research
by
inability
to
interact
strongly
with
users.
the
full
power
of
a
research
computing
instrument
should
be
available
at
many
terminals
that
give
each
user
the
ability
to
generate,
correct
and
operate
any
procedure
he
wishes,
either
simple
or
complex.
implementation
is
described
for
a
small-scale
multiuser
computer
system
that
permits
several
users
to
work
independently
with
the
machine,
and
to
obtain
satisfactory
response
using
typewriter
communication.
.b
cacm
september,
1964
.a
dennis,
j.
b.
.n
ca640901
jb
march
9,
1978
6:22
pm
.x
1010
5
1010
1010
5
1010
1010
5
1010
.i
1011
.t
logarithm
of
a
complex
number
(algorithm
48
[b3])
.b
cacm
august,
1964
.a
collens,
d.
s.
.n
ca640819
jb
march
23,
1978
7:54
pm
.x
1011
5
1011
1011
5
1011
1011
5
1011
.i
1012
.t
formal
parsing
systems
.w
automatic
syntactic
analysis
has
recently
become
important
for
both
natural
language
data
processing
and
syntax-directed
compilers.
a
formal
parsing
system
g
=
(v,u,t,r)
consists
of
two
finite
disjoint
vocabularies,
v
and
t,
a
many-many
map,
u,
from
v
onto
t,
and
a
recursive
set
r
of
strings
in
t
called
syntactic
sentence
classes.
every
program
for
automatic
syntactic
analysis
determines
a
formal
parsing
system.
a
directed
production
analyzer
(i,t,x,p)
is
a
nondeterministic
pushdown-store
machine
with
internal
vocabulary
i,
input
vocabulary
t,
and
all
productions
of
p
in
the
form:
(z,a)
->
ay1
...
ym
where
z,
yi
are
elements
of
the
set
i
and
a
is
an
element
of
the
set
t.
every
context-free
language
can
be
analyzed
by
a
directed
production
analyzer.
the
kuno-oettinger
multiple-path
syntactic
analyzer
for
english
is
a
concrete
example
of
a
directed
production
analyzer
and
of
a
working
parsing
algorithm.
the
connection
between
structures
assigned
by
the
analyzer
and
those
of
a
conventional
phrase
structure
grammar
is
examined
in
this
paper.
.b
cacm
august,
1964
.a
greibach,
s.
a.
.n
ca640818
jb
march
9,
1978
6:30
pm
.x
1012
5
1012
1012
5
1012
1012
5
1012
1225
5
1012
1350
5
1012
1945
5
1012
823
6
1012
914
6
1012
915
6
1012
917
6
1012
984
6
1012
989
6
1012
990
6
1012
1012
6
1012
1012
6
1012
1012
6
1012
1084
6
1012
1098
6
1012
1122
6
1012
1138
6
1012
1139
6
1012
1141
6
1012
1200
6
1012
1223
6
1012
1225
6
1012
1265
6
1012
1265
6
1012
1336
6
1012
1396
6
1012
1399
6
1012
1455
6
1012
1477
6
1012
1487
6
1012
1491
6
1012
1496
6
1012
483
6
1012
584
6
1012
669
6
1012
680
6
1012
680
6
1012
680
6
1012
763
6
1012
.i
1013
.t
final
examination
scheduling
.w
a
method
for
scheduling
final
examinations
to
yield
a
minimal
number
of
student
conflicts
is
described.
the
"minimization"
is
achieved
by
repetitively
evaluating
a
nonlinear
set
of
equations.
imbeded
in
the
process
is
a
random
or
monte
carlo
selection
of
assignments.
as
in
such
heuristic
techniques,
the
solution
may
not
be
optimum
and
many
solutions
may
be
found
which
yield
locally
minimal
results.
computer
programs
are
described
and
empirical
results
given.
.b
cacm
august,
1964
.a
broder,
s.
.n
ca640817
jb
march
9,
1978
6:33
pm
.x
1013
5
1013
1013
5
1013
1013
5
1013
1609
5
1013
2052
5
1013
1008
6
1013
1013
6
1013
1013
6
1013
1504
6
1013
1540
6
1013
.i
1014
.t
machine
controls
for
analysis
of
variance
.w
a
major
problem
in
using
the
analysis
of
variance,
as
the
number
of
factors
increases,
is
the
exponential
rise
in
the
number
of
interactions.
even
though
the
experimenter
may
not
be
interested
in
these
interactions
it
is
impossible
to
ignore
them
in
most
experimental
designs
because
of
the
problem
of
getting
error
terms.
it
is
natural
therefore
to
look
to
the
computer
to
handle
the
bulk
of
work
involved
in
computing
the
interactions.
a
program
device
to
get
the
computer
to
do
this
is
described.
.b
cacm
august,
1964
.a
weldon,
r.
j.
.n
ca640816
jb
march
9,
1978
6:37
pm
.x
1014
4
1014
912
5
1014
1014
5
1014
1014
5
1014
1014
5
1014
.i
1015
.t
near-minimax
polynomial
approximations
and
partitioning
of
intervals
.w
a
method
of
near-minimax
polynomial
approximation
is
described.
as
a
by-product,
this
method
provides
a
formula
for
an
estimate
of
the
maximum
error
associated
with
a
given
degree
of
approximation.
using
this
formula,
a
partitioning
algorithm
is
obtained
for
dividing
a
basic
interval
into
subintervals
for
which
approximations
of
equal
degree
give
equal
maximum
error.
.b
cacm
august,
1964
.a
fraser,
w.
hart,
j.
f.
.n
ca640815
jb
march
9,
1978
6:41
pm
.x
1015
4
1015
1346
4
1015
1440
4
1015
1645
4
1015
951
4
1015
1015
5
1015
1015
5
1015
1015
5
1015
532
5
1015
.i
1016
.t
interchangcable
perforated
tape
variable
block
formats
for
positioning
and
straight
cut
(rs-273)
and
contouring
and
contouring/positioning
(rs-274)
numerically
controlled
machine
tools
(proposed
american
standards)
.b
cacm
august,
1964
.n
ca640814
jb
march
9,
1978
6:43
pm
.x
1016
5
1016
1016
5
1016
1016
5
1016
.i
1017
.t
comments
on
bit-sequencing
of
the
ascii
in
serial-by-bit
data
transmission
.b
cacm
august,
1964
.a
bemer,
r.
w.
booth,
j.
.n
ca640813
jb
march
9,
1978
6:45
pm
.x
1017
5
1017
1017
5
1017
1017
5
1017
.i
1018
.t
gauss
(algorithm
209
[s15])
.b
cacm
august,
1964
.a
pike,
m.
c.
.n
ca640812
jb
march
9,
1978
6:54
pm
.x
1018
5
1018
1018
5
1018
1018
5
1018
.i
1019
.t
xy
move
plotting
(algorithm
162
[j6])
.b
cacm
august,
1964
.a
cavin,
d.
k.
.n
ca640811
jb
march
9,
1978
6:55
pm
.x
1019
5
1019
1019
5
1019
1019
5
1019
.i
1020
.t
free
field
read
(algorithm
239
[i5])
.b
cacm
august,
1964
.a
mckeeman,
w.
m.
.n
ca640810
jb
march
9,
1978
6:56
pm
.x
1020
5
1020
1020
5
1020
1020
5
1020
1705
5
1020
984
6
1020
986
6
1020
1020
6
1020
1321
6
1020
.i
1021
.t
conjugate
gradient
method
(algorithm
238
[f4])
.b
cacm
august,
1964
.a
reeves,
c.
m.
.n
ca640809
jb
march
9,
1978
6:59
pm
.x
1021
5
1021
1021
5
1021
1021
5
1021
.i
1022
.t
greatest
common
divisor
(algorithm
237
[a1])
.b
cacm
august,
1964
.a
peck,
j.
e.
l.
.n
ca640808
jb
march
9,
1978
7:17
pm
.x
1022
5
1022
1022
5
1022
1022
5
1022
2031
5
1022
1022
6
1022
450
6
1022
.i
1023
.t
bessel
functions
of
the
first
kind
(algorithm
236
[s17])
.b
cacm
august,
1964
.a
gautschi,
w.
.n
ca640807
jb
march
9,
1978
7:19
pm
.x
1023
4
1023
1222
4
1023
1023
5
1023
1023
5
1023
1023
5
1023
1130
5
1023
1909
5
1023
2119
5
1023
134
6
1023
1023
6
1023
1023
6
1023
1284
6
1023
1316
6
1023
2129
6
1023
.i
1024
.t
a
note
on
the
formation
of
free
list
.b
cacm
august,
1964
.a
waite,
w.
m.
.n
ca640806
jb
march
9,
1978
7:20
pm
.x
1024
4
1024
1024
4
1024
1051
4
1024
1051
4
1024
1098
4
1024
1102
4
1024
1132
4
1024
1214
4
1024
1380
4
1024
1388
4
1024
1390
4
1024
1393
4
1024
1485
4
1024
1486
4
1024
1487
4
1024
1549
4
1024
1549
4
1024
1570
4
1024
1706
4
1024
1826
4
1024
1878
4
1024
1878
4
1024
1946
4
1024
1957
4
1024
378
4
1024
2060
4
1024
2155
4
1024
2168
4
1024
2168
4
1024
2719
4
1024
2723
4
1024
2723
4
1024
2838
4
1024
2842
4
1024
2855
4
1024
2857
4
1024
2879
4
1024
3077
4
1024
3080
4
1024
3106
4
1024
3112
4
1024
627
4
1024
106
4
1024
1024
5
1024
1024
5
1024
1024
5
1024
210
5
1024
731
5
1024
.i
1025
.t
a
method
of
syntax-checking
algol
60
.w
a
syntax
checker
was
designed
based
on
the
syntax
of
algol
as
described
in
the
algol
60
report
[communications
of
the
acm,
may,
1960].
since
the
definition
of
the
elements
of
the
language
is
recursive
it
seemed
most
desirable
to
design
the
syntax
checker
as
a
set
of
mutually
recursive
processors
tied
together
by
subroutines
which
perform
certain
bookkeeping
functions.
because
of
the
recursive
nature
of
the
language
and
of
the
syntax
checker
the
problem
of
recovery
after
an
error
required
much
attention.
a
method
was
devised
which
permits
most
programs
to
be
checked
completely
despite
errors.
.b
cacm
august,
1964
.a
lietzke,
m.
p.
.n
ca640805
jb
march
9,
1978
7:24
pm
.x
1025
5
1025
1025
5
1025
1025
5
1025
1215
5
1025
1682
5
1025
1025
6
1025
1025
6
1025
1785
6
1025
224
6
1025
763
6
1025
.i
1026
.t
divide-and-correct
methods
for
multiple
precision
division
.w
a
division
problem
is
defined
and
notation
to
relate
it
to
the
problem
of
multiple
precision
operation
in
a
digital
computer
is
introduced.
a
basic
divide-and-correct
method
for
multiple
precision
division
is
formulated
and
its
known
properties
briefly
reviewed.
of
particular
interest
is
the
fact
that
the
method
produces
at
each
step
a
set
of
precisely
three
estimates
for
the
desired
result,
one
of
which
is
exact.
.b
cacm
august,
1964
.a
stein,
m.
l.
.n
ca640804
jb
march
9,
1978
7:27
pm
.x
1026
4
1026
1258
4
1026
1292
4
1026
1497
4
1026
107
5
1026
1026
5
1026
1026
5
1026
1026
5
1026
1258
5
1026
1292
5
1026
1497
5
1026
1975
5
1026
2605
5
1026
107
6
1026
107
6
1026
107
6
1026
1026
6
1026
1026
6
1026
1026
6
1026
1026
6
1026
1026
6
1026
1292
6
1026
1292
6
1026
1497
6
1026
1593
6
1026
2286
6
1026
.i
1027
.t
an
alternate
checksum
method
.b
cacm
august,
1964
.a
newhall,
n.
s.
.n
ca640803
jb
march
9,
1978
7:28
pm
.x
1027
5
1027
1027
5
1027
1027
5
1027
.i
1028
.t
investigation
of
a
new
analytical
method
for
numerical
derivative
evaluation
.w
a
recently
proposed
analytical
approach
to
numerical
derivative
evaluation
is
discussed.
the
technique
is
shown
to
be
both
accurate
and
easy
to
apply,
though
certain
indicated
modifications
are
required.
its
use
should
greatly
facilitate
the
writing
and
debugging
of
programs
requiring
derivatives
of
highly
complex
functions.
.b
cacm
august,
1964
.a
wilkins,
r.
d.
.n
ca640802
jb
march
9,
1978
7:31
pm
.x
1028
4
1028
1028
4
1028
1216
4
1028
1216
4
1028
1278
4
1028
1347
4
1028
1392
4
1028
1396
4
1028
1396
4
1028
1536
4
1028
964
4
1028
1028
5
1028
1028
5
1028
1028
5
1028
1029
5
1028
1216
5
1028
1278
5
1028
1347
5
1028
1396
5
1028
561
5
1028
964
6
1028
973
6
1028
1028
6
1028
1028
6
1028
1028
6
1028
1028
6
1028
1029
6
1028
1029
6
1028
1029
6
1028
1029
6
1028
1083
6
1028
1132
6
1028
1214
6
1028
1278
6
1028
1278
6
1028
1334
6
1028
1365
6
1028
1386
6
1028
1387
6
1028
1388
6
1028
1392
6
1028
1393
6
1028
1394
6
1028
1395
6
1028
1396
6
1028
1397
6
1028
1496
6
1028
284
6
1028
407
6
1028
3199
6
1028
3200
6
1028
3201
6
1028
3202
6
1028
3203
6
1028
3204
6
1028
561
6
1028
561
6
1028
730
6
1028
.i
1029
.t
a
simple
automatic
derivative
evaluation
program
.w
a
procedure
for
automatic
evaluation
of
total/partial
derivatives
of
arbitrary
algebraic
functions
is
presented.
the
technique
permits
computation
of
numerical
values
of
derivatives
without
developing
analytical
expressions
for
the
derivatives.
the
key
to
the
method
is
the
decomposition
of
the
given
function,
by
introduction
of
intermediate
variables,
into
a
series
of
elementary
functional
steps.
a
library
of
elementary
function
subroutines
is
provided
for
the
automatic
evaluation
and
differentiation
of
these
new
variables.
the
final
step
in
this
process
produces
the
desired
function's
derivative.
the
main
feature
of
this
approach
is
its
simplicity.
it
can
be
used
as
a
quick-reaction
tool
where
the
derivation
of
analytical
derivatives
is
laborious
and
also
as
a
debugging
tool
for
programs
which
contain
derivatives.
.b
cacm
august,
1964
.a
wengert,
r.
e.
.n
ca640801
jb
march
9,
1978
7:38
pm
.x
1028
5
1029
1029
5
1029
1029
5
1029
1029
5
1029
1216
5
1029
1278
5
1029
1347
5
1029
1396
5
1029
1536
5
1029
964
6
1029
973
6
1029
1028
6
1029
1028
6
1029
1028
6
1029
1028
6
1029
1029
6
1029
1029
6
1029
1029
6
1029
1029
6
1029
1029
6
1029
1029
6
1029
1083
6
1029
1132
6
1029
1214
6
1029
1278
6
1029
1278
6
1029
1334
6
1029
1365
6
1029
1386
6
1029
1387
6
1029
1388
6
1029
1392
6
1029
1393
6
1029
1394
6
1029
1395
6
1029
1396
6
1029
1397
6
1029
1496
6
1029
284
6
1029
407
6
1029
3199
6
1029
3200
6
1029
3201
6
1029
3202
6
1029
3203
6
1029
3204
6
1029
561
6
1029
561
6
1029
561
6
1029
730
6
1029
.i
1030
.t
techniques
for
the
simulation
of
computer
logic
.w
the
simulation
of
a
digital
computer
is
an
integral
part
of
most
computer
design
automation
systems.
the
evaluation
of
the
boolean
functions
which
characterize
the
computer
being
simulated
constitutes
one
major
portion
of
a
simulation
system.
four
general
procedural
classes
for
evaluating
these
functions
are
defined.
toward
greatly
increased
efficiency
of
a
simulation
system,
methods
are
presented
for
simultaneously
evaluating
many
functions
for
one
set
of
values
of
the
variables,and
for
evaluating
simultaneously
one
function
for
many
sets
of
values
for
the
variables.
.b
cacm
july,
1964
.a
breuer,m.
a.
.n
ca640717
jb
march
9,
1978
7:42
pm
.x
1030
4
1030
1886
4
1030
1939
4
1030
1030
5
1030
1030
5
1030
1030
5
1030
1261
5
1030
1939
5
1030
678
5
1030
1030
6
1030
1030
6
1030
678
6
1030
.i
1031
.t
a
note
on
starting
the
newton-raphson
method
.w
determination
of
a
suitable
initial
estimate
for
a
root
of
an
equation
f(x)
=
0
by
means
of
computing
the
roots
of
a
sequence
of
related
equations
is
described.
.b
cacm
july,
1964
.a
beyer,
w.
a.
.n
ca640716
jb
march
9,
1978
7:44
pm
.x
1031
5
1031
1031
5
1031
1031
5
1031
.i
1032
.t
theoretical
considerations
in
information
retrieval
systems
.w
information
storage
and
retrieval
systems
are
composed
of
three
major
components:
(a)
identification
of
information
and
tagging
it
for
effective
retrieval,
(b)
searching
strategy,
how
to
enter
the
file
to
circumvent
the
scanning
of
nonrelevant
material,
and
(c)
file
organization
to
make
access
to
information
efficient.
for
identification
of
information
the
paper
suggests
that
a
metalanguage
(recently
discussed
in
a
paper
by
goffman,
verhoeff
and
belzer)
associated
with
an
object
language
be
used.
for
searching
strategy,
a
linear
model
for
an
evaluation
function
of
relevancy
is
developed
which
rewards
the
system
for
retrieving
relevant
documents
and
not
retrieving
the
nonrelevant,
and
penalizes
the
system
for
the
escaped
relevant
documents
and
false
drops.
the
inadequacies
of
a
linear
model
are
indicated.
two
approaches
to
file
organization
are
discussed.
one
is
self-organization
of
the
file
based
on
its
history
and
past
performance,
and
the
second
is
a
self-generating
subset
of
the
file
with
a
high
probability
of
being
relevant.
.b
cacm
july,
1964
.a
belzer,
j.
goffman,
w.
.n
ca640715
jb
march
9,
1978
7:55
pm
.x
1032
5
1032
1032
5
1032
1032
5
1032
.i
1033
.t
experimental
personalized
array
translator
system
.w
a
system
designed
for
intimate
man-machine
interaction
in
a
general-purpose
problem-solving
environment
is
experimentally
operational.
the
system
utilizers
an
array-oriented
symbolic
source
language
containing
powerful
statement
types.
these
include
numeric,
boolean,
relational
and
selection
operators
on
operands
which
can
be
entire
arrays.
the
system
also
permits
simple
specification
of
test
and
argument
arrays
in
single
statements.
the
completely
symbolic
operating
system
includes
display
and
entry
of
program
and
data.
sequence
control
is
aided
by
an
interrupt
switch
which
allows
the
user
to
interact
with
the
program
during
execution.
in
addition
to
normal
stored
program
sequencing,
the
system
provides
trace
options
and
the
ability
to
enter
any
statement
for
immediate
execution.
present
implementation
of
the
system
is
with
an
interpretive
translator
on
an
ibm
1620
computer.
.b
cacm
july,
1964
.a
hellerman,
h.
.n
ca640714
jb
march
9,
1978
8:02
pm
.x
1033
5
1033
1033
5
1033
1033
5
1033
.i
1034
.t
autosate
.w
an
automated
data
system
analysis
technique
is
described.
the
technique
is
designed
to
alleviate
some
of
the
principal
problems
that
beset
current
analysis-large
data
workloads,
long
span
of
time
between
project
inception
and
system
operational
date,
the
lack
of
explicit
directions
for
conducting
data
system
analysis
and
using
the
results,
and
the
lack
of
a
technique
to
control
data
system
changes
throughout
its
lifetime.
the
analysis
is
geared
to
determining
workload,
relationships
and
storage
characteristics
of
documents
in
the
information
network
automatically.
.b
cacm
july,
1964
.a
gatto,
o.
t.
.n
ca640713
jb
march
9,
19788:07
pm
.x
1034
5
1034
1034
5
1034
1034
5
1034
.i
1035
.t
characteristics
of
the
fortran
cep
language
.w
the
fortran
cep
languages
differs
from
fortran
ii
mainly
because:
(1)
it
extends
the
variety
of
the
modes
for
real
quantities;
(2)
it
allows
suitable
mixtures,
in
an
input/output
list
or
in
an
expression,
of
quantities
that
occur
under
different
modes;
(3)
it
makes
it
possible
to
address
a
greater
number
of
input/output
equipment;
and
(4)
it
removes
the
restrictions
on
the
complexity
of
the
list
of
quantities
to
be
transmitted
between
the
magnetic
core
memory
and
the
drum
or
the
magnetic
tape
units.
.b
cacm
july,
1964
.a
mancino.
o.
g.
.n
ca640712
jb
march
9,
1978
8:11
pm
.x
1035
5
1035
1035
5
1035
1035
5
1035
1305
5
1035
1035
6
1035
.i
1036
.t
remark
on
further
generalization
of
algol
.b
cacm
july,
1963
.a
garwick,
j.
v.
.n
ca640710
jb
march
9,
1978
8:12
pm
.x
1036
5
1036
1036
5
1036
1036
5
1036
.i
1037
.t
reduction
of
a
matrix
containing
polynomial
elements
(algorithm
170
[f3])
.b
cacm
july,
1964
.a
priebe,
k.
b.
.n
ca640710
jb
march
9,
1978
8:13
pm
.x
1037
4
1037
1234
4
1037
1358
4
1037
1491
4
1037
1037
5
1037
1037
5
1037
1037
5
1037
729
5
1037
.i
1038
.t
crout
with
equilibration
and
iteration
(algorithm
135
[f4])
.b
cacm
july,
1964
.a
mckeeman,
w.
m.
.n
ca640709
jb
march
9,
1978
8:15
pm
.x
1038
5
1038
1038
5
1038
1038
5
1038
.i
1039
.t
summation
of
fourier
series
(algorithm
128
[c6])
.b
cacm
july,
1964
.a
thacher
jr.,
h.
c.
.n
ca640708
jb
march
9,
1978
8:16
pm
.x
1039
5
1039
1039
5
1039
1039
5
1039
.i
1040
.t
romberg
integration(algorithm
60
[d1])
.b
cacm
july,
1964
.a
thacher
jr.,
h.
c.
.n
ca640707
jb
march
9,
1978
8:17
pm
.x
1040
4
1040
1040
4
1040
1040
4
1040
1352
4
1040
2040
4
1040
1040
5
1040
1040
5
1040
1040
5
1040
1352
5
1040
2415
5
1040
587
5
1040
621
5
1040
885
5
1040
834
6
1040
872
6
1040
1040
6
1040
1040
6
1040
1092
6
1040
1241
6
1040
1273
6
1040
1982
6
1040
324
6
1040
2074
6
1040
429
6
1040
570
6
1040
621
6
1040
786
6
1040
.i
1041
.t
random
permutation
(algorithm
235
[g6])
.b
cacm
july,
1964
.a
durstenfeld,
r.
.n
ca640706
jb
march
9,
1978
8:18
pm
.x
1041
5
1041
1041
5
1041
1041
5
1041
.i
1042
.t
poisson-charlier
polynomials
(algorithm
234
[s23])
.b
cacm
july,
1964
.a
simoes
pereira,
j.
m.
s.
.n
ca640705
jb
march
9,
1978
8:19
pm
.x
1042
5
1042
1042
5
1042
1042
5
1042
.i
1043
.t
talk-a
high-level
source
language
debugging
technique
with
real-time
data
extraction
.w
talk,
meaning
take
a
look,
is
a
debugging
technique
which
aids
substantially
in
debugging
complex
real-time
programming
systems
by
interrupting
the
users
program
at
desired
points
to
extract
previously
specified
data.
the
extracted
data
is
later
edited,
listing
the
associated
data
with
its
high-level
source
language
identification.
.b
cacm
july,
1964
.a
versteeg,
r.
l.
.n
ca640704
jb
march
9,
1978
8:24
pm
.x
1043
5
1043
1043
5
1043
1043
5
1043
.i
1044
.t
an
automatic
loader
for
subroutine
nests
.w
a
method
for
automatic
loading
of
library
subroutines,
which
can
be
adapted
to
operate
in
conjunction
with
any
conventional
two-pass
assembler
is
described.
the
method
is
specifically
designed
to
cope
with
a
nested
library
structure.
.b
cacm
july,
1964
.a
kanner,
h.
.n
ca640703
jb
march
9,
1978
8:27
pm
.x
1044
5
1044
1044
5
1044
1044
5
1044
1332
5
1044
1044
6
1044
.i
1045
.t
programming
analysis
of
variance
by
sequences
of
operators
and
isomorphic
mappings
.w
a
special
operator
calculus
developed
by
hartley
in
1956
together
with
a
new
mapping
scheme
has
been
found
to
be
efficient
in
programming
analysis
of
variance
for
multifactor
experiments.
the
operator
calculus
and
the
mapping
scheme
are
described
in
detail.
.b
cacm
july,
1964
.a
peng,
k.
c.
.n
ca640702
jb
march
9,
1978
8:30
pm
.x
1045
5
1045
1045
5
1045
1045
5
1045
1404
5
1045
1045
6
1045
.i
1046
.t
a
compiler-building
system
developed
by
brooker
and
morris
.w
in
a
number
of
articles
published
during
the
past
two
years,
r.
a.
brooker
and
d.
morris
(joined
by
j.s.
rohl
in
their
most
recent
paper
have
presented
a
very
interesting
programming
system
that
they
have
developed
for
the
ferranti
atlas
computer.
the
present
paper
describes
some
of
the
major
features
of
their
system.
it
expands
on
some
points
that
the
original
authors
cover
briefly,
and
treats
only
very
lightly
some
topics
to
which
they
devote
considerable
space.
the
purpose
of
this
paper
is
purely
expository.
except
in
some
very
small
details,
and
in
some
comments,
it
does
not
intentionally
depart
from
or
add
to
the
material
published
in
the
listed
references.
.b
cacm
july,
1964
.a
rosen,
s.
.n
ca640701
jb
march
9,
1978
8:47
pm
.x
1046
4
1046
1105
4
1046
1139
4
1046
1140
4
1046
1234
4
1046
1263
4
1046
1265
4
1046
1496
4
1046
1781
4
1046
1824
4
1046
2126
4
1046
2546
4
1046
464
4
1046
584
4
1046
631
4
1046
653
4
1046
680
4
1046
763
4
1046
795
4
1046
799
4
1046
945
4
1046
1046
5
1046
1046
5
1046
1046
5
1046
1781
5
1046
404
5
1046
123
6
1046
196
6
1046
919
6
1046
990
6
1046
1007
6
1046
1046
6
1046
1131
6
1046
1139
6
1046
1140
6
1046
1149
6
1046
1198
6
1046
1215
6
1046
1223
6
1046
1265
6
1046
1303
6
1046
1323
6
1046
1358
6
1046
1366
6
1046
1421
6
1046
1460
6
1046
1462
6
1046
1463
6
1046
1467
6
1046
1468
6
1046
1477
6
1046
1491
6
1046
1496
6
1046
1531
6
1046
1535
6
1046
1565
6
1046
1601
6
1046
1602
6
1046
1613
6
1046
1614
6
1046
1626
6
1046
1641
6
1046
1787
6
1046
1788
6
1046
205
6
1046
224
6
1046
249
6
1046
288
6
1046
316
6
1046
381
6
1046
398
6
1046
11
6
1046
404
6
1046
410
6
1046
463
6
1046
464
6
1046
483
6
1046
3184
6
1046
3188
6
1046
584
6
1046
600
6
1046
680
6
1046
691
6
1046
763
6
1046
799
6
1046
.i
1047
.t
generation
of
test
matrices
by
similarity
transformations
.w
a
method
for
obtaining
test
matrices
with
a
prescribed
distribution
of
characteristic
roots
is
given.
the
process
consists
of
using
particularly
simple
similarity
transformations
to
generate
full
matrices
from
canonical
forms.
the
matrices
generated
also
have
known
characteristic
vectors,
inverses
and
determinants.
.b
cacm
june,
1964
.a
ortega,
j.
m.
.n
ca640620
jb
march
9,
1978
8:50
pm
.x
1047
4
1047
1047
5
1047
1047
5
1047
1047
5
1047
1707
5
1047
496
5
1047
1047
6
1047
511
6
1047
.i
1048
.t
approximate
solution
of
axially
symmetric
problems
.w
a
variety
of
physical
problems
in
such
diverse
fields
as
electrostatic
field
theory,
heat
and
ideal
fluid
flow,
and
stress
concentration
theory
reduce,
under
the
assumption
of
axial
symmetry,
to
the
study
of
an
elliptic
partial
differential
equation.
dirichlet-type
problems
associated
with
this
equation
are
studied
on
regions
whose
boundaries
include
a
nondegenerate
portion
of
the
x-axis
and
exceedingly
accurate
numerical
methods
are
given
for
approximating
solutions.
.b
cacm
june,
1964
.a
greenspan,
d.
.n
ca640619
jb
march
9,
1978
8:55
pm
.x
1048
5
1048
1048
5
1048
1048
5
1048
.i
1049
.t
numerical
solution
of
nonlinear
two-point
boundary
problems
by
finite
difference
methods
.w
solution
of
nonlinear
two-point
boundary-value
problems
is
often
an
extremely
difficult
task.
quite
apart
from
questions
of
reality
and
uniqueness,
there
is
no
established
numerical
technique
for
this
problem.
at
present,
shooting
techniques
are
the
easiest
method
of
attacking
these
problems.
when
these
fail,
the
more
difficult
method
of
finite
differences
can
often
be
used
to
obtain
a
solution.
this
paper
gives
examples
and
discusses
the
finite
difference
method
for
non-linear
two-point
boundary-value
problems.
.b
cacm
june,
1964
.a
holt,
j.
f.
.n
ca640618
jb
march
9,
1978
9:07
pm
.x
1049
4
1049
1049
5
1049
1049
5
1049
1049
5
1049
416
5
1049
.i
1050
.t
a
parts
breakdown
technique
using
list
structures
.w
list
structured
parts
breakdown
is
proposed
and
discussed.
implementation
facts
are
presented
on
operating
program
using
these
techniques.
.b
cacm
june,
1964
.a
brian,
w.
j.
.n
ca640617
jb
march
9,
1978
9:09
pm
.x
1050
4
1050
1050
4
1050
1050
4
1050
1050
4
1050
1050
4
1050
1102
4
1050
1226
4
1050
1393
4
1050
1549
4
1050
1549
4
1050
1935
4
1050
1936
4
1050
378
4
1050
2017
4
1050
2023
4
1050
2032
4
1050
2257
4
1050
2360
4
1050
2451
4
1050
2452
4
1050
441
4
1050
2723
4
1050
2882
4
1050
3008
4
1050
3112
4
1050
627
4
1050
731
4
1050
731
4
1050
758
4
1050
793
4
1050
798
4
1050
106
5
1050
1050
5
1050
1050
5
1050
1050
5
1050
209
5
1050
367
5
1050
627
5
1050
849
5
1050
.i
1051
.t
multiword
list
items
.w
the
list
concept
as
originally
proposed
by
newell,
simon
and
shaw
specified
single
computer
words
as
elements
of
a
list.
this
report
describes
the
use
of
two
or
more
consecutive
words
as
one
element.
such
use
results
in
a
considerable
saving
in
both
the
space
required
to
hold
a
given
amount
of
data,
and
in
the
execution
time
required
to
perform
a
given
process
on
the
data.
following
a
brief
description
of
standard
list
structures
with
single-word
items,
the
multiword
items
are
introduced.
then
variable-length
items
are
described,
along
with
the
corresponding
space-utilization
problems.
finally,
several
examples
are
given
to
illustrate
the
use
of
multiword
lists.
this
paper
attempts
to
draw
together
various
recent
papers
which
have
applied
some
of
these
concepts
in
different
ways,
and
indicate
how
they
relate
to
the
more
general
problems.
.b
cacm
june,
1964
.a
comfort,
w.
t.
.n
ca640616
jb
march
9,
1978
9:15
pm
.x
1024
4
1051
1024
4
1051
1051
4
1051
1051
4
1051
1051
4
1051
1051
4
1051
1051
4
1051
1051
4
1051
1062
4
1051
1098
4
1051
1102
4
1051
1102
4
1051
1132
4
1051
1214
4
1051
1380
4
1051
1388
4
1051
1390
4
1051
1393
4
1051
1485
4
1051
1486
4
1051
1487
4
1051
1549
4
1051
1549
4
1051
1549
4
1051
1552
4
1051
1570
4
1051
1665
4
1051
1706
4
1051
1826
4
1051
1860
4
1051
1878
4
1051
1878
4
1051
1946
4
1051
1957
4
1051
378
4
1051
2060
4
1051
2155
4
1051
2155
4
1051
2168
4
1051
2168
4
1051
2719
4
1051
2723
4
1051
2723
4
1051
2838
4
1051
2842
4
1051
2855
4
1051
2857
4
1051
2879
4
1051
3077
4
1051
3080
4
1051
3106
4
1051
3112
4
1051
627
4
1051
106
4
1051
1051
5
1051
1051
5
1051
1051
5
1051
1211
5
1051
210
5
1051
1549
5
1051
1906
5
1051
378
5
1051
2902
5
1051
406
5
1051
731
5
1051
793
5
1051
794
5
1051
106
6
1051
1051
6
1051
1051
6
1051
1051
6
1051
1051
6
1051
1062
6
1051
1062
6
1051
1184
6
1051
1211
6
1051
1552
6
1051
210
6
1051
1879
6
1051
2435
6
1051
2596
6
1051
2734
6
1051
2747
6
1051
2768
6
1051
406
6
1051
627
6
1051
731
6
1051
753
6
1051
.i
1052
.t
reducing
truncation
errors
by
programming
.w
in
accumulating
a
sum
such
as
in
a
numerical
integration
with
a
large
number
of
intervals,
the
sum
itself
becomes
much
larger
than
the
individual
addends.
this
may
produce
a
less
accurate
sum
as
the
number
of
intervals
is
increased.
separate
variables
can
be
established
as
accumulators
to
hold
partial
sums
within
various
distinct
intervals.
thus,
the
extensive
successive
truncations
are
eliminated.
.b
cacm
june,
1964
.a
wolfe,
j.
m.
.n
ca640615
jb
march
9,
1978
9:22
pm
.x
1052
5
1052
1052
5
1052
1052
5
1052
1328
5
1052
1333
5
1052
2144
5
1052
1052
6
1052
1052
6
1052
1052
6
1052
.i
1053
.t
design
and
implementation
of
a
general-purpose
input
routine
.w
a
general-purpose
input
routine
is
discussed
and
advocated
for
fortran.
the
philosophy
of
such
programs
is
examined
and
exemplified.
.b
cacm
june,
1964
.a
hassitt,
a.
.n
ca640614
jb
march
9,
1978
9:27
pm
.x
1053
4
1053
1053
4
1053
1053
4
1053
1053
4
1053
720
4
1053
1053
5
1053
1053
5
1053
1053
5
1053
1649
5
1053
435
5
1053
474
5
1053
718
5
1053
720
5
1053
1053
6
1053
.i
1054
.t
gauss-seidel
(algorithm
220
)
.b
cacm
june,
1964
.a
batson,
a.
p.
.n
ca640613
jb
march
9,
1978
9:28
pm
.x
1054
5
1054
1054
5
1054
1054
5
1054
.i
1055
.t
q-bessel
functions
in(t)
(algorithm
214)
.b
cacm
june,1964
.a
simoes
pereira,
j.
m.
s.
.n
ca640612
jb
march
9,
1978
9:29
pm
.x
1055
5
1055
1055
5
1055
1055
5
1055
.i
1056
.t
shellsort
(algorithm
201)
.b
cacm
june,
1964
.a
batty,
m.
a.
.n
ca640611
jb
march
9,
1978
9:30
pm
.x
1056
5
1056
1056
5
1056
1056
5
1056
.i
1057
.t
critical
path
scheduling
(algorithm
40)
.b
cacm
june,
1964
.a
hoffman,
i.
a.
.n
ca640610
jb
march
9,
1978
9:32
pm
.x
1057
5
1057
1057
5
1057
1057
5
1057
.i
1058
.t
simpson's
rule
for
multiple
integration
(algorithm
233)
.b
cacm
june,
1964
.a
olynyk,
f.
.n
ca640609
jb
march
9,
1978
9:33
pm
.x
1058
5
1058
1058
5
1058
1058
5
1058
.i
1059
.t
heapsort
(algorithm
232)
.b
cacm
june,
1964
.a
williams,
j.
w.
j.
.n
ca640608
jb
march
9,
1978
9:34
pm
.x
1059
5
1059
1059
5
1059
1059
5
1059
2757
5
1059
2844
5
1059
970
6
1059
1059
6
1059
1059
6
1059
2630
6
1059
2742
6
1059
2767
6
1059
.i
1060
.t
matrix
inversion
(algorithm
231)
.b
cacm
june,
1964
.a
boothroyd,
j.
.n
ca640607
jb
march
9,
1978
9:35
pm
.x
1060
5
1060
1060
5
1060
1060
5
1060
.i
1061
.t
matrix
permutation
(algorithm
230)
.b
cacm
june,
1964
.a
boothroyd,
j.
.n
ca640606
jb
march
9,
1978
9:36
pm
.x
1061
5
1061
1061
5
1061
1061
5
1061
.i
1062
.t
symbol
manipulation
in
fortran-sasp
i
subroutines
.w
a
set
of
subroutines
for
use
in
fortran
are
described
whose
purpose
is
to
synthesize
output
strings
from
(i)
input
strings
which
have
been
analyzed
by
the
shadow
general
syntactic
analysis
subroutine
reported
earlier,
and/or
(ii)
packed
bcd
strings
formed
in
any
way.
function-type
subroutines
are
included
for
intermediate
manipulations,
which
are
performed
on
the
strings
which
are
stored
in
an
abbreviated
internal
representation.
the
automatic
way
in
which
an
internal
representation
for
each
newly
created
substring
is
stored
sequentially
in
a
block
of
common
storage,
and
the
manner
in
which
a
storage
block
is
dynamically
allocated
for
that
purpose,
are
discussed.
.b
cacm
june,
1964
.a
bailey,
m.
j.
barnett,
m.
p.
burleson,
p.
b.
.n
ca640605
jb
march
9,
1978
9:43
pm
.x
1051
4
1062
1062
4
1062
1062
4
1062
1121
4
1062
1139
4
1062
1265
4
1062
1781
4
1062
720
4
1062
759
4
1062
1062
5
1062
1062
5
1062
1062
5
1062
1211
5
1062
2902
5
1062
464
5
1062
794
5
1062
1051
6
1062
1051
6
1062
1062
6
1062
1062
6
1062
1184
6
1062
1211
6
1062
1552
6
1062
1879
6
1062
2435
6
1062
2596
6
1062
2734
6
1062
2747
6
1062
2768
6
1062
.i
1063
.t
one-inch
perforated
paper
tape
for
information
interchange
(proposed
american
standard)
.b
cacm
june,
1964
.n
ca640604
jb
march
9,
1978
9:44
pm
.x
1063
5
1063
1063
5
1063
1063
5
1063
.i
1064
.t
perforated
tape
code
for
information
interchange
(proposed
american
standard)
.b
cacm
june,
1964
.n
ca640603
jb
march
9,
1978
9:46
pm
.x
1064
5
1064
1064
5
1064
1064
5
1064
.i
1065
.t
bit
sequencing
of
the
american
standard
code
for
information
interchange
(ascii)
in
serial-by-bit
data
transmission
(proposed
american
standard)
.b
cacm
june,
1964
.n
ca640602
jb
march
9,
1978
9:47
pm
.x
1065
5
1065
1065
5
1065
1065
5
1065
.i
1066
.t
growing
applications
of
linear
programming
.w
use
of
linear
programming
models
has
grown
so
extensively
in
recent
years
that
the
whole
concept
for
organizing
a
computer
code
has
undergone
a
radical
change.
it
no
longer
is
adequate
merely
to
reduce
a
mathematical
algorithm
(i.e.
the
simplex
method)
to
a
computer
code.
an
advanced
code
must
cope
with
such
a
variety
of
situations
that
the
respective
computer
subprograms
must
be
organized
into
an
integrated
system.
emphasis
in
this
paper
is
devoted
to
the
underlying
principles
upon
which
future
linear
programming
systems
must
be
based.
these
viewpoints
are
influenced
by
the
new
demands
that
applications
within
the
petroleum
industry
are
placing
on
such
systems.
some
of
the
components
of
such
a
system
are:
translation
of
problem
statement
in
terms
of
basic
data
to
linear
programming
matrix
coefficients,
data
transmission
for
direct
computer
entry,
data
file
at
the
computer
center,
data
processing
and
editing
prior
to
solving
the
simplex
algorithm,
an
efficient
and
reliable
code
for
solving
the
above-mentioned
algorithm,
and
flexible
means
for
summarizing
the
results.
.b
cacm
june,
1964
.a
aronofsky,
j.
s.
.n
ca640601
jb
march
9,
1978
9:55
pm
.x
1066
5
1066
1066
5
1066
1066
5
1066
.i
1067
.t
picture
generation
with
a
standard
line
printer
.w
a
method
is
described
for
producing
gray-toned
pictures
on
a
line
printer
by
utilizing
the
different
degrees
of
blackness
of
standard
print
characters.
gray
scales
with
17,
32
and
64
levels
have
been
devised.
scanned
images
of
blood
cells
are
used
to
display
the
technique.
.b
cacm
may,
1964
.a
perry,
b.
mendelsohn,
m.
l.
.n
ca640522
jb
march
9,
1978
11:31
pm
.x
1067
5
1067
1067
5
1067
1067
5
1067
.i
1068
.t
a
fortran
ii
load-time-saver
.b
cacm
may,
1964
.a
ackermann,
a.
f.
.n
ca640521
jb
march
9,
1978
11:33
pm
.x
1068
4
1068
1945
4
1068
917
5
1068
1068
5
1068
1068
5
1068
1068
5
1068
.i
1069
.t
a
method
for
comparing
the
internal
operating
speeds
of
computers
.b
cacm
may,
1964
.a
raichelson,
e.
collins,
g.
.n
ca640520
jb
march
9,
1978
11:35
pm
.x
1069
5
1069
1069
5
1069
1069
5
1069
1653
5
1069
2989
5
1069
963
6
1069
1069
6
1069
1069
6
1069
1417
6
1069
2138
6
1069
.i
1070
.t
expand,
a
system
for
input
card
replication
.b
cacm
may,
1964
.a
warrington,
j.
a.
norris,
j.
h.
.n
ca640519
jb
march
9,1978
11:37
pm
.x
1070
5
1070
1070
5
1070
1070
5
1070
.i
1071
.t
computer-usage
accounting
for
generalized
time-sharing
systems
.w
the
current
development
of
general
time-sharing
systems
requires
a
revision
of
accounting
procedures
for
computer
usage.
since
time-sharing
system
users
operate
concurrently,
it
is
necessary
to
be
more
precise
as
to
the
amount
of
computer
time
and
storage
space
that
a
user
actually
utilizes.
the
various
cost
factors
which
should
be
considered
for
computer
usage
accounting
in
generalized
time-sharing
systems
are
discussed.
.b
cacm
may,
1964
.a
rosenberg,
a.
m.
.n
ca640518
jb
march
9,
1978
11:40
pm
.x
1071
4
1071
1071
5
1071
1071
5
1071
1071
5
1071
3196
5
1071
.i
1072
.t
an
improved
equivalence
algorithm
.w
an
algorithm
for
assigning
storage
on
the
basis
of
equivalence,
dimension
and
common
declarations
is
presented.
the
algorithm
is
based
on
a
tree
structure,
and
has
reduced
computation
time
by
40
percent
over
a
previously
published
algorithm
by
identifying
all
equivalence
classes
with
one
scan
of
the
equivalence
declarations.
the
method
is
applicable
in
any
problem
in
which
it
is
necessary
to
identify
equivalence
classes,
given
the
element
pairs
defining
the
equivalence
relation.
.b
cacm
may,
1964
.a
galler,
b.
a.
fisher,
m.
j.
.n
ca640517
jb
march
9,
1978
11:48
pm
.x
1072
4
1072
1781
4
1072
1072
5
1072
1072
5
1072
1072
5
1072
1646
5
1072
316
5
1072
830
6
1072
987
6
1072
1072
6
1072
1179
6
1072
1647
6
1072
680
6
1072
.i
1073
.t
a
fast
procedure
for
generating
exponential
random
variables
.w
a
very
fast
method
for
generating
exponential
random
variables
in
a
digital
computer
is
outlined.
.b
cacm
may,
1964
.a
maclaren,
m.
d.
marsaglia,
g.
bray,
t.
a.
.n
ca640516
jb
march
9,
1978
11:50
pm
.x
1073
4
1073
1073
4
1073
1153
4
1073
2137
4
1073
2276
4
1073
940
5
1073
1073
5
1073
1073
5
1073
1073
5
1073
1153
5
1073
2276
5
1073
1073
6
1073
1153
6
1073
.i
1074
.t
shanks
(algorithm
215)
.b
cacm
may,
1964
.a
schumaker,
l.
.n
ca640515
jb
march
9,
1978
11:51
pm
.x
1074
5
1074
1074
5
1074
1074
5
1074
.i
1075
.t
shuttlesort
(algorithm
175)
.b
cacm
may,
1964
.a
juelich,
o.
c.
.n
ca640514
jb
march
9,
1978
11:52
pm
.x
1075
5
1075
1075
5
1075
1075
5
1075
.i
1076
.t
multiple
integration
(algorithm
146)
.b
cacm
may,
1964
.a
wirth,
n.
.n
ca640513
jb
march
9,
1978
11:53
pm
.x
1076
5
1076
1076
5
1076
1076
5
1076
.i
1077
.t
chebyshev
curve
fit
(algorithm
91)
.b
cacm
may,
1964
.a
naur,
p.
.n
ca640512
jb
march
9,
1978
11:53
pm
.x
1077
5
1077
1077
5
1077
1077
5
1077
.i
1078
.t
elementary
functions
by
continued
fractions
(algorithm
229)
.b
cacm
may,
1964
.a
morelock,
j.
c.
.n
ca640511
jb
march
9,
1978
11:55
pm
.x
1078
5
1078
1078
5
1078
1078
5
1078
.i
1079
.t
q-bessel
functions
(algorithm
228)
.b
cacm
may,
1964
.a
simoes
pereira,
j.
m.
s.
.n
ca640510
jb
march
9,
1978
11:56
pm
.x
1079
5
1079
1079
5
1079
1079
5
1079
.i
1080
.t
chebyshev
polynomial
coefficients
(algorithm
227)
.b
cacm
may,
1964
.a
cyvin,
s.
j.
.n
ca640509
jb
march
9,
1978
11:57
pm
.x
1080
5
1080
1080
5
1080
1080
5
1080
.i
1081
.t
normal
distribution
function
(algorithm
226)
.b
cacm
may,
1964
.a
cyvin,
s.
j.
.n
ca640508
jb
march
9,
1978
11:58
pm
.x
1081
5
1081
1081
5
1081
1081
5
1081
1157
5
1081
836
6
1081
1081
6
1081
485
6
1081
714
6
1081
.i
1082
.t
gamma
function
with
controlled
accuracy
(algorithm
225)
.b
cacm
may,
1964
.a
cyvin,
s.
j.
cyvin,
b.
n.
.n
ca640507
jb
march
9,
1978
11:59
pm
.x
1082
5
1082
1082
5
1082
1082
5
1082
.i
1083
.t
an
experiment
in
a
user-oriented
computer
system
.w
a
version
of
a
software-hardware
system
for
the
purpose
of
facilitating
the
programming
and
analysis
of
well-formulated
problems
is
described.
a
modified
flexowriter
is
used
to
generate
computer-acceptable
input
when
equations
or
computable
requests
are
typed
in
much
the
same
manner
as
they
would
appear
in
conventional
mathematical
texts.
the
typing
and
language
rules
are
quite
flexible
and
unrestrictive.
while
the
compiler
part
is
efficient,
the
system
as
a
whole
has
much
broader
aspects
as
a
tool
for
the
study
of
problem
solving
and
self-teaching
systems.
.b
cacm
may,
1964
.a
klerer,
m.
may,
j.
.n
ca640506
jb
march
10,
1978
12:03
am
.x
1083
4
1083
1083
4
1083
1083
4
1083
1083
4
1083
1396
4
1083
1396
4
1083
679
4
1083
1083
5
1083
1083
5
1083
1083
5
1083
1396
5
1083
1624
5
1083
407
5
1083
3192
5
1083
3193
5
1083
730
5
1083
964
6
1083
1028
6
1083
1029
6
1083
1083
6
1083
1083
6
1083
1132
6
1083
1214
6
1083
1278
6
1083
1334
6
1083
1365
6
1083
1386
6
1083
1387
6
1083
1388
6
1083
1392
6
1083
1393
6
1083
1394
6
1083
1395
6
1083
1396
6
1083
1397
6
1083
1496
6
1083
284
6
1083
407
6
1083
3199
6
1083
3200
6
1083
3201
6
1083
3202
6
1083
3203
6
1083
3204
6
1083
561
6
1083
730
6
1083
.i
1084
.t
on
declaring
arbitrarily
coded
alphabets
.w
the
inability
of
existing
programming
languages
to
handle
character
strings
from
more
than
one
or
two
alphabets
is
mentioned
and
a
scheme
for
declaring
additional
alphabets
is
proposed.
the
scheme
provides
for:
many-to-one
encodings,
right
or
left
justification,
collating
sequences
different
from
numeric
sequence,
variations
in
character
size
(number
of
bits.)
from
alphabet
to
alphabet,
and
arbitrary
source-language
character
representation.
.b
cacm
may,
1964
.a
shaw,
c.
j.
.n
ca640505
jb
march
10,1978
12:13
am
.x
1084
4
1084
1084
4
1084
1084
4
1084
1084
4
1084
1084
4
1084
1084
4
1084
1379
4
1084
1625
4
1084
1945
4
1084
1084
5
1084
1084
5
1084
1084
5
1084
1945
5
1084
603
5
1084
644
5
1084
669
5
1084
791
5
1084
797
5
1084
868
5
1084
823
6
1084
914
6
1084
915
6
1084
917
6
1084
984
6
1084
989
6
1084
990
6
1084
1012
6
1084
1084
6
1084
1098
6
1084
1122
6
1084
1138
6
1084
1139
6
1084
1141
6
1084
1200
6
1084
1223
6
1084
1265
6
1084
1336
6
1084
1396
6
1084
1455
6
1084
1477
6
1084
1487
6
1084
1491
6
1084
1496
6
1084
483
6
1084
584
6
1084
669
6
1084
680
6
1084
763
6
1084
.i
1085
.t
specification
for
general-purpose
paper
cards
for
information
processing
(proposed
american
standard)
.b
cacm
may,
1964
.n
ca640504
jb
march
10,
1978
12:14
am
.x
1085
5
1085
1085
5
1085
1085
5
1085
.i
1086
.t
a
proposal
for
input-output
conventions
in
algol
60-a
report
of
the
subcommittee
on
algol
of
the
acm
programming
language
committee
.b
cacm
may,
1964
.n
ca640501
jb
march
10,
1978
12:18
am
.x
1086
4
1086
1086
4
1086
1132
4
1086
1234
4
1086
1263
4
1086
1265
4
1086
1270
4
1086
1323
4
1086
1358
4
1086
1379
4
1086
1380
4
1086
1453
4
1086
1464
4
1086
1484
4
1086
1491
4
1086
1496
4
1086
1498
4
1086
1613
4
1086
1614
4
1086
1781
4
1086
1825
4
1086
1860
4
1086
2083
4
1086
2178
4
1086
2179
4
1086
2252
4
1086
2325
4
1086
2341
4
1086
2546
4
1086
2645
4
1086
2652
4
1086
2684
4
1086
2842
4
1086
2929
4
1086
2934
4
1086
3069
4
1086
669
4
1086
679
4
1086
691
4
1086
761
4
1086
949
4
1086
989
4
1086
1086
5
1086
1086
5
1086
1086
5
1086
1137
5
1086
1613
5
1086
3184
5
1086
987
6
1086
1086
6
1086
1134
6
1086
1453
6
1086
3184
6
1086
.i
1087
.t
problems
in
automatic
abstracting
.w
a
variety
of
problems
concerning
the
design
and
operation
of
an
automatic
abstracting
system
are
discussed.
the
purpose
is
to
a
general
view
of
several
major
problem
areas.
no
attempt
is
made
to
discuss
details
or
to
indicate
preferences
among
alternative
solutions.
.b
cacm
april,
1964
.a
edmundson,
h.
p.
.n
ca640422
jb
march
10,
1978
12:21
am
.x
1087
4
1087
634
4
1087
1087
5
1087
1087
5
1087
1087
5
1087
329
5
1087
.i
1088
.t
menu
planning
by
computer
.w
a
computer
code
has
been
developed
which
plans
menus
by
finding
minimum
cost
combinations
of
menu
items
such
that
the
daily
dietary,
gastronomic
and
production
requirements
can
be
satisfied
for
a
sequence
of
days.
a
fast,
special
integer
programming
algorithm
is
described
which
approximates
the
theoretical
solution
to
the
problem.
if
necessary,
any
menu
can
be
changed
on-line
and
then
post-optimized.
up
to
30
percent
saving
on
food
cost
is
possible.
a
fortran
program
for
the
ibm
1410
is
available
on
request.
a
considerable
amount
of
data
processing
must
precede
the
implementation
of
the
system.
.b
cacm
april,
1964
.a
balistfy,
j.
l.
.n
ca640421
jb
march
10,
1978
12:26
am
.x
1088
5
1088
1088
5
1088
1088
5
1088
1658
5
1088
1088
6
1088
.i
1089
.t
designing
a
computer
center
.b
cacm
april,
1964
.a
denison,
a.
popov,
g.
.n
ca640420
jb
march
10,
1978
12:29
am
.x
1089
5
1089
1089
5
1089
1089
5
1089
.i
1090
.t
incomplete
beta
function
ratios
(algorithm
222)
.b
cacm
april,
1964
.a
gautschi,
w.
.n
ca640418
jb
march
10,
1978
12:32
am
.x
1090
5
1090
1090
5
1090
1090
5
1090
.i
1091
.t
hypergeometric
and
confluent
hypergeometric
(algorithm
191
&
192)
.b
cacm
april,
1964
.a
thacher
jr.,
h.
c.
.n
ca640417
jb
march
10,
1978
12:33
am
.x
1091
5
1091
1091
5
1091
1091
5
1091
.i
1092
.t
nonrecursive
adaptive
integration
(algorithm
182)
.b
cacm
april,
1964
.a
butler,
h.
s.
.n
ca640416
jb
march
10,
1978
12:34
am
.x
1092
5
1092
1092
5
1092
1092
5
1092
1352
5
1092
2093
5
1092
834
6
1092
834
6
1092
872
6
1092
872
6
1092
1040
6
1092
1092
6
1092
1092
6
1092
1241
6
1092
1273
6
1092
1298
6
1092
1573
6
1092
324
6
1092
429
6
1092
429
6
1092
570
6
1092
621
6
1092
786
6
1092
.i
1093
.t
evaluation
of
determinant
(algorithm
224)
.b
cacm
april,
1964
.a
rotenberg,
l.
j.
.n
ca640415
jb
march
10,
1978
1:12
am
.x
1093
5
1093
1093
5
1093
1093
5
1093
1946
5
1093
878
6
1093
902
6
1093
1093
6
1093
1177
6
1093
1387
6
1093
1393
6
1093
360
6
1093
731
6
1093
.i
1094
.t
prime
twins
(algorithm
223)
.b
cacm
april,
1964
.a
shimrat,
m.
.n
ca640414
jb
march
10,
1978
1:13
am
.x
1094
5
1094
1094
5
1094
1094
5
1094
.i
1095
.t
decimal
tables
of
binary
coded
tables
.b
cacm
april,
1964
.a
griebrok,
m.
.n
ca640413
jb
march
10,
1978
1:14
am
.x
1095
5
1095
1095
5
1095
1095
5
1095
.i
1096
.t
on
avoiding
matrix
reversals
between
7090
fortran
ii
and
7090
fortran
iv
.b
cacm
april,
1964
.a
stevens,
d.
benson,
b.
.n
ca640412
jb
march
10,
1978
1:28
am
.x
1096
5
1096
1096
5
1096
1096
5
1096
.i
1097
.t
an
algorithm
for
converting
integers
from
base
a
to
base
b
.w
a
little
known,
simple
algorithm
for
integer
conversion
between
number
systems
is
presented
and
proved.
.b
cacm
april,
1964
.a
gladwin,
h.
t.
.n
ca640411
jb
march
10,
1978
1:30
am
.x
1097
5
1097
1097
5
1097
1097
5
1097
.i
1098
.t
a
comparison
of
list-processing
computer
languages
(including
a
detailed
comparison
of
comit,
ipl-v,
lisp
1.5,
and
slip)
.w
a
detailed
comparison
is
presented
of
comit,
ipl-v,
lisp
1.5
and
slip
-
four
well-known
computer
programming
languages
which,
among
them,
exhibit
all
the
principal
characteristics
of
existing
list-processing
languages.
important
common
features
of
list-processing
languages
are
reviewed:
forms
of
data
structures
which
are
manipulated,
necessity
for
dynamic
allocation
of
storage,
use
of
pushdown
stores,
and
use
of
recursive
operations.
principal
differences
between
the
four
languages
under
consideration
are
detailed:
representations
of
data,
both
by
the
programmer
and
within
the
machine;
methods
for
storage
allocation;
programming
formalisms
and
special
processes
available,
including
arithmetic
facilities;
and
usability
in
terms
of
availability,
documentation,
learning
aids
and
debugging
facilities.
a
rough
comparison
shows
that
all
the
languages
discussed
have
approximately
the
same
speed.
finally,
the
authors
give
some
heuristics
to
aid
in
the
selection
of
one
of
these
languages
for
use
in
particular
problem
applications,
concluding
that
no
one
of
the
languages
considered
is
distinctly
superior
in
all
possible
list-processing
applications.
.b
cacm
april,
1964
.a
bobrow,
d.
g.
raphael,
b.
.n
ca640410
jb
march
10,
1978
1:37
am
.x
1024
4
1098
1051
4
1098
1098
4
1098
1214
4
1098
1380
4
1098
1388
4
1098
1393
4
1098
1485
4
1098
1487
4
1098
1549
4
1098
1570
4
1098
1878
4
1098
1946
4
1098
1957
4
1098
2168
4
1098
2723
4
1098
2857
4
1098
3112
4
1098
1098
5
1098
1098
5
1098
1098
5
1098
1570
5
1098
1945
5
1098
2314
5
1098
731
5
1098
823
6
1098
914
6
1098
915
6
1098
917
6
1098
984
6
1098
989
6
1098
990
6
1098
1012
6
1098
1084
6
1098
1098
6
1098
1098
6
1098
1098
6
1098
1122
6
1098
1138
6
1098
1139
6
1098
1141
6
1098
1200
6
1098
1223
6
1098
1265
6
1098
1336
6
1098
1396
6
1098
1455
6
1098
1477
6
1098
1487
6
1098
1491
6
1098
1496
6
1098
1626
6
1098
2082
6
1098
2148
6
1098
483
6
1098
584
6
1098
669
6
1098
680
6
1098
731
6
1098
763
6
1098
.i
1099
.t
professional
computer
work
for
the
blind
.w
developments
in
computer
technology
have
opened
new
professional
opportunities
for
the
intelligent
blind.
since
there
are
few
if
any
occupations
in
which
the
blind
can
participate
without
serious
disadvantage,
the
opportunities
offered
them
to
gain
entrance
into
various
occupations
through
computer
use
including
that
of
programmer,
is
important
for
future
rehabilitation
planning.
also
of
immediate
interest
is
the
fact
that
the
blind
may
be
especially
suited
for
programming
work.
because
of
intense
training
in
and
constant
experience
with
locating
objects
in
the
unseen
environment
and
also
because
of
superbly
trained
memory,
the
blind
brings
to
the
work
of
programming
skills
which
the
sighted
has
had
little
need
to
acquire.
these
qualifications
should
result
in
fewer
debugging
problems
and
make
the
blind
a
valuable
addition
to
any
systems
group.
before
the
blind
could
become
a
serious
professional,
a
number
of
aids
and
techniques
had
to
be
developed
that
can
mediate
between
machines
and
programmer.
this
paper
describes
the
techniques
and
aids
which
were
designed
by
the
staff
of
the
medical
computing
center
of
the
university
of
cincinnati
college
of
medicine.
.b
cacm
april,
1964
.a
sterling,
t.
d.
lichstein,
m.
scarpino,
f.
stuebing,
d.
.n
ca640409
jb
march
10,
1978
1:46
am
.x
1099
5
1099
1099
5
1099
1099
5
1099
1264
5
1099
1740
5
1099
1099
6
1099
1099
6
1099
.i
1100
.t
status
of
computer
sciences
curricula
in
colleges
and
universities
.b
cacm
april,
1964
.a
atchison,
w.
f.
hamblen,
j.
w.
.n
ca640408
jb
march
10,
1978
1:47
am
.x
1100
5
1100
1100
5
1100
1100
5
1100
1107
5
1100
1205
5
1100
1100
6
1100
1100
6
1100
1104
6
1100
1107
6
1100
68
6
1100
.i
1101
.t
the
place
of
logical
design
and
switching
theory
in
the
computer
curriculum
.b
cacm
april,
1964
.a
muller,
d.
e.
.n
ca640407
jb
march
10,
1978
1:49
am
.x
1101
5
1101
1101
5
1101
1101
5
1101
.i
1102
.t
mechanical
languages:
a
course
specification
.b
cacm
april,
1964
.a
gorn,
s.
.n
ca640406
jb
march
10,
1978
1:49
am
.x
249
4
1102
254
4
1102
272
4
1102
1024
4
1102
1050
4
1102
1051
4
1102
1051
4
1102
1102
4
1102
1102
4
1102
1102
4
1102
1102
4
1102
1102
4
1102
1109
4
1102
1132
4
1102
1140
4
1102
1142
4
1102
1188
4
1102
1306
4
1102
1390
4
1102
1464
4
1102
1486
4
1102
1491
4
1102
1549
4
1102
1549
4
1102
1706
4
1102
1767
4
1102
1781
4
1102
1781
4
1102
1787
4
1102
1826
4
1102
1878
4
1102
1945
4
1102
1949
4
1102
321
4
1102
378
4
1102
378
4
1102
2059
4
1102
2060
4
1102
2126
4
1102
2155
4
1102
2168
4
1102
435
4
1102
437
4
1102
463
4
1102
483
4
1102
491
4
1102
2719
4
1102
2723
4
1102
2732
4
1102
2838
4
1102
2842
4
1102
2855
4
1102
2879
4
1102
560
4
1102
583
4
1102
3008
4
1102
3073
4
1102
3077
4
1102
3080
4
1102
3106
4
1102
627
4
1102
627
4
1102
631
4
1102
632
4
1102
642
4
1102
644
4
1102
653
4
1102
680
4
1102
731
4
1102
761
4
1102
762
4
1102
762
4
1102
763
4
1102
798
4
1102
106
4
1102
123
4
1102
140
4
1102
919
4
1102
949
4
1102
989
4
1102
196
5
1102
1102
5
1102
1102
5
1102
1102
5
1102
209
5
1102
210
5
1102
406
5
1102
483
5
1102
.i
1103
.t
logic
for
the
computer
sciences
.b
cacm
april,
1964
.a
korfhage,
r.
r.
.n
ca640405
jb
march
10,
1978
1:50
am
.x
1103
5
1103
1103
5
1103
1103
5
1103
.i
1104
.t
an
undergraduate
curriculum
in
numerical
analysis
.b
cacm
april,
1964
.a
forsythe,
g.
e.
.n
ca640404
jb
march
10,
1978
1:51
am
.x
1104
5
1104
1104
5
1104
1104
5
1104
1205
5
1104
1100
6
1104
1104
6
1104
1107
6
1104
68
6
1104
.i
1105
.t
on
introducing
digital
computing
.b
cacm
april,
1964
.a
arden,
b.
w.
.n
ca640403
jb
march
10,
1978
1:53
am
.x
1046
4
1105
1105
4
1105
1139
4
1105
1140
4
1105
1234
4
1105
1263
4
1105
1265
4
1105
1496
4
1105
1781
4
1105
1824
4
1105
2126
4
1105
2546
4
1105
464
4
1105
584
4
1105
631
4
1105
653
4
1105
680
4
1105
763
4
1105
795
4
1105
799
4
1105
945
4
1105
1105
5
1105
1105
5
1105
1105
5
1105
404
5
1105
.i
1106
.t
programming
of
digital
computers
.b
cacm
april,
1964
.a
perlis,
a.
j.
.n
ca640402
jb
march
10,
1978
1:54
am
.x
1106
5
1106
1106
5
1106
1106
5
1106
.i
1107
.t
computers
and
education
.b
cacm
april,
1964
.a
keenan,
t.
a.
.n
ca640401
jb
march
10,
1978
1:54
am
.x
1107
4
1107
1205
4
1107
1100
5
1107
1107
5
1107
1107
5
1107
1107
5
1107
1205
5
1107
1100
6
1107
1104
6
1107
1107
6
1107
68
6
1107
.i
1108
.t
digital
data
processor
for
tracking
the
partially
illuminated
moon*
.w
a
study
of
lunar
tracking
techniques
and
fabrication
of
a
breadboard
to
assess
the
feasibility
of
the
best
technique
selected
was
conducted
to
define
a
tracking
system
for
observation
of
the
sight
line
to
the
center
of
a
partially
illuminated
moon.
the
data
processing
portion
of
the
system
is
presented
in
detail
and
then
described
in
general
are
the
operation
of
the
tracker
head
assembly
for
data
readout,
the
operation
of
the
entire
system
and
the
effect
data
processing
considerations
have
on
the
design
of
the
tracker
system.
the
system
basically
consists
of
an
optical
sensor,
digital
computer
and
tracker
drive
mechanism.
the
three
system
units,
connected
in
cascade,
comprise
the
control
loop.
for
this
application,
an
optical
telescope
with
a
radial
mechanical
scanning
mechanism
was
used
that
read
out
lunar
sight
line
measurement
information.
this
information
is
sequentially
read
into
a
special
purpose
digital
computer
that
extracts
the
measurements
and
computes
the
error
signals
that
drive
the
tracker
to
the
appropriate
attitude.
.b
cacm
march,
1964
.a
wilcox,
h.
j.
.n
ca640324
jb
march
10,
1978
2:02
am
.x
1108
5
1108
1108
5
1108
1108
5
1108
.i
1109
.t
conversion
of
a
power
to
a
series
of
chebyshev
polynomials*
.w
even
slowly
convergent
power
series
can
be
rearranged
as
series
in
chebyshev
polynomials
if
appropriate
sequence
transformations
are
used
in
evaluating
the
coefficients.
the
method
is
illustrated
by
computing
the
coefficients
for
the
expansion
of
the
logarithm
and
dilogarithm.
.b
cacm
march,
1964
.a
thacher
jr.,
h.
c.
.n
ca640323
jb
march
10,
1978
2:05
am
.x
249
4
1109
254
4
1109
272
4
1109
1102
4
1109
1109
4
1109
1140
4
1109
1188
4
1109
1306
4
1109
1464
4
1109
1491
4
1109
1767
4
1109
1781
4
1109
1787
4
1109
1949
4
1109
321
4
1109
2059
4
1109
2126
4
1109
435
4
1109
437
4
1109
463
4
1109
483
4
1109
491
4
1109
2732
4
1109
560
4
1109
583
4
1109
3073
4
1109
627
4
1109
631
4
1109
632
4
1109
642
4
1109
644
4
1109
653
4
1109
680
4
1109
761
4
1109
762
4
1109
763
4
1109
123
4
1109
140
4
1109
919
4
1109
989
4
1109
196
5
1109
1109
5
1109
1109
5
1109
1109
5
1109
.i
1110
.t
a
fourier
series
method
for
the
numerical
solution
of
a
class
of
parabolic
partial
differential
equations*
.w
a
fourier
series
method
is
described
which,
when
applied
to
a
certain
class
of
parabolic
partial
differential
equations,
reduces
the
problem
to
a
system
of
ordinary
differential
equations.
an
application
is
given
for
which
the
method
shows
a
considerable
advantage
over
conventional
finite
difference
methods.
.b
cacm
march,
1964
.a
forrington,
c.
v.
d.
.n
ca640322
jb
march
10,
1978
2:08
am
.x
1110
5
1110
1110
5
1110
1110
5
1110
.i
1111
.t
a
class
of
iterative
techniques
for
the
factorization
of
polynomials*
.w
a
method
of
iteration
is
developed
in
terms
of
a
function
of
somewhat
arbitrary
character.
sufficient
conditions
are
given
for
convergence
of
the
process,
yielding
factors
of
arbitrary
degree
for
polynomials
in
one
variable.
both
lin's
method
and
newton's
method
occur
as
special
cases.
.b
cacm
march,
1964
.a
luther,
h.
a.
.n
ca640321
jb
march
10,
1978
2:10
am
.x
1111
4
1111
1111
5
1111
1111
5
1111
1111
5
1111
894
5
1111
.i
1112
.t
a
technique
for
computer
detection
and
correction
of
spelling
errors*
.w
the
method
described
assumes
that
a
word
which
cannot
be
found
in
a
dictionary
has
at
most
one
error,
which
might
be
a
wrong,
missing
or
extra
letter
or
a
single
transposition.
the
unidentified
input
word
is
compared
to
the
dictionary
again,
testing
each
time
to
see
if
the
words
match-assuming
one
of
these
errors
occurred.
during
a
test
run
on
garbled
text,
correct
identifications
were
made
for
over
95
percent
of
these
error
types.
.b
cacm
march,
1964
.a
damerau,
f.
j.
.n
ca640320
jb
march
10,
1978
2:21
am
.x
1112
4
1112
1592
4
1112
2111
4
1112
2339
4
1112
440
4
1112
1112
5
1112
1112
5
1112
1112
5
1112
1592
5
1112
2111
5
1112
2339
5
1112
619
5
1112
830
6
1112
982
6
1112
1112
6
1112
1112
6
1112
1112
6
1112
1592
6
1112
1592
6
1112
440
6
1112
619
6
1112
619
6
1112
619
6
1112
.i
1113
.t
computer-made
perspective
movies
as
a
scientific
and
communication
tool*
.w
it
is
easy
to
program
the
basic
transformation
required
for
a
perspective
drawing.
this
fact
plus
the
advent
of
high
speed
microfilm
printers
such
as
the
general
dynamics
electronics
s-c
4020
makes
possible
perspective
movies
as
the
direct
output
from
a
computer.
the
programming
of
such
a
movie
is
briefly
described
for
studying
the
angular
motions
of
a
satellite
containing
an
attitude
control
system.
in
the
movie,
a
domino-shaped
box
represents
the
satellite
and
a
sphere
with
circles
of
latitude
and
longitude
represents
the
earth.
the
cost
was
approximately
three
to
eight
minutes
of
ibm
7090
time
per
one
minute
of
movie.
.b
cacm
march,
1964
.a
zajac,
e.
e.
.n
ca640319
jb
march
10,
1978
2:26
am
.x
1113
5
1113
1113
5
1113
1113
5
1113
.i
1114
.t
generating
a
canonical
prefix
encoding*
.w
computer
programs
for
generating
a
minimum-redundancy
exhaustive
prefix
encoding
are
described.
one
program
generates
a
huffman
frequency
tree,
another
determines
the
structure
functions
of
an
encoding,
and
a
third
program
assigns
codes.
.b
cacm
march,
1964
.a
schwartz,
e.
s.
kallick,
b.
.n
ca640318
jb
march
10,
1978
2:28
am
.x
1114
5
1114
1114
5
1114
1114
5
1114
2346
5
1114
2459
5
1114
1114
6
1114
1114
6
1114
.i
1115
.t
randomized
binary
searching
with
tree
structure
.w
a
more
efficient
method
of
using
tree
structures
is
proposed,
which
utilizers
both
plus
and
minus
branches
in
the
search
path.
very
significant
gains
result
when
the
search
key
includes
alphabetic
characters.
.b
cacm
march,
1964
.a
clampett
jr.,
h.
a.
.n
ca640317
jb
march
10,
1978
2:30
am
.x
1115
5
1115
1115
5
1115
1115
5
1115
1935
5
1115
849
6
1115
1115
6
1115
.i
1116
.t
tests
on
a
computer
method
for
constructing
school
timetables*
.w
a
previously
proposed
computer
method
for
constructing
timetables,
based
on
an
iteration
involving
boolean
matrices,
is
described.
in
limited
tests
the
method
has
successfully
produced
timetables
on
every
trial.
references
are
given
which
relate
the
timetable
problem
to
theorems
on
matrices
of
zeros
and
ones,
and
to
theorems
on
bipartite
graphs.
some
problems
of
applying
the
method
to
constructing
timetables
in
real
situations
are
noted.
.b
cacm
march,
1964
.a
csima,
j.
gotlieb,
c.
c.
.n
ca640316
jb
march
10,
1978
2:34
am
.x
1116
5
1116
1116
5
1116
1116
5
1116
1367
5
1116
2772
5
1116
2787
5
1116
1116
6
1116
1116
6
1116
1116
6
1116
1429
6
1116
1429
6
1116
.i
1117
.t
polyphase
sorting
with
overlapped
rewind*
.w
a
variation
of
the
polyphase
merge
technique
of
sorting
is
described
which
permits
one
tape
at
a
time
to
be
rewound
while
the
merge
is
continued
on
the
remaining
tapes.
the
result
is
the
overlapping
of
a
major
portion
of
the
rewind
time.
the
technique
should
be
considered
whenever
a
sort
is
written
to
operate
on
five
or
more
tapes
that
cannot
be
read
backwards.
the
savings
of
the
overlap
method
appear
to
increase
as
the
number
of
available
tapes
is
increased.
.b
cacm
march,
1964
.a
mcalester,
r.
l.
.n
ca640315
jb
march
10,
1978
2:38
am
.x
1117
4
1117
1117
4
1117
1117
4
1117
2017
4
1117
2017
4
1117
2146
4
1117
2146
4
1117
677
4
1117
860
4
1117
861
4
1117
1117
5
1117
1117
5
1117
1117
5
1117
636
5
1117
862
5
1117
861
5
1117
.i
1118
.t
fortran
subroutines
for
time
series
data
reduction*
.b
cacm
march,
1964
.a
macgowan,
r.
a.
.n
ca640314
jb
march
10,
1978
2:39
am
.x
1118
4
1118
1118
4
1118
826
4
1118
948
4
1118
942
5
1118
1118
5
1118
1118
5
1118
1118
5
1118
826
5
1118
.i
1119
.t
an
open
letter
to
x3.4.3
(fortran
standards
--
american
association)
.b
cacm
march,
1964
.n
ca640313
jb
march
10,
1978
2:40
am
.x
1119
5
1119
1119
5
1119
1119
5
1119
.i
1120
.t
"alcor
group
representations
of
algol
symbols,"
comm.
acm
6
(1963),
597-599.
(corrigenda)
.b
cacm
march,
1964
.n
ca640312
jb
march
10,
1978
2:42
am
.x
1120
5
1120
1120
5
1120
1120
5
1120
.i
1121
.t
comments
on
"a
continued
operation
notation"*
.w
this
note
is
intended
to
clarify
and
correct
several
points
in
a
recent
paper
describing
some
notations
for
symbol
manipulation
by
m.p.
barnett
[comm.
acm
6(august,
1963)].
.b
cacm
march,
1964
.a
barnett,
m.
p.
gerard,
j.
m.
sambles,
a.
w.
.n
ca640310
jb
march
10,
1978
2:45
am
.x
1062
4
1121
1121
4
1121
1121
4
1121
1139
4
1121
1265
4
1121
1781
4
1121
659
4
1121
720
4
1121
759
4
1121
964
4
1121
1121
5
1121
1121
5
1121
1121
5
1121
464
5
1121
759
5
1121
.i
1122
.t
a
note
on
some
compiling
algorithms
.w
two
compiling
generators
for
arithmetic
expressions
are
discussed:
one
presently
in
use
in
an
experimental
compiler,
and
an
improvement
suggested
by
k.
speierman
of
burroughs.
.b
cacm
march,
1964
.a
anderson,
j.
p.
.n
ca640309
jb
march
10,
1978
3:33
am
.x
1122
5
1122
1122
5
1122
1122
5
1122
1551
5
1122
1945
5
1122
823
6
1122
914
6
1122
915
6
1122
917
6
1122
984
6
1122
989
6
1122
990
6
1122
1012
6
1122
1084
6
1122
1098
6
1122
1122
6
1122
1122
6
1122
1138
6
1122
1139
6
1122
1141
6
1122
1200
6
1122
1223
6
1122
1265
6
1122
1336
6
1122
1396
6
1122
1455
6
1122
1477
6
1122
1487
6
1122
1491
6
1122
1496
6
1122
483
6
1122
584
6
1122
669
6
1122
680
6
1122
763
6
1122
.i
1123
.t
gauss
(algorithm
209)
.b
cacm
march,
1964
.a
gladfelter,
g.
w.
.n
ca640308
jb
march
10,
1978
3:34
am
.x
1123
5
1123
1123
5
1123
1123
5
1123
.i
1124
.t
matrix
division
(algorithm
197)
.b
cacm
march,
1964
.a
wells,
m.
.n
ca640307
jb
march
10,
1978
3:35
am
.x
1124
5
1124
1124
5
1124
1124
5
1124
.i
1125
.t
syminv2
(algorithm
150)
.b
cacm
march,
1964
.a
naur,
p.
.n
ca640306
jb
march
10,
1978
3:36
am
.x
1125
5
1125
1125
5
1125
1125
5
1125
.i
1126
.t
erf
(algorithm
123)
.b
cacm
march,
1964
.a
barton,
s.
p.
wagner,
j.
f.
.n
ca640305
jb
march
10,
1978
3:37
am
.x
1126
5
1126
1126
5
1126
1126
5
1126
1583
5
1126
831
6
1126
967
6
1126
1126
6
1126
707
6
1126
.i
1127
.t
tridiagonal
matrix
(algorithm
122)
.b
cacm
march,
1964
.a
naur,
p.
.n
ca640304
jb
march
10,
1978
3:39
am
.x
1127
5
1127
1127
5
1127
1127
5
1127
.i
1128
.t
evaluation
of
determinant
(algorithm
41)
.b
cacm
march,
1964
.a
rotenberg,
l.
j.
.n
ca640303
jb
march
10,
1978
3:40
am
.x
1128
5
1128
1128
5
1128
1128
5
1128
1319
5
1128
152
6
1128
1128
6
1128
.i
1129
.t
incomplete
beta
function
ratios
(algorithm
222)
.b
cacm
march,
1964
.a
gautschi,
w.
.n
ca640302
jb
march
10,
1978
3:41
am
.x
1129
5
1129
1129
5
1129
1129
5
1129
.i
1130
.t
gamma
function
(althm
221)
.b
cacm
march,
1964
.a
gautschi,
w.
.n
ca640301
jb
march
10,
1978
3:42
am
.x
1023
5
1130
1130
5
1130
1130
5
1130
1130
5
1130
1222
5
1130
1130
6
1130
1130
6
1130
245
6
1130
310
6
1130
.i
1131
.t
on
context
and
ambiguity
in
parsing*
.b
cacm
february,
1964
.a
ross,
d.
t.
.n
ca640212
jb
march
10,
1978
3:43
am
.x
1131
5
1131
1131
5
1131
1131
5
1131
1781
5
1131
123
6
1131
196
6
1131
919
6
1131
990
6
1131
1007
6
1131
1046
6
1131
1131
6
1131
1139
6
1131
1140
6
1131
1149
6
1131
1198
6
1131
1215
6
1131
1223
6
1131
1265
6
1131
1303
6
1131
1323
6
1131
1358
6
1131
1366
6
1131
1421
6
1131
1460
6
1131
1462
6
1131
1463
6
1131
1467
6
1131
1468
6
1131
1477
6
1131
1491
6
1131
1496
6
1131
1531
6
1131
1535
6
1131
1565
6
1131
1601
6
1131
1602
6
1131
1613
6
1131
1614
6
1131
1626
6
1131
1641
6
1131
1787
6
1131
1788
6
1131
205
6
1131
224
6
1131
249
6
1131
288
6
1131
316
6
1131
381
6
1131
398
6
1131
11
6
1131
404
6
1131
410
6
1131
463
6
1131
464
6
1131
483
6
1131
3184
6
1131
3188
6
1131
584
6
1131
600
6
1131
680
6
1131
691
6
1131
763
6
1131
799
6
1131
.i
1132
.t
an
extension
to
algol
for
manipulating
formulae*
.b
cacm
february,
1964
.a
perlis,
a.
j.
iturriaga,
r.
.n
ca640211
jb
march
10,
1978
3:45
am
.x
1024
4
1132
1051
4
1132
1086
4
1132
1102
4
1132
1132
4
1132
1132
4
1132
1234
4
1132
1263
4
1132
1265
4
1132
1270
4
1132
1323
4
1132
1358
4
1132
1379
4
1132
1380
4
1132
1390
4
1132
1453
4
1132
1464
4
1132
1484
4
1132
1486
4
1132
1491
4
1132
1498
4
1132
1549
4
1132
1613
4
1132
1614
4
1132
1706
4
1132
1781
4
1132
1825
4
1132
1826
4
1132
1860
4
1132
1878
4
1132
378
4
1132
2060
4
1132
2083
4
1132
2155
4
1132
2168
4
1132
2178
4
1132
2179
4
1132
2252
4
1132
2325
4
1132
2341
4
1132
2546
4
1132
2645
4
1132
2652
4
1132
2684
4
1132
2719
4
1132
2723
4
1132
2838
4
1132
2842
4
1132
2842
4
1132
2855
4
1132
2879
4
1132
2929
4
1132
2934
4
1132
3069
4
1132
3077
4
1132
3080
4
1132
3106
4
1132
627
4
1132
669
4
1132
679
4
1132
691
4
1132
761
4
1132
106
4
1132
949
4
1132
989
4
1132
1132
5
1132
1132
5
1132
1132
5
1132
1214
5
1132
210
5
1132
1396
5
1132
3184
5
1132
964
6
1132
1028
6
1132
1029
6
1132
1083
6
1132
1132
6
1132
1132
6
1132
1214
6
1132
1278
6
1132
1334
6
1132
1365
6
1132
1386
6
1132
1387
6
1132
1388
6
1132
1392
6
1132
1393
6
1132
1394
6
1132
1395
6
1132
1396
6
1132
1397
6
1132
1496
6
1132
284
6
1132
407
6
1132
3199
6
1132
3200
6
1132
3201
6
1132
3202
6
1132
3203
6
1132
3204
6
1132
561
6
1132
730
6
1132
731
6
1132
.i
1133
.t
a
programming
package
for
some
general
modes
of
arithmetic*
.b
cacm
february,
1964
.a
brooker,
r.
a.
.n
ca640210
jb
march
10,
1978
3:46
am
.x
1133
5
1133
1133
5
1133
1133
5
1133
.i
1134
.t
some
effects
of
the
6600
computer
on
language
structures*
.w
the
problem
of
compiling
efficient
6600
codes
prompted
the
development
of
an
intermediate
language
reflecting
the
structure
of
the
machine,
that
is
more
easily
manipulated
in
improving
object
program
efficiency.
the
subject
of
this
paper
is
the
intermediate
language
and
methods
of
manipulating
it.
compilations
of
a
series
of
arithmetic
statements
are
discussed.
it
is
assumed
that
all
functions
and
exponentials
have
been
removed
from
these
statements,
and
replaced
by
simple
variables.
for
purposes
of
simplicity
the
treatment
of
subscripts
is
ignored.
a
simplified
6600
structure
is
presented
to
illustrate
the
compiling
method.
several
assumptions
are
made
for
purposes
of
simplification,
although
there
are
cases
in
which
the
assumptions
are
violated
in
the
actual
machine.
.b
cacm
february,
1964
.a
allard,
r.
w.
wolf,
k.
a.
zemlin,
r.
a.
.n
ca640209
jb
march
10,
1978
3:54
am
.x
1134
4
1134
1134
4
1134
1134
4
1134
1141
4
1134
1179
4
1134
1861
4
1134
364
4
1134
405
4
1134
438
4
1134
561
4
1134
44
4
1134
83
4
1134
1134
5
1134
1134
5
1134
1134
5
1134
1613
5
1134
1947
5
1134
408
5
1134
17
5
1134
77
5
1134
987
6
1134
1086
6
1134
1134
6
1134
1134
6
1134
1223
6
1134
1248
6
1134
1453
6
1134
399
6
1134
3184
6
1134
.i
1135
.t
a
general
business-oriented
language
based
on
decision
expressions*
.w
the
structure
of
a
digital
compute
programming
language
which
covers
a
wide
class
of
business
and
file
processing
applications
is
presented.
such
a
structure,
based
on
identifying
and
incorporating
into
a
compiler
the
aspects
common
to
all
processes
of
such
class,
permits
writing
extremely
compact
programs,
even
for
comparatively
complex
applications,
in
terms
of
tables
of
control
expressions
which
express
only
information
characteristic
of
the
particular
application.
furthermore,local
changes
of
a
process
(e.g.
changes
affecting
only
one
of
the
output
files
involved)
can
be
effected
by
local
modifications
in
the
program
(e.g.
modification
of
only
one
entry
of
the
tables).
this
structure
also
allows
for
inexpensive
preparation
of
loading-speed
compilers
which
translate
the
source
programs
into
efficient
machine
codes.
the
approach
adopted
here
departs
from
conventional
mechanical
language
design
philosophies.
it
stresses
the
structural
analysis
of
the
class
of
processes
to
be
represented
in
the
languages,
as
opposed
to
emphasizing
formal
(i.e.,
contents-independent)
syntactical
definitions.
it
relies
exclusively
on
nonprocedural
representation
of
process
as
sets
(tables)
of
relations
between
data
and
results
(there
are
no
control
statements
such
as
go
to,
etc.),
instead
of
using
procedure
descriptions
(which
are
one-to-one
translations
of
flowcharts).
here
an
invariant
pattern
of
procedure
is
identified
as
characteristic
of
the
class
of
all
batch
file
processes.
this
new
philosophy
has
the
potential
to
overcome
well-known
deficiencies
of
other
business-oriented
languages
and
fully
meets
the
requirements
set
by
codasyl
for
such
languages,
including
machine-independence.
.b
cacm
february,
1964
.a
lombardi,
l.
a.
.n
ca640208
jb
march
10,
1978
4:08
am
.x
1135
4
1135
1136
4
1135
493
4
1135
2710
4
1135
2765
4
1135
2888
4
1135
2906
4
1135
729
4
1135
1135
5
1135
1135
5
1135
1135
5
1135
1959
5
1135
616
5
1135
1135
6
1135
.i
1136
.t
beginnings
of
a
theory
of
information
handling*
.b
cacm
february,
1964
.a
steel
jr.,
t.
b.
.n
ca640207
jb
march
10,
1978
4:10
am
.x
1135
4
1136
1136
4
1136
1136
4
1136
1136
4
1136
493
4
1136
2710
4
1136
2765
4
1136
2888
4
1136
2906
4
1136
729
4
1136
1136
5
1136
1136
5
1136
1136
5
1136
493
5
1136
616
5
1136
657
5
1136
.i
1137
.t
a
format
language*
.b
cacm
february,
1964
.a
perlis,
a.
j.
.n
ca640206
jb
march
10,
1978
4:15
am
.x
1086
5
1137
1137
5
1137
1137
5
1137
1137
5
1137
1496
5
1137
1137
6
1137
1137
6
1137
1141
6
1137
404
6
1137
3184
6
1137
.i
1138
.t
formalism
in
programming
languages*
.b
cacm
february,
1964
.a
iverson,
k.
e.
.n
ca640205
jb
march
10,
1978
4:24
am
.x
1138
5
1138
1138
5
1138
1138
5
1138
1945
5
1138
823
6
1138
914
6
1138
915
6
1138
917
6
1138
984
6
1138
989
6
1138
990
6
1138
1012
6
1138
1084
6
1138
1098
6
1138
1122
6
1138
1138
6
1138
1139
6
1138
1141
6
1138
1200
6
1138
1223
6
1138
1265
6
1138
1336
6
1138
1396
6
1138
1455
6
1138
1477
6
1138
1487
6
1138
1491
6
1138
1496
6
1138
483
6
1138
584
6
1138
669
6
1138
680
6
1138
763
6
1138
.i
1139
.t
fortran
iv
as
a
syntax
language*
.b
cacm
february,
1964
.a
leavenworth,
b.
m.
.n
ca640204
jb
march
10,
1978
4:53
am
.x
267
4
1139
1046
4
1139
1062
4
1139
1105
4
1139
1121
4
1139
1139
4
1139
1139
4
1139
1139
4
1139
1139
4
1139
1139
4
1139
1139
4
1139
1140
4
1139
1141
4
1139
1215
4
1139
1223
4
1139
1234
4
1139
1263
4
1139
1265
4
1139
1265
4
1139
1265
4
1139
1496
4
1139
1647
4
1139
1665
4
1139
1781
4
1139
1781
4
1139
1781
4
1139
1787
4
1139
1792
4
1139
1824
4
1139
1947
4
1139
364
4
1139
2126
4
1139
405
4
1139
2546
4
1139
438
4
1139
464
4
1139
556
4
1139
584
4
1139
3185
4
1139
631
4
1139
653
4
1139
680
4
1139
720
4
1139
759
4
1139
763
4
1139
763
4
1139
763
4
1139
795
4
1139
799
4
1139
799
4
1139
945
4
1139
1139
5
1139
1139
5
1139
1139
5
1139
224
5
1139
1612
5
1139
1781
5
1139
1945
5
1139
399
5
1139
404
5
1139
438
5
1139
464
5
1139
631
5
1139
823
6
1139
123
6
1139
196
6
1139
914
6
1139
915
6
1139
917
6
1139
919
6
1139
984
6
1139
989
6
1139
990
6
1139
990
6
1139
1007
6
1139
1012
6
1139
1046
6
1139
1084
6
1139
1098
6
1139
1122
6
1139
1131
6
1139
1138
6
1139
1139
6
1139
1139
6
1139
1139
6
1139
1140
6
1139
1141
6
1139
1149
6
1139
1198
6
1139
1200
6
1139
1215
6
1139
1223
6
1139
1223
6
1139
1265
6
1139
1265
6
1139
1303
6
1139
1323
6
1139
1336
6
1139
1358
6
1139
1366
6
1139
1396
6
1139
1421
6
1139
1455
6
1139
1460
6
1139
1462
6
1139
1463
6
1139
1467
6
1139
1468
6
1139
1477
6
1139
1477
6
1139
1487
6
1139
1491
6
1139
1491
6
1139
1496
6
1139
1496
6
1139
1531
6
1139
1535
6
1139
1565
6
1139
1601
6
1139
1602
6
1139
1613
6
1139
1614
6
1139
1626
6
1139
1641
6
1139
1787
6
1139
1788
6
1139
205
6
1139
224
6
1139
249
6
1139
288
6
1139
316
6
1139
381
6
1139
398
6
1139
11
6
1139
404
6
1139
410
6
1139
463
6
1139
464
6
1139
483
6
1139
483
6
1139
3184
6
1139
3188
6
1139
584
6
1139
584
6
1139
600
6
1139
669
6
1139
680
6
1139
680
6
1139
691
6
1139
763
6
1139
763
6
1139
799
6
1139
.i
1140
.t
"structural
connections"
in
formal
language*
.b
cacm
february,
1964
.a
irons,
e.
t.
.n
ca640203
jb
march
10,
1978
4:55
am
.x
249
4
1140
254
4
1140
272
4
1140
1046
4
1140
1102
4
1140
1105
4
1140
1109
4
1140
1139
4
1140
1140
4
1140
1140
4
1140
1188
4
1140
1234
4
1140
1263
4
1140
1265
4
1140
1306
4
1140
1464
4
1140
1491
4
1140
1496
4
1140
1767
4
1140
1781
4
1140
1781
4
1140
1787
4
1140
1824
4
1140
1949
4
1140
321
4
1140
2059
4
1140
2126
4
1140
2126
4
1140
2546
4
1140
435
4
1140
437
4
1140
463
4
1140
464
4
1140
483
4
1140
491
4
1140
2732
4
1140
560
4
1140
583
4
1140
584
4
1140
3073
4
1140
627
4
1140
631
4
1140
631
4
1140
632
4
1140
642
4
1140
644
4
1140
653
4
1140
653
4
1140
680
4
1140
680
4
1140
761
4
1140
762
4
1140
763
4
1140
763
4
1140
795
4
1140
799
4
1140
123
4
1140
140
4
1140
919
4
1140
945
4
1140
989
4
1140
196
5
1140
1140
5
1140
1140
5
1140
1140
5
1140
1491
5
1140
1781
5
1140
2061
5
1140
404
5
1140
123
6
1140
196
6
1140
196
6
1140
919
6
1140
990
6
1140
1007
6
1140
1046
6
1140
1131
6
1140
1139
6
1140
1140
6
1140
1140
6
1140
1140
6
1140
1141
6
1140
1149
6
1140
1198
6
1140
1215
6
1140
1223
6
1140
1265
6
1140
1303
6
1140
1303
6
1140
1323
6
1140
1358
6
1140
1366
6
1140
1421
6
1140
1460
6
1140
1462
6
1140
1463
6
1140
1467
6
1140
1468
6
1140
1477
6
1140
1477
6
1140
1491
6
1140
1491
6
1140
1496
6
1140
1531
6
1140
1535
6
1140
1565
6
1140
1601
6
1140
1602
6
1140
1613
6
1140
1614
6
1140
1626
6
1140
1641
6
1140
1787
6
1140
1788
6
1140
205
6
1140
1825
6
1140
224
6
1140
249
6
1140
288
6
1140
316
6
1140
381
6
1140
398
6
1140
11
6
1140
404
6
1140
410
6
1140
463
6
1140
464
6
1140
483
6
1140
3184
6
1140
3184
6
1140
3188
6
1140
584
6
1140
600
6
1140
680
6
1140
691
6
1140
729
6
1140
763
6
1140
773
6
1140
799
6
1140
.i
1141
.t
bounded
context
syntactic
analysis
.b
cacm
february,
1964
.a
floyd,
r.
w.
.n
ca640202
jb
march
10,
1978
4:56
am
.x
267
4
1141
1134
4
1141
1139
4
1141
1141
4
1141
1141
4
1141
1215
4
1141
1223
4
1141
1647
4
1141
1781
4
1141
1787
4
1141
1792
4
1141
364
4
1141
364
4
1141
405
4
1141
405
4
1141
438
4
1141
438
4
1141
561
4
1141
44
4
1141
763
4
1141
1141
5
1141
1141
5
1141
1141
5
1141
224
5
1141
1496
5
1141
1683
5
1141
1768
5
1141
1787
5
1141
1945
5
1141
2061
5
1141
77
5
1141
823
6
1141
196
6
1141
914
6
1141
915
6
1141
917
6
1141
984
6
1141
989
6
1141
990
6
1141
1012
6
1141
1084
6
1141
1098
6
1141
1122
6
1141
1137
6
1141
1138
6
1141
1139
6
1141
1140
6
1141
1141
6
1141
1141
6
1141
1141
6
1141
1141
6
1141
1141
6
1141
1141
6
1141
1200
6
1141
1215
6
1141
1223
6
1141
1265
6
1141
1265
6
1141
1336
6
1141
1396
6
1141
1455
6
1141
1477
6
1141
1477
6
1141
1487
6
1141
1491
6
1141
1491
6
1141
1491
6
1141
1491
6
1141
1496
6
1141
1496
6
1141
1781
6
1141
1781
6
1141
1825
6
1141
224
6
1141
404
6
1141
483
6
1141
584
6
1141
669
6
1141
680
6
1141
763
6
1141
763
6
1141
773
6
1141
799
6
1141
.i
1142
.t
an
extension
of
algol-like
languages
.b
cacm
february,
1964
.a
rose,
g.
f.
.n
ca640201
jb
march
10,
1978
4:57
am
.x
1102
4
1142
1142
4
1142
1781
4
1142
1945
4
1142
762
4
1142
949
4
1142
1142
5
1142
1142
5
1142
1142
5
1142
483
5
1142
.i
1143
.t
analysis
of
decay-type
data*
.w
a
comparative
study
has
been
made
of
a
variety
of
numerical
techniques
for
fitting
experimental
data
of
the
decay
type
by
forms
involving
the
sums
of
exponentials.
statistical
errors
of
the
fitted
parameters
are
also
calculated.
these
methods
have
been
applied
to
artificially-generated
sets
of
data
as
well
as
to
the
results
of
experiments
with
radioactive
tracers
on
both
human
and
animal
subjects.
results
show
that
the
values
of
the
fitted
parameters
are
very
sensitive
to
variations
in
the
fitting
procedure.
therefore
great
care
very
sensitive
to
variations
in
the
fitting
procedure.
therefore
great
care
must
be
exercised
in
identifying
such
values
with
physical
constants.
although
the
values
of
functions
derived
from
these
fitted
parameters
which
can
definitely
be
associated
with
physical
entities
are
generally
more
stable
under
variations
in
the
fitting
techniques,
error
bounds
can
be
so
large
that
no
great
confidence
can
be
placed
even
in
them.
it
would
therefore
appear
best
to
select
a
uniform
technique
both
for
running
the
experiments
and
for
analyzing
the
data,
and
then
to
consider
as
significant
only
relative
results
between
one
subject
and
the
next.
.b
cacm
january,
1964
.a
worsley,
b.
h.
.n
ca640112
jb
march
10,
1978
5:11
am
.x
1143
5
1143
1143
5
1143
1143
5
1143
.i
1144
.t
digital
computer
determination
of
alpha
source
activity
.w
a
technique
is
described
for
determining
the
activity
and
homogeneity
of
an
alpha
source.
it
is
believed
that
the
technique,
using
a
digital
computer,
has
many
uses
and
applications
in
the
field
of
nuclear
physics.
the
technique
involves
computer
manipulation
of
the
digital
image
of
the
nuclear
source.
experimental
details
are
given.
.b
cacm
january,
1964
.a
robbins,
d.
taylor,
w.
e.
.n
ca640111
jb
march
10,
1978
5:14
am
.x
1144
5
1144
1144
5
1144
1144
5
1144
.i
1145
.t
git-a
heuristic
program
for
testing
pairs
of
directed
line
graphs
for
isomorphism*
.w
given
a
pair
of
directed
line
graphs,
the
problem
of
ascertaining
whether
or
not
they
are
isomorphic
is
one
for
which
no
efficient
algorithmic
solution
is
known.
since
a
straightforward
enumerative
algorithm
might
require
40
years
of
running
time
on
a
very
high
speed
computer
in
order
to
compare
two
15-node
graphs,
a
more
sophisticated
approach
seems
called
for.
the
situation
is
similar
to
that
prevailing
in
areas
such
as
game-playing
and
theorem-proving,
where
practical
algorithms
are
unknown
(for
the
interesting
cases),
but
where
various
practical
though
only
partially
successful
techniques
are
available.
git-graph
isomorphism
tester-incorporates
a
variety
of
processes
that
attempt
to
narrow
down
the
search
for
an
isomorphism,
or
to
demonstrate
that
none
exists.
no
one
scheme
is
relied
upon
exclusively
for
a
solution,
and
the
program
is
designed
to
avoid
excessive
computation
along
fruitless
lines.
git
has
been
written
in
the
comit
language
and
successfully
tested
on
the
ibm
7090.
.b
cacm
january,
1964
.a
unger,
s.
h.
.n
ca640110
jb
march
10,
1978
5:24
am
.x
1145
4
1145
1145
5
1145
1145
5
1145
1145
5
1145
1504
5
1145
3040
5
1145
655
5
1145
1145
6
1145
1145
6
1145
.i
1146
.t
an
efficient
composite
formula
for
multidimensional
quadrature
.w
a
(2s+1)-point
second-degree
quadrature
formula
for
integration
over
an
s-dimensional
hyper-rectangle
is
presented.
all
but
one
of
the
points
lie
on
the
surface
with
weights
of
opposite
sign
attached
to
points
on
opposite
faces.
when
a
large
volume
is
subdivided
into
congruent
rectangular
subdivisions,
only
one
point
is
required
in
each
interior
subdivision
to
achieve
second-degree
accuracy.
.b
cacm
january,
1964
.a
thacher
jr.,
h.
c.
.n
ca640109
jb
march
10,
1978
5:28
am
.x
1146
4
1146
1146
5
1146
1146
5
1146
1146
5
1146
386
5
1146
.i
1147
.t
on
the
numerical
solution
of
boundary
value
problems
for
linear
ordinary
differential
equations*
.w
a
numerical
method
is
presented
for
the
solution
of
boundary
value
problems
involving
linear
ordinary
differential
equations.
the
method
described
is
noniterative
and
makes
use
of
any
one-step
numerical
integration
scheme
to
reduce
the
problem
from
one
of
boundary
values
to
one
of
initial
values.
comments
are
made
concerning
some
numerical
results
of
applying
the
method
to
a
specific
problem.
in
addition
an
extension
of
the
algorithm
described
to
more
general
problems
is
discussed.
.b
cacm
january,
1964
.a
day,
j.
t.
collins
ii,
g.
w.
.n
ca640108
jb
march
10,
1978
5:32
am
.x
1147
5
1147
1147
5
1147
1147
5
1147
1274
5
1147
1147
6
1147
.i
1148
.t
an
example
in
"significant-digit"
arithmetic*
.w
different
methods
of
handling
the
summing
process
for
the
geometric
series
are
shown
to
give
results
indicating
widely
differing
significances
when
carried
out
in
a
machine
incorporating
"significant-digit"
arithmetic.
.b
cacm
january,
1964
.a
miller,
r.
h.
.n
ca640107
jb
march
10,
1978
5:34
am
.x
1148
4
1148
1148
5
1148
1148
5
1148
1148
5
1148
85
5
1148
3131
5
1148
893
6
1148
1148
6
1148
.i
1149
.t
gargoyle
,
a
language
for
compiler
writing*
.b
cacm
january,
1964
.a
garwick,
j.
v.
.n
ca640106
jb
march
10,
1978
5:35
am
.x
1149
5
1149
1149
5
1149
1149
5
1149
1781
5
1149
123
6
1149
196
6
1149
919
6
1149
990
6
1149
1007
6
1149
1046
6
1149
1131
6
1149
1139
6
1149
1140
6
1149
1149
6
1149
1198
6
1149
1215
6
1149
1223
6
1149
1265
6
1149
1303
6
1149
1323
6
1149
1358
6
1149
1366
6
1149
1421
6
1149
1460
6
1149
1462
6
1149
1463
6
1149
1467
6
1149
1468
6
1149
1477
6
1149
1491
6
1149
1496
6
1149
1531
6
1149
1535
6
1149
1565
6
1149
1601
6
1149
1602
6
1149
1613
6
1149
1614
6
1149
1626
6
1149
1641
6
1149
1787
6
1149
1788
6
1149
205
6
1149
224
6
1149
249
6
1149
288
6
1149
316
6
1149
381
6
1149
398
6
1149
11
6
1149
404
6
1149
410
6
1149
463
6
1149
464
6
1149
483
6
1149
3184
6
1149
3188
6
1149
584
6
1149
600
6
1149
680
6
1149
691
6
1149
763
6
1149
799
6
1149
.i
1150
.t
a
fortran
post-mortem
procedure
.b
cacm
january,
1964
.a
kahan,
w.
leppik,
j.
j.
.n
ca640104
jb
march
10,
1978
5:37
am
.x
1150
5
1150
1150
5
1150
1150
5
1150
.i
1151
.t
a
note
on
multiplying
boolean
matrices
ii
.b
cacm
january,
1964
.a
comstock,
d.
r.
.n
ca640103
jb
march
10,
1978
5:38
am
.x
1151
4
1151
1265
4
1151
2769
4
1151
1151
5
1151
1151
5
1151
1151
5
1151
635
5
1151
.i
1152
.t
floating-point
arithmetic
with
84-bit
numbers
.w
a
classic
and
straightforward
technique
is
presented
which
is
not
limited
to
the
size
or
type
of
number
representation
used
or
multiple
precision
arithmetic.
.b
cacm
january,
1964
.a
gregory,
r.
t.
raney,
j.
l.
.n
ca640102
jb
march
10,
1978
5:41
am
.x
1152
5
1152
1152
5
1152
1152
5
1152
1294
5
1152
1152
6
1152
.i
1153
.t
a
fast
procedure
for
generating
normal
random
variables*
.w
a
technique
for
generating
normally
distributed
random
numbers
is
described.
it
is
faster
than
those
currently
in
general
use
and
is
readily
applicable
to
both
binary
and
decimal
computers.
.b
cacm
january,
1964
.a
marsaglia,
g.
maclaren,
m.
d.
bray,
t.
a.
.n
ca640101
jb
march
10,
1978
5:43
am
.x
1073
4
1153
1153
4
1153
940
5
1153
1073
5
1153
1153
5
1153
1153
5
1153
1153
5
1153
2137
5
1153
2276
5
1153
940
6
1153
1073
6
1153
1153
6
1153
1153
6
1153
1153
6
1153
.i
1154
.t
multi-tape
and
infinite-state
automata
--
a
survey
.w
a
survey
of
machines
which
are
more
powerful
than
finite
automata
and
less
powerful
than
general
turing
machines
is
presented.
it
is
felt
that
the
machines
in
this
category
are
as
closely
related
to
digital
computers
as
either
the
finite
automata
or
the
unrestricted
turing
machines.
intermediate
machines
can
be
created
by
adjoining
on
infinite-state
memory
to
a
finite-state
machine
and
then
performing
any
or
all
of
the
following:
(1)
restrict
the
manner
in
which
the
unbounded
portion
of
the
memory
can
be
accessed,
(2)
bound
the
number
of
steps
allowed
for
a
computation
by
some
increasing
recursive
function
of
the
length
of
the
input,
(3)
restrict
the
total
amount
of
memory
available
in
the
same
manner.
examples
from
all
three
classes
and
their
properties
are
discussed.
.b
cacm
december,
1965
.a
fischer,
p.
c.
.n
ca651215
jb
march
6,
1978
3:24
pm
.x
1154
5
1154
1154
5
1154
1154
5
1154
.i
1155
.t
experiments
with
a
deductive
question-answering
program
.w
as
an
investigation
in
artificial
intelligence,
computer
experiments
on
deductive
question-answering
were
run
with
a
lisp
program
called
deducom,
an
acronym
for
deductive
communicator.
when
given
68
facts,
deducom
answered
10
questions
answerable
from
the
facts.
a
fact
tells
deducom
either
some
specific
information
or
a
method
of
answering
a
general
kind
of
question.
some
conclusions
drawn
in
the
article
are:
(1)
deducom
can
answer
a
wide
variety
of
questions.
(2)
a
human
can
increase
the
deductive
power
of
deducom
by
telling
it
more
facts.
(3)
deducom
can
write
very
simple
programs
(it
is
hoped
that
this
ability
is
the
forerunner
of
an
ability
to
self-program,
which
is
a
way
to
learn).
(4)deducom's
search
procedure
at
present
has
two
bad
defects:
some
questions
answerable
from
the
given
facts
cannot
be
answered
and
some
other
answerable
questions
can
be
answered
only
if
the
relevant
facts
are
given
in
the
"right"
order.
(6)
at
present,
deducom's
method
of
making
logical
deductions
in
predicate
calculus
has
two
bad
defects:
some
facts
have
to
be
changed
to
logically
equivalent
ones
before
being
given
to
deducom,
and
some
redundant
facts
have
to
be
given
to
deducom.
.b
cacm
december,
1965
.a
slagle,
j.
r.
.n
ca651214
jb
march
6,
1978
3:34
pm
.x
1155
4
1155
1456
4
1155
1468
4
1155
1515
4
1155
1699
4
1155
1856
4
1155
2127
4
1155
1155
5
1155
1155
5
1155
1155
5
1155
1324
5
1155
1515
5
1155
2096
5
1155
2127
5
1155
2210
5
1155
1155
6
1155
1155
6
1155
1155
6
1155
1155
6
1155
1324
6
1155
1324
6
1155
1487
6
1155
1527
6
1155
1781
6
1155
1856
6
1155
.i
1156
.t
hankel
function
(algorithm
124
[s17])
.b
cacm
december,
1965
.a
reilly,
g.
a.
.n
ca651213
jb
march
6,
1978
3:35
pm
.x
1156
5
1156
1156
5
1156
1156
5
1156
.i
1157
.t
procedure
for
the
normal
distribution
functions
(algorithm
272
[s15])
.b
cacm
december,
1965
.a
maclaren,
m.
d.
.n
ca651212
jb
march
6,
1978
3:37
pm
.x
1157
4
1157
1157
4
1157
1157
4
1157
1157
4
1157
1779
4
1157
1920
4
1157
1944
4
1157
1987
4
1157
2548
4
1157
1081
5
1157
1157
5
1157
1157
5
1157
1157
5
1157
485
5
1157
714
5
1157
836
5
1157
.i
1158
.t
program
structures
for
parallel
processing
.w
constructs
for
organizing
and
explicating
parallel
program
segments
are
discussed
as
extensions
to
algol
60.
the
constructs
serve
as
meta-commands
and
are
motivated
by
equipment
having
multiprocessing
capability.
.b
cacm
december,
1965
.a
anderson,
j.
p.
.n
ca651211
jb
march
6,
1978
3:39
pm
.x
1158
4
1158
1158
5
1158
1158
5
1158
1158
5
1158
1262
5
1158
.i
1159
.t
machine
independence:
its
technology
and
economics
.w
a
survey
is
offered
of
techniques
for
transferring
programs,
and
especially
compilers,
from
one
computer
to
another.
of
the
methods
examined,
the
"bootstrap"
technique
is
singled
out
for
detailed
discussion,
with
emphasis
on
its
economics.
the
considerations
that
determine
the
applicability
of
bootstrapping
in
any
specific
case
are
discussed,
and
an
attempt
is
made
to
assign
appropriate
qualitative
weights
to
them.
finally,
reasons
are
given
for
believing
that
the
machine-independence
problem
is
being
substantially
diminished
by
current
trends
in
computer
design,
and
that
it
is
this
process
of
convergence
in
hardware
design
rather
than
any
foreseeable
software
developments
that
will
lead
to
its
satisfactory
resolution.
.b
cacm
december,
1965
.a
halpern,
m.
i.
.n
ca651210
jb
march
6,
1978
3:44
pm
.x
1159
4
1159
1988
4
1159
381
4
1159
1159
5
1159
1159
5
1159
1159
5
1159
14
5
1159
.i
1160
.t
cat:
a
7090-3600
computer-aided
translation
.w
a
semi-automatic
translation
system
has
been
implemented
which
converts
7090
fap
language
programs
into
3600
assembly
language.
the
input
to
the
system
is
a
fap
program
deck
which
has
been
specially
prepared
for
translation
by
the
user.
the
output
consists
of
the
translated
compass
language
program
together
with
a
comprehensive
diagnostic
listing
which
the
user
must
analyze
in
order
to
verify
any
questionable
areas
of
the
translation.
the
translation
processor
consists
of
three
distinct
phases:
an
assembly
of
the
fap
program,
a
comprehensive
analysis
of
the
assembled
code
with
particular
regard
to
the
actions
of
instructions
upon
other
instructions
and
upon
data,
and
finally
the
output
pass
which
generates
the
compass
program
in
the
form
of
macro
instructions.
.b
cacm
december,
1965
.a
wilson,
d.
m.
moss,
d.
j.
.n
ca651209
jb
march
6,
1978
3:50
pm
.x
1160
4
1160
2034
4
1160
1160
5
1160
1160
5
1160
1160
5
1160
1231
5
1160
.i
1161
.t
1401
compatibility
feature
on
the
ibm
system/360
model
30
.w
the
"second
generation"
of
stored-program
computers,
of
which
ibm
1400
series
was
a
part,
brought
edp
into
the
mass
market
for
the
first
time
on
a
large
scale.
as
this
era
unfolded,
rapid
changes
in
technology
led
to
rapid
obsolescence
of
data
processing
equipment.
program
written
for
a
particular
system
required
tedious
conversion
as
incompatible
new
machines
came
into
use.
the
ibm
system/360
has
been
designed
with
the
conversion
problem
specifically
in
mind.
one
of
the
conversion
aids
available
on
the
model
30
is
the
1401
compatibility
feature.
this
feature,
in
conjunction
with
other
aids,
permits
a
smooth
and
inexpensive
transition
to
optimum
use
of
the
new
system.
.b
cacm
december,
1965
.a
mccormack,
m.
a.
schansman,
t.
t.
womack,
k.
k.
.n
ca651208
jb
march
6,
1978
3:55
pm
.x
1161
5
1161
1161
5
1161
1161
5
1161
.i
1162
.t
an
assembly
language
for
reprogramming
.w
complete
reprogramming
of
compiler
language
programs
is
seldom
necessary.
it
is
assembly
language
programs
which
present
the
greatest
difficulty.
assembly
languages
generally
provide
a
one-for-one
translation
from
a
symbolic
to
a
numeric
version
of
a
program,
that
is,
from
assembly
language
to
machine
language.
the
meta-language
presented
here
can
be
used
to
specify
the
mapping
of
any
language
which
conforms
to
a
canonical
list
form
into
an
arbitrary
stream
of
bits.
this
bit
stream
may
be
treated
as
a
machine
language
program,
a
character
stream,
or
whatever
else
the
user
might
desire.
thus,
this
meta-language
can
be
used
to
map
from
one
assembly
language
into
another
or
from
the
assembly
language
for
one
machine
into
the
machine
language
of
another.
.b
cacm
december,
1965
.a
graham,
m.
l.
ingerman,
p.
z.
.n
ca651207
jb
march
6,
1978
4:01
pm
.x
1162
5
1162
1162
5
1162
1162
5
1162
1565
5
1162
1162
6
1162
1358
6
1162
1455
6
1162
205
6
1162
.i
1163
.t
philco/ibm
translation
at
problem-oriented,
symbolic
and
binary
levels
.w
a
translation
system
has
been
developed
to
eliminate
most
of
the
effort
formerly
required
to
reprogram
philco
2000
series
codes
for
ibm
7094
operation.
experience
with
this
system
is
limited
but
highly
successful
encouraging
application
of
the
techniques
to
other
source
and
object
languages.
.b
cacm
december,
1965
.a
olsen,
t.
m.
.n
ca651206
jb
march
6,
1978
4:05
pm
.x
1163
5
1163
1163
5
1163
1163
5
1163
.i
1164
.t
emulation
of
large
systems
.w
the
conversion
problem
and
a
new
technique
called
emulation
are
discussed.
the
technique
of
emulation
is
developed
and
includes
sections
on
both
the
central
processing
unit
(cpu)
and
the
input/output
unit
(i/o).
this
general
treatment
is
followed
by
three
sections
that
describe
in
greater
detail
the
implementation
of
compatibility
features
using
the
emulation
techniques
for
the
ibm
7074,
7080
and
7090
systems
on
ibm
system/360.
.b
cacm
december,
1965
.a
tucker,
s.
g.
.n
ca651205
jb
march
6,
1978
4:09
pm
.x
1164
5
1164
1164
5
1164
1164
5
1164
.i
1165
.t
the
spectra
70/45
emulator
for
the
rca
301
.w
the
rca
301
emulator
system
is
supplied
with
the
spectra
70/45
as
a
reprogramming
aid.
it
allows
an
rca
301
object
program
to
be
run
on
the
spectra
70/45
without
necessitating
changes
in
the
rca
301
object
code.
execution
rates
are
considerably
better
than
traditional
simulation.
the
emulator
provides
an
increase
in
throughput
capacity
for
the
301
user
on
the
spectra
70/45.
the
emulator
makes
use
of
both
hardware
micro-program
routines
and
software
routines
to
accomplish
its
function.
.b
cacm
december,
1965
.a
benjamin,
r.
i.
.n
ca651204
jb
march
6,
1978
4:15
pm
.x
1165
5
1165
1165
5
1165
1165
5
1165
.i
1166
.t
a
use
of
macros
in
translation
of
symbolic
assembly
language
of
one
computer
to
another
.w
a
set
of
macro-operations
has
been
prepared
to
assist
in
translating
ibm
7090
symbolic
assembly
language
programs
to
ibm
7040
machine
language
programs.
this
set,
inserted
at
the
beginning
of
the
7090
symbolic
deck,
treats
incompatible
instruction
mnemonics
as
macro-instructions
to
produce
equivalent
7040
instruction
sets.
incompatible
instructions
are
categorized
into
basic
operational
classes
which
can
be
expressed
by
a
single
basic
skeleton.
several
levels
of
macro
calls
are
required
to
supply
arguments
to
the
basic
skeleton
for
each
particular
instruction.
modification
at
execution
time
of
the
address
or
tag
of
an
incompatible
instruction
requires
incorporation
of
an
address-tag
equivalent.
i/o
is
handled
by
generating
calls
to
i/o
simulation
subroutines.
.b
cacm
december,
1965
.a
dellert
jr.,
g.
t.
.n
ca651203
jb
march
6,
1978
4:20
pm
.x
1166
5
1166
1166
5
1166
1166
5
1166
.i
1167
.t
on
the
translation
of
machine
language
programs
.w
automatic
translation
of
machine
language
programs
is
becoming
a
highly
desirable
goal
with
the
advent
of
new
large-scale
computers.
the
pitfalls
that
make
it
difficult
to
achieve
completely
automatic
translations
are
analyzed,
and
it
is
shown
that
these
are
primarily
of
a
semantic
nature.
a
semi-automatic
procedure
for
resolving
semantic
problems
is
suggested.
.b
cacm
december,
1965
.a
gaines,
r.
s.
.n
ca651202
jb
march
6,
1978
4:23
pm
.x
1167
5
1167
1167
5
1167
1167
5
1167
.i
1168
.t
across
machine
lines
in
cobol
.w
the
production
of
a
large,
file-maintenance-and-retrieval
program
system
written
in
cobol
is
described.
the
cobol
language
was
used
specifically
to
enable
the
system
to
operate
on
three
ibm
computers.
.b
cacm
december,
1965
.a
fredericks,
d.
s.
warburtin,
c.
r.
.n
ca651201
jb
march
6,
1978
4:26
pm
.x
1168
5
1168
1168
5
1168
1168
5
1168
.i
1169
.t
an
algorithm
for
minimizing
backboard
wiring
functions
.w
a
partially
exhaustive
algorithm
is
presented
for
solving
the
following
problem
arising
from
automatic
layout
of
a
computer.
given
an
ordered
set
e1,
e2,...,
en
of
n
computer
components,
for
each
permutation
of
the
elements
e1,
e2..,
en,
there
is
attached
a
value
of
an
integer
function
f.
the
algorithm
finds
a
local
minimum
of
f
by
evaluating
the
set
{delta
f}
of
the
increments
corresponding
to
a
certain
set
of
exchanges
of
two
elements.then
the
exchange
corresponding
to
the
least
negative
increment
of
{delta
f}
is
performed.
the
process
is
iterated
and
stopped
when
the
set
of
the
increments
is
a
positive
or
empty
set,
which,
it
is
proved,
corresponds
to
a
minimum.
the
procedure
is
similar
to
the
downhill
method
for
finding
the
minimum
of
a
real
function
f(p),
and
can
be
applied
to
other
placement
problems.
experimental
results
are
presented
with
backboards
formed
by
many
elements
and
different
initial
placements.
.b
cacm
november,
1965
.a
pomentale,
t.
.n
ca651112
jb
march
6,
1978
4:35
pm
.x
1169
5
1169
1169
5
1169
1169
5
1169
.i
1170
.t
analyzing
english
syntax
with
a
pattern-learning
parser
.w
a
dependency
analysis
system
based
on
pattern
recognition
and
learning
logic
was
developed
to
infer
word
classes
and
rules
of
syntactic
combination
from
experience
with
text
which
had
been
analyzed.
the
characteristics
used
to
form
word
classes
are
the
depth
in
the
dependency
tree
of
each
word,
the
direction
of
its
governor
and
the
same
features
for
each
of
its
immediate
neighbors.
syntactic
rules
of
combination
show
the
relation
of
a
word
to
its
governor
in
the
depth
pattern
of
the
sentence.
the
system
was
tested
on
400
elementary
basic
english
sentences
including
300
used
earlier
by
knowlton
in
a
different
learning
parser
of
all
400
sentences.
after
experience
with
300
sentences
it
was
able
to
generalize
with
77
percent
accuracy
to
the
next
100.
in
accumulative
learning
trials
after
the
first
200
sentences
it
averaged
a
probability
of
.9
for
accurately
parsing
each
new
sentence
it
encountered.
it
was
concluded
that
the
system
is
adequate
for
learning
to
parse
the
bulk
of
basic
english
but
that
further
development
is
required
before
conclusions
about
its
application
to
ordinary
english
can
be
stored.
the
system
is
operational
and
available
on
the
arpa/sdc
time-shared
computing
system.
.b
cacm
november,
1965
.a
mcconlogue,
k.
simmons,
r.
f.
.n
ca651111
jb
march
6,
1978
4:45
pm
.x
1170
5
1170
1170
5
1170
1170
5
1170
.i
1171
.t
a
comparison
of
the
primal-simplex
and
primal-dual
algorithms
for
linear
programming
.w
a
statistical
comparison
of
the
primal-dual
and
the
more
commonly
used
primal-simplex
algorithm
for
solving
linear
programming
problems
has
been
made
under
the
assumption
of
starting
with
a
full
artificial
basis.
under
these
conditions
the
primal-dual
method
shows
a
statistically
significant
superiority
on
randomly
generated
problems.
it
has
also
been
found,
via
a
regression
analysis,
that
the
relevant
parameters
in
determining
the
difference
in
the
number
of
iterations
between
the
algorithms
is
not
only
the
number
of
constraints
and
the
number
of
variables
but
also
the
ratio
of
the
latter
to
the
former.
.b
cacm
november,
1965
.a
mueller,
r.
k.
cooper,
l.
.n
ca651110
jb
march
6,
1978
4:50
pm
.x
1171
5
1171
1171
5
1171
1171
5
1171
.i
1172
.t
conversion
of
limited-entry
decision
tables
to
computer
programs
.w
decision
tables
are
useful
for
describing
a
set
of
complex
decision
rules
based
on
given
sets
of
conditions.
algorithms
that
can
efficiently
convert
the
tables
into
computer
programs
will
extend
the
usefulness
of
decision
tables
to
computer
users.
two
such
algorithms,
based
on
work
done
by
m.
s.
montalbano,
are
described
and
extended
here
to
handle
dashes
and
else-decision
rules.
the
first
algorithm
minimizes
the
computer
storage
space
required
for
the
resultant
program,
the
second
minimizes
computer
running
time.
during
the
conversion
process,
both
pinpoint
any
contradictions
or
redundancies
among
the
rules
in
a
table.
.b
cacm
november,
1965
.a
pollack,
s.
l.
.n
ca651109
jb
march
6,
1978
4:56
pm
.x
1172
5
1172
1172
5
1172
1172
5
1172
1354
5
1172
2053
5
1172
2220
5
1172
2273
5
1172
2453
5
1172
2598
5
1172
2726
5
1172
2856
5
1172
1172
6
1172
1172
6
1172
1172
6
1172
1172
6
1172
1172
6
1172
1172
6
1172
1172
6
1172
1172
6
1172
1237
6
1172
1237
6
1172
1237
6
1172
1237
6
1172
1327
6
1172
1327
6
1172
1327
6
1172
1327
6
1172
1327
6
1172
1327
6
1172
1354
6
1172
1354
6
1172
1354
6
1172
1354
6
1172
1354
6
1172
1354
6
1172
1488
6
1172
1489
6
1172
1489
6
1172
1548
6
1172
1548
6
1172
1548
6
1172
1684
6
1172
250
6
1172
2053
6
1172
2053
6
1172
2053
6
1172
2220
6
1172
2220
6
1172
2220
6
1172
2220
6
1172
2220
6
1172
2221
6
1172
2263
6
1172
2263
6
1172
2453
6
1172
2453
6
1172
2598
6
1172
2691
6
1172
753
6
1172
.i
1173
.t
the
performance
of
a
system
for
automatic
segmentation
of
programs
within
an
algol
compiler
(gier
algol)
.w
the
gier
algol
compiler
makes
use
of
an
automatic
system
for
handling
the
transfers
of
program
segments
from
the
drum
store
to
the
core
store
at
program
execution
time.
the
logic
of
this
system
is
described.
the
performance
of
the
system
is
discussed,
primarily
on
the
basis
of
execution
times
related
to
two
specific
programs.
this
discussion
concludes
with
an
assessment
of
the
potential
gains
of
various
ways
of
improving
the
system.
.b
cacm
november,
1965
.a
naur,
p.
.n
ca651108
jb
march
6,
1978
5:00
pm
.x
1173
4
1173
1188
4
1173
1173
5
1173
1173
5
1173
1173
5
1173
1774
5
1173
2343
5
1173
642
5
1173
800
6
1173
1173
6
1173
1173
6
1173
1774
6
1173
1845
6
1173
271
6
1173
.i
1174
.t
inverse
permutation
(algorithm
250
[g6])
.b
cacm
november,
1965
.a
medlock,
c.
w.
.n
ca651107
jb
march
6,
1978
5:01
pm
.x
1174
5
1174
1174
5
1174
1174
5
1174
.i
1175
.t
quickersort
(algorithm
271
[m1])
.b
cacm
november,
1965
.a
scowen,
r.
s.
.n
ca651106
jb
march
6,
1978
5:02
pm
.x
1175
4
1175
1175
4
1175
1919
4
1175
1919
4
1175
1969
4
1175
1997
4
1175
2017
4
1175
2041
4
1175
2191
4
1175
2216
4
1175
2388
4
1175
2679
4
1175
3054
4
1175
3121
4
1175
1175
5
1175
1175
5
1175
1175
5
1175
1919
5
1175
1969
5
1175
308
5
1175
2118
5
1175
2348
5
1175
2679
5
1175
3054
5
1175
864
5
1175
864
6
1175
970
6
1175
1175
6
1175
1175
6
1175
1175
6
1175
1175
6
1175
1175
6
1175
1175
6
1175
1190
6
1175
1228
6
1175
1880
6
1175
1919
6
1175
1969
6
1175
1969
6
1175
1980
6
1175
1997
6
1175
1997
6
1175
307
6
1175
308
6
1175
308
6
1175
308
6
1175
308
6
1175
309
6
1175
309
6
1175
2017
6
1175
2042
6
1175
2679
6
1175
74
6
1175
3187
6
1175
3187
6
1175
507
6
1175
716
6
1175
776
6
1175
783
6
1175
.i
1176
.t
finding
eigenvectors
by
gaussian
elimination
(algorithm
270
[f2])
.b
cacm
november,
1965
.a
newhouse,
a.
.n
ca651105
jb
march
6,
1978
5:03
pm
.x
1176
5
1176
1176
5
1176
1176
5
1176
.i
1177
.t
determinant
evaluation
(algorithm
269
[f3])
.b
cacm
november,
1965
.a
pfann,
j.
.n
ca651104
jb
march
6,
1978
5:05
pm
.x
1177
4
1177
806
4
1177
1177
5
1177
1177
5
1177
1177
5
1177
1931
5
1177
1946
5
1177
454
5
1177
878
6
1177
902
6
1177
1093
6
1177
1177
6
1177
1177
6
1177
1387
6
1177
1393
6
1177
311
6
1177
360
6
1177
731
6
1177
.i
1178
.t
algol
60
reference
language
editor
(algorithm
268
[r2])
.b
cacm
november,
1965
.a
mckeeman,
w.
m.
.n
ca651103
jb
march
6,
1978
5:06
pm
.x
1178
5
1178
1178
5
1178
1178
5
1178
.i
1179
.t
pufft-the
purdue
university
fast
fortran
translator
.w
a
core
resident,
compile-and-go
system
designed
for
the
ibm
7090/7094
computer
is
described.
in
little
more
than
half
of
the
32k
word
core
memory
pufft
provides
a
monitor
for
job
sequencing,
a
translator
for
the
full
fortran
iv
language,
the
fortran
subroutine
library,
an
input--output
system
for
use
at
compile
time
and
at
execute
time,
and
a
rather
elaborate
diagnostic
message
writing
routine.
batches
of
small-
and
medium-sized
fortran
iv
source
language
programs
are
processed
at
very
high
speeds.
language
compatibility
has
been
maintained
so
that
programs
may
be
debugged
in
the
pufft
system
and
then
recompiled
and
run
in
the
ibjob-ibftc
system
supplied
by
the
manufacturer.
.b
cacm
november,
1965
.a
rosen,
s.
spurgeon,
a.
donnelly,
j.
k.
.n
ca651102
jb
march
6,
1978
6:17
pm
.x
1134
4
1179
1179
4
1179
1179
4
1179
1288
4
1179
1544
4
1179
1646
4
1179
1861
4
1179
2111
4
1179
2534
4
1179
2556
4
1179
2650
4
1179
1179
5
1179
1179
5
1179
1179
5
1179
1646
5
1179
1647
5
1179
408
5
1179
830
5
1179
830
6
1179
987
6
1179
1072
6
1179
1179
6
1179
1179
6
1179
1647
6
1179
224
6
1179
680
6
1179
.i
1180
.t
axle:
an
axiomatic
language
for
string
transformations
.w
axle
is
a
language
designed
for
data
manipulation.
data
arranged
in
a
linear
form
in
a
workspace
is
transformed
according
to
a
table
of
axioms,
called
imperatives.
a
transformation
consists
of
a
matching
procedure,
which
decides
where
an
imperative
is
applicable,
and
a
replacement
procedure
that
modifies
that
part
of
the
workspace.
imperatives
are
applied
in
accordance
with
definitions
of
symbolic
terms,
presented
systematically
in
an
assertion
table.
the
process
of
definition
includes
the
special
case
of
recursive
assertions.
several
complete
programs
of
imperatives
are
given
to
show
a
few
applications
of
the
language.
.b
cacm
november,
1965
.a
cohen,
i.
wegstein,
j.
h.
.n
ca651101
jb
march
6,
1978
6:22
pm
.x
1180
5
1180
1180
5
1180
1180
5
1180
1395
5
1180
1706
5
1180
1180
6
1180
1180
6
1180
1395
6
1180
210
6
1180
.i
1181
.t
a
simple
data
transmission
system
using
the
office
telephone
.w
a
method
has
evolved
for
transmitting
data
of
a
type
originating
in
many
laboratory
situation
direct
to
a
central
computer.
the
method
requires
almost
no
specialized
equipment
and
uses
any
ordinary
telephone
on
a
"callup"
basis.
present
applications
include
cardiac-output
calculations,
radio-activity
tracer
studies
and
neurophysiology
time-sequence
studies
of
nerve
impulses.
.b
cacm
october,
1965
.a
neilsen,
i.
r.
.n
ca651014
jb
march
6,
1978
6:25
pm
.x
1181
4
1181
1181
5
1181
1181
5
1181
1181
5
1181
698
5
1181
.i
1182
.t
contextual
correlates
of
synonymy
.w
experimental
corroboration
was
obtained
for
the
hypothesis
that
the
proportion
of
words
common
to
the
contexts
of
word
a
and
to
the
contexts
of
word
b
is
a
function
of
the
degree
to
which
a
and
b
are
similar
in
meaning.
the
shapes
of
the
functions,
however,
indicate
that
similarity
of
context
is
reliable
as
criterion
only
for
detecting
pairs
of
words
that
are
very
similar
in
meaning.
.b
cacm
october,
1965
.a
rubenstein,
h.
goodenough,
j.
b.
.n
ca651013
jb
march
6,
1978
6:29
pm
.x
1182
5
1182
1182
5
1182
1182
5
1182
.i
1183
.t
a
note
on
the
use
of
a
digital
computer
for
doing
tedious
algebra
and
programming
.w
a
special
purpose
compiler
was
written
with
fortran
ii
language
and
made
possible
the
writing
of
very
long
programs
by
the
computer.
the
procedure
is
based
on
a
straight-forward
use
of
format
statements
for
generating
machine-written
programs.
.b
cacm
october,
1965
.a
veronis,
g.
.n
ca651012
jb
march
6,
1978
6:31
pm
.x
1183
5
1183
1183
5
1183
1183
5
1183
.i
1184
.t
a
fast
storage
allocator
.w
a
fast
storage
bookkeeping
method
is
described
which
is
particularly
appropriate
for
list-structure
operations
and
other
situations
involving
many
sizes
of
blocks
that
are
fixed
in
size
and
location.
this
scheme,
used
in
the
llllll
or
l6
(bell
telephone
laboratories
low-level
list
language),
makes
available
blocks
of
computer
registers
in
several
different
sizes:
the
smaller
blocks
are
obtained
by
successively
splitting
larger
ones
in
half,
and
the
larger
blocks
are
reconstituted
if
and
when
their
parts
are
simultaneously
free.
.b
cacm
october,
1965
.a
knowlton,
k.c.
.n
ca651011
jb
march
6,
1978
6:35
pm
.x
1184
5
1184
1184
5
1184
1184
5
1184
1389
5
1184
1552
5
1184
2162
5
1184
2435
5
1184
2596
5
1184
2768
5
1184
2845
5
1184
2902
5
1184
2955
5
1184
1051
6
1184
1062
6
1184
1184
6
1184
1184
6
1184
1184
6
1184
1184
6
1184
1184
6
1184
1184
6
1184
1184
6
1184
1184
6
1184
1184
6
1184
1211
6
1184
1389
6
1184
1421
6
1184
1552
6
1184
1879
6
1184
1879
6
1184
378
6
1184
2435
6
1184
2435
6
1184
2435
6
1184
2435
6
1184
2435
6
1184
2596
6
1184
2596
6
1184
2598
6
1184
2734
6
1184
2736
6
1184
2747
6
1184
2747
6
1184
2747
6
1184
2768
6
1184
2768
6
1184
2773
6
1184
.i
1185
.t
a
program
to
solve
the
pentomino
problem
by
the
recursive
use
of
macros
.w
a
coding
technique
is
described
in
which
certain
macro-instructions
are
given
lists
as
arguments
and
are
thereby
used
recursively.
the
discussion
covers
primarily
an
example
in
which
the
technique
is
used
to
solve
the
pentomino
problem-the
problem
of
fitting
12
pentominos
without
overlapping
into
a
plane
area
formed
of
60
elemental
squares.
.b
cacm
october,
1965
.a
fletcher,
j.
g.
.n
ca651010
jb
march
6,
1978
6:37
pm
.x
1185
5
1185
1185
5
1185
1185
5
1185
1531
5
1185
2707
5
1185
2753
5
1185
1185
6
1185
1185
6
1185
1185
6
1185
1455
6
1185
.i
1186
.t
recursive
solution
of
a
class
of
combinatorial
problems:
an
example
.w
combinatorial
problems
requiring
the
selection
of
n
elements
from
a
set
of
m
elements
may
be
solved
by
a
recursion
process
analogous
to
that
for
computing
binomial
coefficients.
several
specific
problems
are
analyzed,
the
general
technique
is
exposed,
and
an
algol
program
is
developed
for
one
of
the
problems.
.b
cacm
october,
1965
.a
lynch,w.
c.
.n
ca651009
jb
march
6,
1978
6:40
pm
.x
1186
5
1186
1186
5
1186
1186
5
1186
.i
1187
.t
note
on
an
ascii-octal
code
table
(standards)
.b
cacm
october,
1965
.a
crosby,
w.
s.
.n
ca651008
jb
march
6,
1978
6:42
pm
.x
1187
5
1187
1187
5
1187
1187
5
1187
.i
1188
.t
an
algol-like
computer
design
language
.w
the
idea
of
constructing
a
computer
design
language
by
making
use
of
an
algol-like
programming
language
is
presented.
a
computer
designer
can
benefit
from
using
a
design
language
at
a
higher
level
just
as
a
computer
user
can
benefit
from
a
higher
level
programming
language.
the
purposes
and
requirements
of
the
design
language
are
enumerated.
to
achieve
most
of
the
purposes
a
translator
is
required
to
translate
a
design
of
computer
logic
into
a
set
of
boolean
equations.
the
design
language
is
presented
in
terms
of
vocabulary,
statements,
sequences
and
microprogram.
included
are
examples
of
identifiers,
expressions
with
both
unary
and
binary
operators,
declaration
statements,
transfer
statements,
terminal
statements,
exchange
statements,
if
statements,
do
statements,
go
to
statements,
several
sequences
and
a
microprogram.
.b
cacm
october,
1965
.a
chu,
y.
.n
ca651007
jb
march
6,
1978
6:48
pm
.x
249
4
1188
254
4
1188
272
4
1188
1102
4
1188
1109
4
1188
1140
4
1188
1173
4
1188
1188
4
1188
1188
4
1188
1306
4
1188
1464
4
1188
1491
4
1188
1767
4
1188
1781
4
1188
1787
4
1188
1949
4
1188
321
4
1188
2059
4
1188
2126
4
1188
435
4
1188
437
4
1188
463
4
1188
483
4
1188
491
4
1188
2732
4
1188
560
4
1188
583
4
1188
3073
4
1188
627
4
1188
631
4
1188
632
4
1188
642
4
1188
644
4
1188
653
4
1188
680
4
1188
761
4
1188
762
4
1188
763
4
1188
123
4
1188
140
4
1188
919
4
1188
989
4
1188
196
5
1188
1188
5
1188
1188
5
1188
1188
5
1188
642
5
1188
.i
1189
.t
random
normal
deviate
(algorithm
267
[g5])
.b
cacm
october,
1965
.a
pike,
m.
c.
.n
ca651006
jb
march
6,
1978
6:49
pm
.x
1189
5
1189
1189
5
1189
1189
5
1189
1716
5
1189
1189
6
1189
.i
1190
.t
pseudo-random
numbers
(algorithm
266
[g5])
.b
cacm
october,
1965
.a
pike,
m.
c.
hill,
i.
d.
.n
ca651005
jb
march
6,
1978
6:51
pm
.x
1190
4
1190
1190
5
1190
1190
5
1190
1190
5
1190
1663
5
1190
2195
5
1190
2679
5
1190
456
5
1190
970
6
1190
1175
6
1190
1190
6
1190
1190
6
1190
1190
6
1190
1228
6
1190
1648
6
1190
1969
6
1190
1997
6
1190
308
6
1190
2042
6
1190
3187
6
1190
507
6
1190
716
6
1190
783
6
1190
.i
1191
.t
find
precedence
functions
(algorithm
265
[l2])
.b
cacm
october,
1965
.a
wirth,
n.
.n
ca651004
jb
march
6,
1978
6:52
pm
.x
1191
5
1191
1191
5
1191
1191
5
1191
1836
5
1191
2340
5
1191
1191
6
1191
1191
6
1191
1477
6
1191
1491
6
1191
1491
6
1191
1683
6
1191
1781
6
1191
1836
6
1191
577
6
1191
.i
1192
.t
interpolation
in
a
table
(algorithm
264
[e1])
.b
cacm
october,
1965
.a
stafford,
j.
.n
ca651003
jb
march
6,
1978
6:52
pm
.x
1192
5
1192
1192
5
1192
1192
5
1192
.i
1193
.t
gomory
1
(algorithm
263
[h])
.b
cacm
october,
1965
.a
langmaack,
h.
.n
ca651002
jb
march
6,
1978
6:54
pm
.x
1193
5
1193
1193
5
1193
1193
5
1193
.i
1194
.t
establishment
of
the
acm
repository
and
principles
of
the
ir
system
applied
to
its
operation
.w
the
history
of
the
establishment
of
the
acm
repository
at
the
moore
school,
university
of
pennsylvania,
is
reviewed
briefly.
two
principles
are
presented
as
paramount
in
the
provision
of
information
services:
(1)
easy
accessibility
to
the
information
files
by
users
unfamiliar
with
file
organization,
and
(2)
value
of
service
exceeding
user
costs.
these
principles
serve
as
guides
in
mechanizing
the
acm
repository.
the
main
features
of
the
information
system
are
direct
user
access
via
on-line
teletypewriter
console,
direct
user
access
to
all
details
of
the
system
organization,
unrestricted
and
expandable
search
vocabulary,
user
access
through
many
facets
of
document
indexing,
and
stochastic
search
through
linked
index
terms
and
other
file
relationships.
the
first
contribution
to
the
acm
repository
consisted
of
315
documents,
relating
primarily
to
early
research
on
compilers.
these
documents
have
been
cataloged
and
indexed
and
the
catalog
is
scheduled
to
appear
in
computing
reviews.
the
indexing
system
is
described
in
detail.
the
main
catalog
is
used
to
describe
the
documents,
and
inverted
lists
are
provided
by
the
repository
system
for
retrieval
by
concept
coordination.
.b
cacm
october,
1965
.a
rubinoff,
m.
white
jr.,
j.
f.
.n
ca651001
jb
march
6,
1978
7:03
pm
.x
1194
5
1194
1194
5
1194
1194
5
1194
1681
5
1194
1699
5
1194
1194
6
1194
1194
6
1194
1324
6
1194
1681
6
1194
.i
1195
.t
uplifts-university
of
pittsburgh
linear
file
tandem
system
.w
a
series
of
computer
programs
has
been
developed
and
is
now
operational
for
processing
the
national
aeronautics
and
space
administration
linear
file
system
on
an
ibm
1401-7090
combined
data
processing
system.
the
program
are
note-worthy
in
that
they
create
fixed
length
logical
records
and
fixed
length
blocks
from
variable
length
source
data,
and
format
the
output
for
optimization
of
processing
on
the
ibm
7090
system.
the
programs
are
completely
self-checking
and
test
for
both
validity
and
accuracy
of
the
input
materials
as
provided
by
the
national
aeronautics
and
space
administration.
.b
cacm
september,
1965
.a
canter,
j.
d.
donaghey,
c.
e.
.n
ca650911
jb
march
6,
1978
7:10
pm
.x
1195
5
1195
1195
5
1195
1195
5
1195
.i
1196
.t
applications
of
differential
equations
in
general
problem
solving
.w
a
large
class
of
problems
leading
to
digital
computer
processing
can
be
formulated
in
terms
of
the
numerical
solution
of
systems
of
ordinary
differential
equations.
powerful
methods
are
in
existence
for
the
solution
of
such
systems.
a
good
general
purpose
routine
for
the
solution
of
such
systems
furnishes
a
powerful
tool
for
processing
many
problems.
this
is
true
from
the
point
of
view
of
ease
of
programming,
ease
of
debugging,
and
minimization
of
computer
time.
a
number
of
examples
are
discussed
in
detail.
.b
cacm
september,
1965
.a
klopfenstein,
r.
w.
.n
ca650910
jb
march
6,
1978
7:16
pm
.x
1196
5
1196
1196
5
1196
1196
5
1196
.i
1197
.t
finding
zeros
of
a
polynomial
by
the
q-d
algorithm
.w
a
method
which
finds
simultaneously
all
the
zeros
of
a
polynomial,
developed
by
h.
rutishauser,
has
been
tested
on
a
number
of
polynomials
with
real
coefficients.
this
slowly
converging
method
(the
quotient-difference
(q-d)
algorithm)
provides
starting
values
for
a
newton
or
a
bairstow
algorithm
for
more
rapid
convergence.
necessary
and
sufficient
conditions
for
the
existence
of
the
q-d
scheme
are
not
completely
known;
however,
failure
may
occur
when
zeros
have
equal,
or
nearly
equal
magnitudes.
success
was
achieved,
in
most
of
the
cases
tried,
with
the
failures
usually
traceable
to
the
equal
magnitude
difficulty.
in
some
cases,
computer
roundoff
may
result
in
errors
which
spoil
the
scheme.
even
if
the
q-d
algorithm
does
not
give
all
the
zeros,
it
will
usually
find
a
majority
of
them.
.b
cacm
september,
1965
.a
henrich,
p.
watkins,
b.
o.
.n
ca650908
jb
march
6,
1978
7:21
pm
.x
1197
5
1197
1197
5
1197
1197
5
1197
1524
5
1197
879
6
1197
1197
6
1197
311
6
1197
.i
1198
.t
solution
of
a
problem
in
concurrent
programming
control
.w
a
number
of
mainly
independent
sequential-cyclic
processes
with
restricted
means
of
communication
with
each
other
can
be
made
in
such
a
way
that
at
any
moment
one
and
only
one
of
them
is
engaged
in
the
"critical
section"
of
its
cycle.
.b
cacm
september,
1965
.a
dijkstra,
e.
w.
.n
ca650908
jb
march
6,
1978
7:24
pm
.x
1198
5
1198
1198
5
1198
1198
5
1198
1781
5
1198
2150
5
1198
2228
5
1198
2256
5
1198
2317
5
1198
2342
5
1198
2376
5
1198
2618
5
1198
3184
5
1198
123
6
1198
196
6
1198
919
6
1198
990
6
1198
1007
6
1198
1046
6
1198
1131
6
1198
1139
6
1198
1140
6
1198
1149
6
1198
1198
6
1198
1198
6
1198
1198
6
1198
1198
6
1198
1198
6
1198
1198
6
1198
1198
6
1198
1198
6
1198
1198
6
1198
1215
6
1198
1223
6
1198
1265
6
1198
1303
6
1198
1323
6
1198
1338
6
1198
1338
6
1198
1338
6
1198
1338
6
1198
1338
6
1198
1358
6
1198
1366
6
1198
1421
6
1198
1460
6
1198
1462
6
1198
1463
6
1198
1467
6
1198
1468
6
1198
1477
6
1198
1491
6
1198
1496
6
1198
1531
6
1198
1535
6
1198
1565
6
1198
1572
6
1198
1601
6
1198
1602
6
1198
1613
6
1198
1614
6
1198
1626
6
1198
1641
6
1198
1693
6
1198
1749
6
1198
1749
6
1198
1749
6
1198
1749
6
1198
1749
6
1198
1749
6
1198
1753
6
1198
1781
6
1198
1787
6
1198
1788
6
1198
205
6
1198
224
6
1198
249
6
1198
1877
6
1198
288
6
1198
1960
6
1198
316
6
1198
381
6
1198
398
6
1198
11
6
1198
2126
6
1198
2148
6
1198
2256
6
1198
404
6
1198
410
6
1198
463
6
1198
464
6
1198
483
6
1198
3184
6
1198
3188
6
1198
557
6
1198
584
6
1198
600
6
1198
680
6
1198
691
6
1198
763
6
1198
799
6
1198
.i
1199
.t
a
computer
center
simulation
project
.w
today's
computation
centers
are
based
on
rapidly
changing
technologies
of
hardware
and
software
systems.
it
is
difficult,
therefore,
to
base
decisions
on
experience;
in
most
instances,
the
benefits
of
comparable
experience
for
a
given
problem
situation
are
not
available.
in
this
paper,
a
mathematical
model
of
the
lockheed
central
computer
center
is
formulated
that
describes
the
operation
of
a
computation
center
in
terms
of
information
nets,
decision
processes,
and
control
functions.
experiments
performed
with
this
model,
the
results
of
the
experiments,
and
the
application
of
the
results
are
discussed.
.b
cacm
september,
1965
.a
hutchinson,
g.
k.
.n
ca650907jb
march
6,
1978
7:29
pm
.x
1199
5
1199
1199
5
1199
1199
5
1199
.i
1200
.t
on
reversible
subroutines
and
computers
that
run
backwards
.w
a
computer
design
is
describe
which
permits
subroutines
to
be
executed
backward
as
well
as
forward,
either
with
their
instructions
unchanged
or
replaced
with
conjugate
instructions.
it
is
shown
that
using
this
concept
a
number
of
new
subroutine
types
can
be
developed
with
rather
unusual
properties.
since
these
properties
are
analogous
to
certain
matrix
operations,
a
parallel
nomenclature
is
suggested
for
their
classification.
.b
cacm
september,
1965
.a
reily,
e.
d.
federighi,
f.
d.
.n
ca650906
jb
march
6,
19787:33
pm
.x
1200
5
1200
1200
5
1200
1200
5
1200
1945
5
1200
823
6
1200
914
6
1200
915
6
1200
917
6
1200
984
6
1200
989
6
1200
990
6
1200
1012
6
1200
1084
6
1200
1098
6
1200
1122
6
1200
1138
6
1200
1139
6
1200
1141
6
1200
1200
6
1200
1223
6
1200
1265
6
1200
1336
6
1200
1396
6
1200
1455
6
1200
1477
6
1200
1487
6
1200
1491
6
1200
1496
6
1200
483
6
1200
584
6
1200
669
6
1200
680
6
1200
763
6
1200
.i
1201
.t
generation
of
permutations
in
lexico-graphical
order
(algorithm
202
[g6])
.b
cacm
september,
1965
.a
elliott,
r.
w.
.n
ca650905
jb
march
6,
1978
7:35
pm
.x
1201
5
1201
1201
5
1201
1201
5
1201
.i
1202
.t
normal
random
(algorithm
200
[g5])
.b
cacm
september,
1965
.a
pike,
m.
c.
.n
ca650904
jb
march
6,
1978
7:36
pm
.x
1202
5
1202
1202
5
1202
1202
5
1202
.i
1203
.t
normdey
(algorithm
121
[g5])
.b
cacm
september,
1965
.a
pike,
m.
c.
.n
ca650903
jb
march
6,
19787:37
pm
.x
1203
5
1203
1203
5
1203
1203
5
1203
.i
1204
.t
character
structure
and
character
parity
sense
for
serial-by-bit
data
communication
in
the
american
standard
code
for
information
interchange
(proposed
american
standard)
.b
cacm
september,
1965
.n
ca650902
jb
march
6,
1978
7:41
pm
.x
1204
5
1204
1204
5
1204
1204
5
1204
.i
1205
.t
an
undergraduate
program
in
computer
science-preliminary
recommendations
.b
cacm
september,
1965
.a
a
report
from
the
acm
curriculum
committee
on
computer
science
.n
ca650901
jb
march
6,
1978
7:43
pm
.x
1107
4
1205
1205
4
1205
1205
4
1205
1205
4
1205
1205
4
1205
1100
5
1205
1104
5
1205
1107
5
1205
1205
5
1205
1205
5
1205
1205
5
1205
1413
5
1205
1654
5
1205
1771
5
1205
2478
5
1205
68
5
1205
1205
6
1205
1205
6
1205
1205
6
1205
1205
6
1205
1270
6
1205
1654
6
1205
1771
6
1205
2329
6
1205
.i
1206
.t
the
self-judgment
method
of
curve
fitting
.w
a
computer-oriented
method
for
processing
and
communicating
numerical
data
is
described.
the
instrument
reliability
factors
(irf),
which
exactly
define
the
limits
of
reliability
of
each
measured
item
of
information,
are
used
to
compute
the
maximum
permitted
error
(mpe)
associated
with
each
values
of
each
ordinate.
the
self-judgment
principle
(sjp)
is
used
to
discard
wrong
information
and
to
compute
mean
values
of
the
parameters
and
their
mpe's
in
terms
of
the
irf.
data
compatibility
tests
with
any
number
of
different
equations
can
be
made
quickly.
otherwise
intractable
problems
are
easily
solved,
and
the
design
of
many
experiments
is
greatly
simplified.
the
computational
and
mathematical
techniques
used
to
reduce
bias
in
the
sjp
are
discussed.
inadequacies
in
the
statistical
and
graphical
methods
of
curve
fitting
are
noted.
.b
cacm
august,
1965
.a
demaine,
p.
a.
d.
.n
ca650818
jb
march
6,
1978
7:50
pm
.x
1206
5
1206
1206
5
1206
1206
5
1206
.i
1207
.t
remarks
on
simulation
of
boolean
functions
.b
cacm
august,
1965
.a
dodd,
g.
g.
.n
ca650817
jb
march
6,
1978
7:52
pm
.x
1207
4
1207
1208
4
1207
3053
4
1207
1207
5
1207
1207
5
1207
1207
5
1207
1329
5
1207
.i
1208
.t
simulation
of
computer
logic
by
fortran
arithmetic
.b
cacm
august,
1965
.a
weingarten,
f.
w.
.n
ca650816
jb
march
6,
1978
7:53
pm
.x
1207
4
1208
1208
4
1208
3053
4
1208
1208
5
1208
1208
5
1208
1208
5
1208
1329
5
1208
1409
5
1208
1208
6
1208
.i
1209
.t
negative
and
zero
subscripts
in
fortran
ii
programming
for
the
ibm
1620
.b
cacm
august,
1965
.a
garber,
m.
s.
.n
ca650815
jb
march
6,
1978
7:56
pm
.x
1209
5
1209
1209
5
1209
1209
5
1209
.i
1210
.t
file-handling
within
fortran
.w
this
note
describes
some
fortran
subroutines
to
facilitate
handling
of
tape
files.
they
allow
symbolic
naming
of
information
files,
without
violating
the
casual
scientific
programmer's
idea
of
simplicity.
some
comments
on
two
years
use
of
these
subroutines
are
given.
.b
cacm
august,
1965
.a
harrison,
m.
c.
.n
ca650814
jb
march
6,
1978
7:59
pm
.x
1210
5
1210
1210
5
1210
1210
5
1210
.i
1211
.t
a
note
on
storage
of
strings
.w
a
method
for
storing
strings
is
described
which
uses
blocks
of
indefinite
size,
and
is
therefore
completely
dynamic.
its
relation
to
similar
schemes
is
discussed.
.b
cacm
august,
1965
.a
berztiss,
a.
t.
.n
ca650813
jb
march
6,
1978
8:02
pm
.x
1211
4
1211
1211
4
1211
1549
4
1211
1906
4
1211
2902
4
1211
2902
4
1211
1051
5
1211
1062
5
1211
1211
5
1211
1211
5
1211
1211
5
1211
2902
5
1211
1051
6
1211
1062
6
1211
1184
6
1211
1211
6
1211
1552
6
1211
1879
6
1211
2435
6
1211
2596
6
1211
2734
6
1211
2747
6
1211
2768
6
1211
.i
1212
.t
non-linear
extrapolation
and
two-point
boundary
value
problems
.w
it
is
suggested
that
the
convergence
properties
of
the
usual
picard
successive
approximation
scheme
may
be
improved
through
use
of
non-linrar
extrapolation
techniques.
a
numerical
example
is
provided.
.b
cacm
august,
1965
.a
bellman,
r.
kagiada,
h.
kalba,
r.
.n
ca650812
jb
march
6,
1978
8:05
pm
.x
1212
5
1212
1212
5
1212
1212
5
1212
.i
1213
.t
dynamic
format
specifications
.w
the
use
and
implementation
of
two
new
fortran
format
conversions
are
discussed.
these
format
types
give
the
fortran
programmer
control
of
input/output
specifications
at
execution
time.
.b
cacm
august,
1965
.a
ranelletti,
j.
e.
.n
ca650811
jb
march
6,
1978
8:07
pm
.x
1213
5
1213
1213
5
1213
1213
5
1213
.i
1214
.t
some
experiments
in
algebraic
manipulation
by
computer
.w
a
set
of
subroutines
to
allow
algebraic
manipulations
on
the
ibm
7094
computer
has
been
written
a
list
processor,
slip.
a
series
of
four
problems
of
increasing
difficulty
were
solved
using
these
routines.
.b
cacm
august,
1965
.a
lapidus,
a.
goldstein,
m.
.n
ca650810
jb
march
6,
1978
8:10
pm
.x
1024
4
1214
1051
4
1214
1098
4
1214
1214
4
1214
1214
4
1214
1380
4
1214
1388
4
1214
1393
4
1214
1396
4
1214
1485
4
1214
1487
4
1214
1549
4
1214
1570
4
1214
1878
4
1214
1946
4
1214
1957
4
1214
2168
4
1214
2723
4
1214
2857
4
1214
3112
4
1214
1132
5
1214
1214
5
1214
1214
5
1214
1214
5
1214
1396
5
1214
731
5
1214
964
6
1214
1028
6
1214
1029
6
1214
1083
6
1214
1132
6
1214
1214
6
1214
1278
6
1214
1334
6
1214
1365
6
1214
1386
6
1214
1387
6
1214
1388
6
1214
1392
6
1214
1393
6
1214
1394
6
1214
1395
6
1214
1396
6
1214
1397
6
1214
1496
6
1214
284
6
1214
407
6
1214
3199
6
1214
3200
6
1214
3201
6
1214
3202
6
1214
3203
6
1214
3204
6
1214
561
6
1214
730
6
1214
.i
1215
.t
some
techniques
used
in
the
alcor
illinois
7090
.w
an
algol
compiler
has
been
written
by
the
alcor
group
for
the
ibm
7090.
some
little
known
but
significant
techniques
in
compiler
writing,
together
with
organizational
details
of
this
compiler,
are
described.
timing
estimates
and
an
indication
of
compiler
requirements
are
also
given.
.b
cacm
august,
1965
.a
gries,
d.
paul,
m.
wiehle,
h.
r.
.n
ca650809
jb
march
6,
1978
8:13
pm
.x
267
4
1215
1139
4
1215
1141
4
1215
1215
4
1215
1215
4
1215
1215
4
1215
1223
4
1215
1647
4
1215
1682
4
1215
1781
4
1215
1781
4
1215
1787
4
1215
1787
4
1215
1792
4
1215
1945
4
1215
364
4
1215
405
4
1215
438
4
1215
2603
4
1215
763
4
1215
1025
5
1215
1215
5
1215
1215
5
1215
1215
5
1215
224
5
1215
1498
5
1215
1781
5
1215
1787
5
1215
763
5
1215
123
6
1215
196
6
1215
196
6
1215
919
6
1215
990
6
1215
1007
6
1215
1046
6
1215
1131
6
1215
1139
6
1215
1140
6
1215
1141
6
1215
1149
6
1215
1198
6
1215
1215
6
1215
1215
6
1215
1215
6
1215
1223
6
1215
1265
6
1215
1303
6
1215
1323
6
1215
1358
6
1215
1366
6
1215
1421
6
1215
1460
6
1215
1462
6
1215
1463
6
1215
1467
6
1215
1468
6
1215
1477
6
1215
1491
6
1215
1491
6
1215
1496
6
1215
1496
6
1215
1531
6
1215
1535
6
1215
1565
6
1215
1601
6
1215
1602
6
1215
1613
6
1215
1614
6
1215
1626
6
1215
1641
6
1215
1781
6
1215
1787
6
1215
1788
6
1215
205
6
1215
224
6
1215
224
6
1215
249
6
1215
288
6
1215
316
6
1215
381
6
1215
398
6
1215
11
6
1215
404
6
1215
410
6
1215
463
6
1215
464
6
1215
483
6
1215
3184
6
1215
3184
6
1215
3188
6
1215
584
6
1215
600
6
1215
680
6
1215
691
6
1215
763
6
1215
763
6
1215
799
6
1215
799
6
1215
.i
1216
.t
symbolic
derivatives
without
list
processing,
subroutines,
or
recursion
.w
a
routine
has
been
developed
which
computes
and
prints
out
the
symbolic
derivative
of
an
absolutely
continuous
elementary
function
of
one
or
several
variables.
no
use
is
made
of
list-processing
languages.
the
chain
rule
is
applied
and
the
result
is
edited
to
produce
results
as
elegant
and
efficient
as
those
obtained
by
hand
computation.
a
subset
may
be
imbeded
in
a
formula
translator
to
introduce
a
differentiation
operator
into
an
"algebraic"
programming
language.
.b
cacm
august,
1965
.a
smith,
p.
j.
.n
ca650808
jb
march
6,
1978
8:18
pm
.x
1028
4
1216
1028
4
1216
1216
4
1216
1216
4
1216
1216
4
1216
1278
4
1216
1278
4
1216
1347
4
1216
1347
4
1216
1392
4
1216
1396
4
1216
1396
4
1216
1396
4
1216
1536
4
1216
964
4
1216
1028
5
1216
1029
5
1216
1216
5
1216
1216
5
1216
1216
5
1216
561
5
1216
.i
1217
.t
map
of
partitions
into
integers
(algorithm
264
[a1])
.b
cacm
august,
1965
.a
mckay,
j.
k.
s.
.n
ca650807
jb
march
6,
1978
8:19
pm
.x
1217
5
1217
1217
5
1217
1217
5
1217
.i
1218
.t
partition
generator
(algorithm
263
[a1])
.b
cacm
august,
1965
.a
mckay,
j.
k.
s.
.n
ca650806
jb
march
6,
1978
8:20
pm
.x
1218
5
1218
1218
5
1218
1218
5
1218
2103
5
1218
1218
6
1218
.i
1219
.t
number
of
restricted
partitions
of
n
(algorithm
262
[a1])
.b
cacm
august,
1965
.a
mckay,j.
k.
s.
.n
ca650805
jb
march
6,
1978
8:26
pm
.x
1219
5
1219
1219
5
1219
1219
5
1219
2104
5
1219
2489
5
1219
1219
6
1219
1219
6
1219
2104
6
1219
.i
1220
.t
9-j
symbols
(algorithm
261
[z])
.b
cacm
august,
1965
.a
gunn,
j.
h.
.n
ca650804
jb
march
6,
1978
8:27
pm
.x
1220
5
1220
1220
5
1220
1220
5
1220
.i
1221
.t
6-j
symbols
(algorithm
260
[z])
.b
cacm
august,
1965
.a
gunn,
j.
h.
.n
ca650803
jb
march
6,
1978
8:28
pm
.x
1221
5
1221
1221
5
1221
1221
5
1221
.i
1222
.t
legendre
functions
for
arguments
larger
than
one
(algorithm
259
[s16])
.b
cacm
august,
1965
.a
gautschi,
w.
.n
ca650802
jb
march
6,
1978
8:30
pm
.x
1023
4
1222
1222
4
1222
1222
4
1222
1222
4
1222
1130
5
1222
1222
5
1222
1222
5
1222
1222
5
1222
245
5
1222
310
5
1222
.i
1223
.t
high
speed
compilation
of
efficient
object
code
.w
a
three-pass
compiler
with
the
following
properties
is
briefly
described:
the
last
two
passes
scan
an
intermediate
language
produced
by
the
preceding
pass
in
essentially
the
reverse
of
the
order
in
which
it
was
generated,
so
that
the
first
pass
is
the
only
one
which
hasto
read
the
bulky
problem-oriented
input.
the
double
scan,
one
in
either
direction,
performed
by
the
first
two
passes,
allows
the
compiler
to
remove
locally
constant
expressions
and
recursively
calculable
expressions
from
loops
and
to
do
the
important
part
of
common
subexpression
recognition.
optimization
such
as
the
effective
use
of
index
registers,
although
as
important,
is
not
discussed
since
the
object
code
which
would
be
most
efficient
is
highly
machine
dependent.
the
discussion
is
in
terms
of
a
fortran-like
language,
although
the
technique
is
applicable
to
most
algebraic
languages.
.b
cacm
august,
1965
.a
gear,
c.
w.
.n
ca650801
jb
march
6,
1978
8:45
pm
.x
267
4
1223
1139
4
1223
1141
4
1223
1215
4
1223
1223
4
1223
1223
4
1223
1388
4
1223
1647
4
1223
1781
4
1223
1787
4
1223
1792
4
1223
364
4
1223
405
4
1223
436
4
1223
438
4
1223
763
4
1223
1223
5
1223
1223
5
1223
1223
5
1223
224
5
1223
1781
5
1223
1807
5
1223
1945
5
1223
1947
5
1223
405
5
1223
823
6
1223
123
6
1223
196
6
1223
914
6
1223
915
6
1223
917
6
1223
919
6
1223
984
6
1223
989
6
1223
990
6
1223
990
6
1223
1007
6
1223
1012
6
1223
1046
6
1223
1084
6
1223
1098
6
1223
1122
6
1223
1131
6
1223
1134
6
1223
1138
6
1223
1139
6
1223
1139
6
1223
1140
6
1223
1141
6
1223
1149
6
1223
1198
6
1223
1200
6
1223
1215
6
1223
1223
6
1223
1223
6
1223
1223
6
1223
1223
6
1223
1248
6
1223
1248
6
1223
1265
6
1223
1265
6
1223
1303
6
1223
1323
6
1223
1336
6
1223
1358
6
1223
1366
6
1223
1396
6
1223
1421
6
1223
1455
6
1223
1460
6
1223
1462
6
1223
1463
6
1223
1467
6
1223
1468
6
1223
1477
6
1223
1477
6
1223
1487
6
1223
1491
6
1223
1491
6
1223
1496
6
1223
1496
6
1223
1531
6
1223
1535
6
1223
1551
6
1223
1565
6
1223
1601
6
1223
1602
6
1223
1613
6
1223
1614
6
1223
1626
6
1223
1641
6
1223
1787
6
1223
1788
6
1223
205
6
1223
224
6
1223
249
6
1223
288
6
1223
1947
6
1223
316
6
1223
381
6
1223
398
6
1223
399
6
1223
11
6
1223
404
6
1223
410
6
1223
463
6
1223
464
6
1223
483
6
1223
483
6
1223
3184
6
1223
3188
6
1223
584
6
1223
584
6
1223
600
6
1223
669
6
1223
680
6
1223
680
6
1223
691
6
1223
763
6
1223
763
6
1223
799
6
1223
.i
1224
.t
determining
a
computing
center
environment
.w
an
investigation
is
described
in
which
several
generally
unavailable
parameters
descriptive
of
a
computing
center
environment
are
obtained.
the
actual
data
collection
and
reduction
is
described,
and
the
results
of
one
month
of
this
collection
are
tabulated
and
summarized.
.b
cacm
july,
1965
.a
rosin,
r.
f.
.n
ca650711
jb
march
6,
1978
8:48
pm
.x
1224
5
1224
1224
5
1224
1224
5
1224
1533
5
1224
1604
5
1224
1224
6
1224
1224
6
1224
1410
6
1224
1604
6
1224
.i
1225
.t
the
predictive
analyzer
and
a
path
elimination
technique
.w
some
of
the
characteristic
features
of
a
predictive
analyzer,
a
system
of
syntactic
analysis
now
operational
at
harvard
on
and
ibm
7094,
are
delineated.
the
advantages
and
disadvantages
of
the
system
are
discussed
in
comparison
to
those
of
an
immediate
constituent
analyzer,
developed
at
the
rand
corporation
with
robinson's
english
grammar.
in
addition,
a
new
technique
is
described
for
repetitive
path
elimination
for
a
predictive
analyzer,
which
can
now
claim
efficiency
both
in
processing
time
and
core
storage
requirement.
.b
cacm
july,
1965
.a
kuno,
s.
.n
ca650710
jb
march
6,
1978
8:52
pm
.x
1225
4
1225
1225
4
1225
1350
4
1225
1350
4
1225
1646
4
1225
1781
4
1225
1945
4
1225
1945
4
1225
2650
4
1225
2698
4
1225
2708
4
1225
3093
4
1225
1012
5
1225
1225
5
1225
1225
5
1225
1225
5
1225
1350
5
1225
1659
5
1225
1856
5
1225
2050
5
1225
680
5
1225
1012
6
1225
1225
6
1225
1225
6
1225
1225
6
1225
1225
6
1225
1265
6
1225
1265
6
1225
1324
6
1225
1350
6
1225
1399
6
1225
1553
6
1225
1671
6
1225
1697
6
1225
680
6
1225
.i
1226
.t
the
organization
of
structured
files
.w
a
data
file
is
an
integral
part
of
a
data
processing
system.
in
many
systems,
the
selection
of
an
organization
for
the
data
within
the
file
can
be
critical
to
the
system's
operating
efficiency.
this
paper
provides
the
systems
designer
with
an
information
source
which
describes
ten
techniques
that
may
be
employed
for
organizing
structured
data.
the
characteristics
of
the
organizations
described
are
application
independent,
thus
providing
the
designer
with
a
reference
which
allows
him
to
limit
the
number
of
file
organizations
he
must
consider
for
his
system.
.b
cacm
july,
1965
.a
dzubak,
b.
j.
warburton,
c.
r.
.n
ca650709
jb
march
6,
1978
8:57
pm
.x
1050
4
1226
1226
4
1226
441
4
1226
758
4
1226
1226
5
1226
1226
5
1226
1226
5
1226
367
5
1226
.i
1227
.t
transport
(algorithm
258
[h])
.b
cacm
july,
1965
.a
bayer,
g.
.n
ca650708
jb
march
6,
1978
8:58
pm
.x
1227
5
1227
1227
5
1227
1227
5
1227
.i
1228
.t
treesort
3
(algorithm
245
[m1])
.b
cacm
july,
1965
.a
abrams,
p.
s.
.n
ca650707
jb
march
6,
1978
8:59
pm
.x
1228
5
1228
1228
5
1228
1228
5
1228
2042
5
1228
2679
5
1228
970
6
1228
970
6
1228
1175
6
1228
1190
6
1228
1228
6
1228
1228
6
1228
1969
6
1228
1997
6
1228
308
6
1228
2042
6
1228
3187
6
1228
507
6
1228
716
6
1228
783
6
1228
.i
1229
.t
random
permutation
(algorithm
235
[g6])
.b
cacm
july,
1965
.a
pike,
m.
c.
.n
ca650706
jb
march
6,
1978
9:00
pm
.x
1229
5
1229
1229
5
1229
1229
5
1229
.i
1230
.t
method
for
hyphenating
at
the
end
of
a
printed
line
.w
a
description
of
a
method
of
hyphenation
is
presented
as
a
result
of
application
of
several
general
rules.
the
character
sets
considered
by
the
routine
and
the
method
are
briefly
outlined.
.b
cacm
july,
1965
.a
rich,
r.
p.
stone,
a.
g.
.n
ca650705
jb
march
6,
1978
9:03
pm
.x
1230
5
1230
1230
5
1230
1230
5
1230
.i
1231
.t
peephole
optimization
.w
redundant
instructions
may
be
discarded
during
the
final
stage
of
compilation
by
using
a
simple
optimizing
technique
called
peephole
optimization.
the
method
is
described
and
examplesare
given.
.b
cacm
july,
1965
.a
mckeeman,
w.
m.
.n
ca650704
jb
march
6,
1978
9:05
pm
.x
1160
5
1231
1231
5
1231
1231
5
1231
1231
5
1231
2034
5
1231
984
6
1231
1231
6
1231
1231
6
1231
1565
6
1231
1852
6
1231
1926
6
1231
1947
6
1231
.i
1232
.t
representation
of
the
standard
ecma
7-bit
code
in
punched
cards
(ecma
standard)
.b
cacm
july,
1965
.n
ca650703
jb
march
6,
1978
9:06
pm
.x
1232
5
1232
1232
5
1232
1232
5
1232
.i
1233
.t
conventions
for
the
use
of
symbols
in
the
preparation
of
flowcharts
for
information
processing
systems
(a
standard
working
paper)
.w
this
paper
is
intended
as
an
outline
of
the
various
conventions
which
are
being
considered
for
the
use
of
flowcharts
for
information
processing
systems.
the
conventions
are
applied
to
the
use
of
the
symbols
appearing
in
the
proposed
american
standard
flowchart
symbols
and
not
with
the
symbols
per
se.
.b
cacm
july,
1965
.n
ca650702
jb
march
6,
1978
9:10
pm
.x
1233
5
1233
1233
5
1233
1233
5
1233
.i
1234
.t
the
structure
of
yet
another
algol
compiler
.w
a
high-speed
"top
down"
method
of
syntax
analysis
which
completely
eliminates
"back-up"
of
the
source
string
has
been
implemented
in
a
convenient
macro-language.
a
technique
of
simulation
at
compile
time
of
the
use
of
a
conventional
run-time
stack
enables
the
generation
of
code
for
expressions
which
minimizes
stores,
fetches
and
stack-pointer
motion
at
run
time,
while
properly
trating
recursion
and
side
effects
of
procedures.
block
structure
and
recursion
are
handled
without
need
for
interpretive
methods
at
run
times.
the
"context
problem"
in
the
transmission
to
recursive
procedures
of
parameters
"called
by
name"
is
solved
in
a
manner
which
permits
the
handling
of
the
common
cases
of
simple
expressions
and
array
identifiers
with
particular
efficiency.
.b
cacm
july,
1965
.a
kanner,
h.
kosinski,
p.
robinson,
c.
l.
.n
ca650701
jb
march
6,
1978
9:29
pm
.x
254
4
1234
1037
4
1234
1046
4
1234
1086
4
1234
1105
4
1234
1132
4
1234
1139
4
1234
1140
4
1234
1234
4
1234
1234
4
1234
1234
4
1234
1234
4
1234
1234
4
1234
1234
4
1234
1234
4
1234
1234
4
1234
1263
4
1234
1263
4
1234
1265
4
1234
1265
4
1234
1270
4
1234
1323
4
1234
1358
4
1234
1358
4
1234
1379
4
1234
1380
4
1234
1453
4
1234
1464
4
1234
1484
4
1234
1491
4
1234
1491
4
1234
1496
4
1234
1498
4
1234
1613
4
1234
1614
4
1234
1781
4
1234
1781
4
1234
1824
4
1234
1825
4
1234
1860
4
1234
321
4
1234
321
4
1234
2083
4
1234
2126
4
1234
2178
4
1234
2179
4
1234
2252
4
1234
2325
4
1234
2341
4
1234
2451
4
1234
2546
4
1234
2546
4
1234
464
4
1234
2645
4
1234
2652
4
1234
2684
4
1234
2842
4
1234
2929
4
1234
2934
4
1234
584
4
1234
3069
4
1234
631
4
1234
653
4
1234
669
4
1234
679
4
1234
680
4
1234
691
4
1234
761
4
1234
763
4
1234
795
4
1234
799
4
1234
945
4
1234
949
4
1234
989
4
1234
944
5
1234
1234
5
1234
1234
5
1234
1234
5
1234
321
5
1234
385
5
1234
400
5
1234
402
5
1234
404
5
1234
3184
5
1234
729
5
1234
.i
1235
.t
a
stochastic
approach
to
the
grammatical
coding
of
english
.w
a
computer
program
is
described
which
will
assign
each
word
in
an
english
text
to
its
form
class
or
part
of
speech.
the
program
operates
at
relatively
high
speed
in
only
a
limited
storage
space.
about
half
of
the
word-events
in
a
corpus
are
identified
through
the
use
of
a
small
dictionary
of
function
words
and
frequently
occurring
lexical
words.
some
suffix
tests
and
logical-decision
rules
are
employed
to
code
additional
words.
finally,
the
remaining
words
are
assigned
to
one
class
or
another
on
the
basis
of
the
most
probable
form
classes
to
occur
within
the
already
identified
contexts.
the
conditional
probabilities
used
as
a
basis
for
this
coding
were
empirically
derived
from
a
separate
hand-coded
corpus.on
preliminary
trials,
the
accuracy
of
the
coder
was
91%
to
93%,
with
obvious
ways
of
improving
the
algorithm
being
suggested
by
an
analysis
of
the
results.
.b
cacm
june,
1965
.a
stolz,
w.
s.
tannenbaum,
h.
carstensen,
f.
v.
.n
ca650620
jb
march
6,
1978
9:35
pm
.x
1235
5
1235
1235
5
1235
1235
5
1235
.i
1236
.t
the
smart
automatic
document
retrieval
system-an
illustration
.w
a
fully
automatic
document
retrieval
system
operating
on
the
ibm
7094
is
described.
the
system
is
characterized
by
the
fact
that
several
hundred
different
methods
are
available
to
analyze
documents
and
search
requests.
this
feature
is
used
in
the
retrieval
process
by
leaving
the
exact
sequence
of
operations
initially
unspecified,
and
adapting
the
search
strategy
to
the
needs
of
individual
users.
the
system
is
used
not
only
to
simulate
an
actual
operating
environment,
but
also
to
test
the
effectiveness
of
the
various
available
processing
methods.
results
obtained
so
far
seem
to
indicate
that
some
combination
of
analysis
procedures
can
in
general
be
relied
upon
to
retrieve
the
wanted
information.
a
typical
search
request
is
used
as
an
example
in
the
present
report
to
illustrate
systems
operations
and
evaluation
procedures.
.b
cacm
june,
1965
.a
salton,
g.
lesk,
m.
e.
.n
ca650619
jb
march
6,
1978
9:41
pm
.x
1236
5
1236
1236
5
1236
1236
5
1236
1457
5
1236
1236
6
1236
.i
1237
.t
conversion
of
decision
tables
to
computer
programs
.w
several
translation
procedures
for
the
conversion
of
decision
tables
to
programs
are
presented
and
then
evaluated
in
terms
of
storage
requirements,
execution
time
and
compile
time.
the
procedures
are
valuable
as
hand-coding
guides
or
as
algorithms
for
a
compiler.
both
limited-entry
and
extended-entry
tables
are
analyzed.
in
addition
to
table
analysis,
the
nature
of
table-oriented
programming
languages
and
features
is
discussed.
it
is
presumed
that
the
reader
is
familiar
with
the
nature
of
decision
tables
and
conventional
definitions.
.b
cacm
june,1965
.a
press,
l.
i.
.n
ca650618
jb
march
6,
1978
9:45
pm
.x
250
4
1237
1237
4
1237
1237
4
1237
1237
4
1237
1549
4
1237
1564
4
1237
2220
4
1237
2453
4
1237
753
4
1237
1237
5
1237
1237
5
1237
1237
5
1237
1354
5
1237
250
5
1237
1488
5
1237
1994
5
1237
320
5
1237
2053
5
1237
2220
5
1237
2273
5
1237
753
5
1237
1172
6
1237
1172
6
1237
1172
6
1237
1172
6
1237
1237
6
1237
1237
6
1237
1237
6
1237
1237
6
1237
1237
6
1237
1237
6
1237
1327
6
1237
1327
6
1237
1327
6
1237
1327
6
1237
1327
6
1237
1354
6
1237
1354
6
1237
1354
6
1237
1489
6
1237
1548
6
1237
1684
6
1237
250
6
1237
2053
6
1237
2220
6
1237
.i
1238
.t
a
technique
for
integrated
reports
from
a
multi-run
system
.w
the
requirements
of
a
requisition
accounting
system
for
the
san
francisco
overseas
supply
agency
(osa)
included
exception
reporting
to
osa
itself.
the
simultaneous
satisfaction
of
the
reporting
requirement
and
the
accounting
requirements
posed
definite
problems
in
system
design,
particularly
the
handling
of
the
reporting
function.
a
practical
and
satisfactory
solution
was
developed
by
expanding
the
basic
system
with
two
tailored
service
runs
for
report
production.
these
two
runs
permitted
a
final
system
that
was
easier
to
debug,
easy
to
maintain,
efficient
in
production
and
responsive
to
the
changing
requirements
of
osa.
.b
cacm
june,
1965
.a
budea,
n.
kamena,
j.
g.
kamena,
r.
m.
.n
ca650617
jb
march
6,
1978
9:49
pm
.x
1238
5
1238
1238
5
1238
1238
5
1238
.i
1239
.t
graycode
(algorithm
246
[z])
.b
cacm
june,
1965
.a
allen,
w.
d.
.n
ca650616
jb
march
6,
1978
9:50
pm
.x
1239
5
1239
1239
5
1239
1239
5
1239
.i
1240
.t
transport
(algorithm
258
[h])
.b
cacm
june,
1965
.a
bayer,
g.
.n
ca650615
jb
march
6,
1978
9:51
pm
.x
1240
5
1240
1240
5
1240
1240
5
1240
.i
1241
.t
havie
integrator
(algorithm
257
[d1])
.b
cacm
june,
1965
.a
kubik,
r.
n.
.n
ca650614
jb
march
6,
1978
10:09
pm
.x
1241
5
1241
1241
5
1241
1241
5
1241
1352
5
1241
1356
5
1241
1883
5
1241
2040
5
1241
834
6
1241
872
6
1241
1040
6
1241
1092
6
1241
1241
6
1241
1241
6
1241
1241
6
1241
1241
6
1241
1273
6
1241
1273
6
1241
1352
6
1241
1356
6
1241
324
6
1241
324
6
1241
429
6
1241
570
6
1241
621
6
1241
621
6
1241
786
6
1241
.i
1242
.t
modified
graeffe
method
(algorithm
256
[c2])
.b
cacm
june,
1965
.a
grau,
a.
a.
.n
ca650613
jb
march
6,
1978
10:10
pm
.x
1242
5
1242
1242
5
1242
1242
5
1242
1667
5
1242
178
6
1242
1242
6
1242
327
6
1242
.i
1243
.t
testing
the
understanding
of
the
difference
between
call
by
name
and
call
by
value
in
algol
60
.b
cacm
june,
1965
.a
weil,
r.
l.
.n
ca650612
jb
march
6,
1978
10:11
pm
.x
1243
5
1243
1243
5
1243
1243
5
1243
.i
1244
.t
bit
manipulation
in
fortran
language
.b
cacm
june,
1965
.a
tobey,
g.
d.
.n
ca650611
jb
march
6,
1978
10:12
pm
.x
1244
5
1244
1244
5
1244
1244
5
1244
.i
1245
.t
a
fortran
n-ary
counter
.b
cacm
june,
1965
.a
kent,
w.
.n
ca650610
jb
march
6,
1978
10:13
pm
.x
1245
5
1245
1245
5
1245
1245
5
1245
.i
1246
.t
deeply
nested
iterations
.b
cacm
june,
1965
.a
korphage,
r.
r.
.n
ca650609
jb
march
6,
1978
10:15
pm
.x
1246
5
1246
1246
5
1246
1246
5
1246
.i
1247
.t
an
operating
environment
for
dynamic-recursive
computer
programming
systems
.w
presented
in
this
paper
is
a
brief
nontechnical
introduction
to
oedipus,
a
computer
programming
system
which
can
serve
as
an
operating
environment
for
dynamic
and/or
recursive
programs
and
programming
systems.
the
available
services
include
dynamic
allocation
of
storage
for
contiguous
blocks
of
arbitrary
size,
input
and
output
for
a
hierarchy
of
data
types,
a
public
pushdown
list
for
automatic
recursive
programming,
a
rudimentary
compiler
for
subroutine
communication
and
bookkeeping,
and
debugging
aids.
.b
cacm
june,
1965
.a
brown,
w.
s.
.n
ca650608
jb
march
6,
1978
10:18
pm
.x
1247
4
1247
1945
4
1247
1247
5
1247
1247
5
1247
1247
5
1247
1336
5
1247
1397
5
1247
2704
5
1247
1247
6
1247
1247
6
1247
1552
6
1247
1749
6
1247
2356
6
1247
2379
6
1247
2673
6
1247
.i
1248
.t
on
the
automatic
simplification
of
computer
programs
.w
presented
in
this
paper
is
the
problem
of
writing
a
program
which
would
examine
any
other
program
and
perform
such
simplifications
on
it
as
can
be
detected
from
the
argument-program's
form
alone,
without
having
any
knowledge
of
what
it
is
supposed
to
do.
.b
cacm
june,
1965
.a
nievergelt,
j.
.n
ca650607
jb
march
6,
1978
10:24
pm
.x
1248
5
1248
1248
5
1248
1248
5
1248
1625
5
1248
1807
5
1248
1947
5
1248
1134
6
1248
1223
6
1248
1223
6
1248
1248
6
1248
1248
6
1248
1248
6
1248
1551
6
1248
1947
6
1248
399
6
1248
669
6
1248
.i
1249
.t
recorded
magnetic
tape
for
information
interchange
(200
cpi,
nrzi)
(on
the
revised
proposed
american
standard)
.b
cacm
june,
1965
.n
ca650606
jb
march
6,
1978
10:26
pm
.x
1249
5
1249
1249
5
1249
1249
5
1249
.i
1250
.t
graphic
symbols
for
problem
definition
and
analysis-a
standards
working
paper
.b
cacm
june,
1965
.n
ca650605
jb
march
7,
1978
12:35
pm
.x
1250
5
1250
1250
5
1250
1250
5
1250
.i
1251
.t
american
standard
and
ifip/icc
vocabularies
compared
.w
the
"proposed
american
standard
vocabulary
of
information
processing"
and
the
"ifip/icc
vocabulary
of
terms
used
in
information
processing"
are
analyzed
and
compared.
.b
cacm
june,
1965
.a
traub,
j.
f.
.n
ca650604
jb
march
7,
1978
12:38
pm
.x
1251
4
1251
975
5
1251
1251
5
1251
1251
5
1251
1251
5
1251
.i
1252
.t
symbolic
notations
for
statistical
tables
and
an
approach
towards
automatic
system
design
.w
the
preparation
of
statistical
tables
is
an
important
function
of
the
data
processing
systems
of
some
organizations,
and
a
symbolic
notation
for
the
description
of
tables
has
been
shown
to
be
a
useful
aid
to
documentation.
such
a
notation
also
provides
the
first
step
towards
making
automatic
a
tedious
and
time-consuming
part
of
system
design
and
programming
in
many
computer
applications.
one
notation
is
described
and
suggestions
are
made
for
the
implementation
of
the
larger
goal.
.b
cacm
june,
1965
.a
smith,
b.
w.
.n
ca650603
jb
march
7,
1978
12:41
pm
.x
1252
5
1252
1252
5
1252
1252
5
1252
.i
1253
.t
quikscript-a
simscript-
like
language
for
the
g-20
.w
quikscript
is
a
simulation
language
based
on
simscript
and
programmed
entirely
in
an
algebraic
language,
20-gate.
the
quikscript
language,
its
internal
implementation,
and
major
differences
between
quikscript
and
simscript
are
presented.
this
paper
is
not
a
programming
guide
to
the
language,
but
rather
an
attempt
to
present
its
flavor.
a
brief
description
of
simscript
is
included,
as
is
a
sufficient
description
of
20-gate
to
render
this
material
understandable
to
the
reader
familiar
with
algebraic
languages.
.b
cacm
june,
1965
.a
tonge,
f.
m.
keller,
p.
newell,
a.
.n
ca650602
jb
march
7,
1978
12:45
pm
.x
1253
5
1253
1253
5
1253
1253
5
1253
.i
1254
.t
the
iteration
element
.w
a
recent
addition
to
the
mad
language
has
made
the
iteration
structure
of
the
mad
through
statement
(corresponding
to
the
algol
for
statement
and
the
fortran
do
statement)
available
within
expressions.
.b
cacm
june,
1965
.a
galler,
b.
a.
fischer,
m.
j.
.n
ca650601
jb
march
7,
1978
12:49
pm
.x
1254
5
1254
1254
5
1254
1254
5
1254
.i
1255
.t
a
method
of
data
list
processing
with
application
to
eeg
analysis
.w
a
set
of
subroutines
is
discussed,
which
is
designed
to
aid
in
the
programming
of
computations
on
indexed
lists
of
numbers
using
machine
language
or
a
symbolic
assembly
system.
the
most
commonly
performed
list
operations
are
outlined,
and
logically
arranged
into
five
groups.
as
an
example,
the
computation
of
power
spectral
density
from
the
autocovariance
function
is
discussed
for
a
class
of
eeg
signals.
.b
cacm
may,
1965
.a
philpott,
c.
m.
lago,
g.
v.
.n
ca650516
jb
march
7,
1978
12:52
pm
.x
1255
5
1255
1255
5
1255
1255
5
1255
.i
1256
.t
dynamic
variable
formatting
.b
cacm
may,
1965
.a
king,
d.
r.
.n
ca650515
jb
march
7,
1978
12:53
pm
.x
1256
5
1256
1256
5
1256
1256
5
1256
.i
1257
.t
debug-an
extension
to
current
on-line
debugging
techniques
.w
a
method
of
on-linr
assembly-language
debugging
which
greatly
simplifies
several
of
the
bookkeeping
tasks
characteristically
associated
with
that
process
has
been
developed
and
implemented
in
a
program
for
the
univac
m-460
computer
at
air
force
cambridge
research
laboratories.
with
this
program,
an
online
user
may
insert
or
delete
(in
symbolic
assembly
language)
any
number
of
lines
at
any
point
of
his
previously
assembled
program
in
core,
with
the
remainder
of
the
program
being
relocated
appropriately.
.b
cacm
may,
1965
.a
evans,
t.
g.
darley,
d.
l.
.n
ca650514
jb
march
7,
1978
12:58
pm
.x
1257
5
1257
1257
5
1257
1257
5
1257
1738
5
1257
1257
6
1257
.i
1258
.t
an
extended
arithmetic
package
.w
in
many
fields,
for
example
algebraic
number
theory,
arithmetic
must
be
carried
out
to
a
degree
of
precision
which
exceeds
the
normal
hardware
capacity
of
most
machines.
in
such
cases,
an
extended
arithmetic
package
provides
a
comprehensive
and
easy-to-use
way
of
performing
such
arithmetic.
such
a
package
was
coded
for
the
ibm
7090.
in
discussing
the
general
problems
associated
with
the
design
of
an
extended
arithmetic
package,
specific
reference
is
made
to
this
program.
.b
cacm
may,
1965
.a
blum,
b.
i.
.n
ca650513
jb
march
7,
1978
1:01
pm
.x
1026
4
1258
1258
4
1258
1258
4
1258
1292
4
1258
1292
4
1258
1497
4
1258
1497
4
1258
1975
4
1258
2605
4
1258
107
5
1258
1026
5
1258
1258
5
1258
1258
5
1258
1258
5
1258
.i
1259
.t
applications
of
binary
numbers
in
computer
routines
.w
a
binary
number
can
be
thought
of
as
an
alternate
form
of
expression
for
either
a
set
of
letters
or
a
decimal
number.
there
are
then
three
equivalent
expressions,
easily
translatable
to
one
another,
each
having
different
characteristics.
four
examples
are
given
in
which
the
form
of
an
expression
is
changed
to
an
equivalent
expression
to
save
space
or
gain
power.
.b
cacm
may,
1965
.a
weldon,
r.
j.
baker,
r.
l.
.n
ca650512
jb
march
7,
1978
1:05
pm
.x
1259
5
1259
1259
5
1259
1259
5
1259
.i
1260
.t
least-squares
analysis
of
resonance
spectra
on
small
computers
.w
the
problem
of
analyzing
data
from
a
mossbauer
effect
experiment
is
discussed.
by
using
the
cut
step
procedure
for
convergence
and
by
imposing
physical
constraints
on
the
functional
form
of
the
calculation
it
is
possible
to
make
the
analysis
on
a
small
computer.
the
analysis
has
been
carried
out
on
an
ibm
1410
computer
with
a
40,000
bcd
core
memory.
.b
cacm
may,
1965
.a
marshall,
s.
w.
nelson,
j.
a.
wilenzick,
r.
m.
.n
ca650511
jb
march
7,
1978
1:10
pm
.x
1260
5
1260
1260
5
1260
1260
5
1260
.i
1261
.t
modeling
and
simulation
of
digital
networks
.w
the
simulation
of
digital
networks
on
a
digital
computer
provides
the
engineer
with
an
effective
means
of
analyzing
time-quantized
logical
behavior.
the
digital
network
is
modeled
as
a
set
of
time-dependent
or
time-independent
boolean
transformations;
each
transformation
describing
the
input-output
relationship
of
a
model
element
comprising
the
network
mode.
the
simplicity
of
utilizing
the
fortran
iv
programming
system
as
a
digital
network
simulator
is
discussed
an
illustrated.
this
simplicity
is
derived
from
a
common
modeling
technique
applicable
to
combinational
and
sequential
digital
networks
and
a
systematic
programming
approach.
.b
cacm
may,
1965
.a
larsen,
r.
p.
mano,
m.
m.
.n
ca650510
jb
march
7,
1978
1:15
pm
.x
1261
4
1261
1939
4
1261
1030
5
1261
1261
5
1261
1261
5
1261
1261
5
1261
.i
1262
.t
procedure-oriented
language
statements
to
facilitate
parallel
processing
.w
two
statements
are
suggested
which
allow
a
programmer
writing
in
a
procedure-oriented
language
to
indicate
sections
of
program
which
are
to
be
executed
in
parallel.
the
statements
are
do
together
and
hold.
these
serve
partly
as
brackets
in
establishing
a
range
of
parallel
operation
and
partly
to
define
each
parallel
path
within
this
range.
do
togethers
may
be
nested.
the
statements
should
be
particularly
effective
for
use
with
computing
devices
capable
of
attaining
some
degree
of
compute-compute
overlap.
.b
cacm
may,
1965
.a
opler,
a.
.n
ca650509
jb
march
7,
1978
2:17
pm
.x
1158
5
1262
1262
5
1262
1262
5
1262
1262
5
1262
1262
6
1262
.i
1263
.t
metalanguage
and
syntax
specification
.w
two
metalanguages
are
described,
one
sufficient
for
the
table
specification
of
the
algol
syntax,
the
other
with
additional
metaoperators
adequate
and
used
for
the
formal
table
description
of
basic
fortran.
.b
cacm
may,
1965
.a
burkhardt,
w.
h.
.n
ca650508
jb
march
7,
1978
2:19
pm
.x
1046
4
1263
1086
4
1263
1105
4
1263
1132
4
1263
1139
4
1263
1140
4
1263
1234
4
1263
1234
4
1263
1263
4
1263
1263
4
1263
1263
4
1263
1265
4
1263
1265
4
1263
1270
4
1263
1323
4
1263
1358
4
1263
1379
4
1263
1380
4
1263
1453
4
1263
1453
4
1263
1464
4
1263
1484
4
1263
1491
4
1263
1496
4
1263
1498
4
1263
1613
4
1263
1614
4
1263
1781
4
1263
1781
4
1263
1824
4
1263
1825
4
1263
1860
4
1263
1945
4
1263
2083
4
1263
2126
4
1263
2178
4
1263
2179
4
1263
2252
4
1263
2325
4
1263
2341
4
1263
2546
4
1263
2546
4
1263
464
4
1263
2645
4
1263
2652
4
1263
2684
4
1263
2842
4
1263
2929
4
1263
2934
4
1263
584
4
1263
3069
4
1263
631
4
1263
653
4
1263
669
4
1263
679
4
1263
680
4
1263
691
4
1263
761
4
1263
763
4
1263
795
4
1263
799
4
1263
945
4
1263
949
4
1263
989
4
1263
989
5
1263
1263
5
1263
1263
5
1263
1263
5
1263
1379
5
1263
404
5
1263
3184
5
1263
1263
6
1263
1477
6
1263
3184
6
1263
669
6
1263
761
6
1263
.i
1264
.t
blnsys-a
1401
operating
system
with
braille
capabilities
.w
blnsys
is
an
operating
system
designed
for
a
4k
1401
with
common
optional
features
and
two
attached
tape
drives.
printed
output
of
this
system
or
of
executing
programs
may
be
in
either
english
or
braille.
even
though
this
system
was
written
for
a
small
machine
with
minimal
peripheral
equipment,
jobs
may
be
batched,
so
that
card
handling
and
lost
processing
time
is
at
a
minimum.
this
system
will
perform
any
or
all
of
the
following
users
specified
functions:
assemble
sps
source
decks,
post
list,
produce
condensed
or
uncondensed
object
decks,
execute
user's
program,
list
card
input
to
a
program,
list
punched
output,
provide
a
storage
dump,
execute
a
program
submitted
for
execution
as
an
uncondensed
object
deck
under
debugging
trace
control,
card-to-braille
conversion,
brailled
listings
of
7040
ibsys
batch
output,
and
update
or
duplicate
the
system
tape
itself.
input-ouput
subroutines
are
also
included
in
the
system.
.b
cacm
may,
1965
.a
landwehr,
j.
b.
mclaughlin,
c.
mueller,
h.
lichstein,
m.
pollack,
s.
v.
.n
ca650507
jb
march
7,
1978
2:30
pm
.x
1264
4
1264
1740
4
1264
1099
5
1264
1264
5
1264
1264
5
1264
1264
5
1264
.i
1265
.t
on
the
relative
efficiencies
of
context-free
grammar
recognizers
.w
a
number
of
diverse
recognition
procedures
that
have
been
proposed
for
parsing
sentences
with
respect
to
a
context-free
grammar
are
described
in
this
paper
by
means
of
a
common
device.
each
procedure
is
defined
by
giving
an
algorithm
for
obtaining
a
nondeterministic
turing
machine
recognizer
that
is
equivalent
to
a
given
context-free
grammar.
the
formalization
of
the
turing
machine
has
been
chosen
to
make
possible
particularly
simple
description
of
the
parsing
procedures
considered.
an
attempt
has
been
made
to
compare
recognition
efficiencies
for
the
procedures
defined.
for
a
few
simple
grammars
and
sentences
a
formal
comparison
has
been
made.
empirical
comparison
of
the
recognition
of
more
realistic
programming
languages
such
as
lisp
and
algol
has
been
made
by
means
of
a
program
which
simulates
the
turing
machine
on
the
univac
m-460
computer.
several
algorithms
for
producing
grammars
equivalent
to
a
given
context-free
grammar
have
been
considered,
and
the
increase
in
recognition
efficiency
they
afford
has
been
empirically
investigated.
.b
cacm
may,
1965
.a
griffiths,
t.
v.
petrick,
s.
r.
.n
ca650506
jb
march
7,
1978
2:38
pm
.x
1046
4
1265
1062
4
1265
1086
4
1265
1105
4
1265
1121
4
1265
1132
4
1265
1139
4
1265
1139
4
1265
1139
4
1265
1140
4
1265
1151
4
1265
1234
4
1265
1234
4
1265
1263
4
1265
1263
4
1265
1265
4
1265
1265
4
1265
1265
4
1265
1265
4
1265
1265
4
1265
1270
4
1265
1323
4
1265
1358
4
1265
1379
4
1265
1380
4
1265
1453
4
1265
1464
4
1265
1484
4
1265
1491
4
1265
1496
4
1265
1498
4
1265
1613
4
1265
1614
4
1265
1665
4
1265
1781
4
1265
1781
4
1265
1781
4
1265
1824
4
1265
1825
4
1265
1860
4
1265
2083
4
1265
2126
4
1265
2178
4
1265
2179
4
1265
2252
4
1265
2325
4
1265
2341
4
1265
2546
4
1265
2546
4
1265
464
4
1265
2645
4
1265
2652
4
1265
2684
4
1265
2769
4
1265
2842
4
1265
2929
4
1265
2934
4
1265
584
4
1265
3069
4
1265
631
4
1265
653
4
1265
669
4
1265
679
4
1265
680
4
1265
691
4
1265
720
4
1265
759
4
1265
761
4
1265
763
4
1265
763
4
1265
795
4
1265
799
4
1265
945
4
1265
949
4
1265
989
4
1265
1265
5
1265
1265
5
1265
1265
5
1265
1350
5
1265
1399
5
1265
1659
5
1265
1768
5
1265
1781
5
1265
1945
5
1265
2110
5
1265
404
5
1265
464
5
1265
3094
5
1265
3184
5
1265
631
5
1265
635
5
1265
823
6
1265
123
6
1265
196
6
1265
914
6
1265
915
6
1265
917
6
1265
919
6
1265
984
6
1265
989
6
1265
990
6
1265
990
6
1265
1007
6
1265
1012
6
1265
1012
6
1265
1046
6
1265
1084
6
1265
1098
6
1265
1122
6
1265
1131
6
1265
1138
6
1265
1139
6
1265
1139
6
1265
1140
6
1265
1141
6
1265
1141
6
1265
1149
6
1265
1198
6
1265
1200
6
1265
1215
6
1265
1223
6
1265
1223
6
1265
1225
6
1265
1225
6
1265
1265
6
1265
1265
6
1265
1265
6
1265
1265
6
1265
1265
6
1265
1265
6
1265
1265
6
1265
1265
6
1265
1303
6
1265
1323
6
1265
1336
6
1265
1350
6
1265
1358
6
1265
1366
6
1265
1396
6
1265
1399
6
1265
1421
6
1265
1455
6
1265
1460
6
1265
1462
6
1265
1463
6
1265
1467
6
1265
1468
6
1265
1477
6
1265
1477
6
1265
1487
6
1265
1491
6
1265
1491
6
1265
1496
6
1265
1496
6
1265
1531
6
1265
1535
6
1265
1565
6
1265
1601
6
1265
1602
6
1265
1613
6
1265
1614
6
1265
1626
6
1265
1641
6
1265
1671
6
1265
1697
6
1265
1781
6
1265
1781
6
1265
1787
6
1265
1788
6
1265
205
6
1265
224
6
1265
249
6
1265
288
6
1265
316
6
1265
381
6
1265
398
6
1265
11
6
1265
2179
6
1265
2645
6
1265
404
6
1265
410
6
1265
463
6
1265
464
6
1265
483
6
1265
483
6
1265
3184
6
1265
3188
6
1265
584
6
1265
584
6
1265
600
6
1265
669
6
1265
680
6
1265
680
6
1265
680
6
1265
691
6
1265
763
6
1265
763
6
1265
799
6
1265
.i
1266
.t
considerations
relating
to
purpose
of
fortran
standardization
(appendixes
to
asa
fortran
standard)
.b
cacm
may,
1965
.n
ca650505
jb
march
7,
1978
2:40
pm
.x
1266
5
1266
1266
5
1266
1266
5
1266
.i
1267
.t
performance
of
systems
used
for
data
transmission
transfer
rate
of
information
bits
-an
asa
tutorial
standard
.w
information
thruput
as
a
characteristic
of
systems
performance
is
discussed.
this
discussion
includes
the
pertinent
aspects
of
information
transfer,
of
determination
of
transfer
rate
of
information
bits
(trib),
of
residual
errors,
and
of
standard
measurement
conditions.
the
paper
also
presents
an
orderly
arrangement
of
characteristics
and
parameters
that
affect
information
thruput,
and
some
examples
on
procedures
for
determining
a
thruput
rate
in
terms
of
trib.
it
concludes
that
a
performance
characteristic
involving
information
rate
can
best
be
expressed
as
the
trib
in
conjunction
with
the
residual
error
rate.
.b
cacm
may,
1965
.n
ca650504
jb
march
7,
1978
3:10
pm
.x
1267
5
1267
1267
5
1267
1267
5
1267
.i
1268
.t
logarithm
of
a
complex
number
(algorithm
243
[b3])
.b
cacm
may,
1965
.a
boothroyd,
j.
.n
ca650502
jb
march
7,
1978
3:11
pm
.x
1268
5
1268
1268
5
1268
1268
5
1268
1858
5
1268
1268
6
1268
1857
6
1268
.i
1269
.t
computation
of
fourier
coefficients
(algorithm
[c6])
.b
cacm
may,
1965
.a
teijelo,
l.
.n
ca650502
jb
march
7,
1978
3:12
pm
.x
1269
5
1269
1269
5
1269
1269
5
1269
.i
1270
.t
on
algol
education:
automatic
grading
programs
.w
two
algol
grader
programs
are
presented
for
the
computer
evaluation
of
student
algol
programs.
one
is
for
a
beginner's
program;
it
furnishes
random
data
and
checks
answers.
the
other
provides
a
searching
test
of
the
reliability
and
efficiency
of
an
integration
procedure.
there
is
a
statement
of
the
essential
properties
of
a
computer
system,
in
order
that
grader
programs
can
be
effectively
used.
.b
cacm
may,
1965
.a
forsythe,
g.
e.
wirth,
n.
.n
ca650501
jb
march
7,
1978
3:16
pm
.x
1086
4
1270
1132
4
1270
1234
4
1270
1263
4
1270
1265
4
1270
1270
4
1270
1270
4
1270
1323
4
1270
1358
4
1270
1379
4
1270
1380
4
1270
1453
4
1270
1464
4
1270
1484
4
1270
1491
4
1270
1498
4
1270
1613
4
1270
1614
4
1270
1781
4
1270
1825
4
1270
1860
4
1270
1902
4
1270
2083
4
1270
2178
4
1270
2179
4
1270
2252
4
1270
2325
4
1270
2341
4
1270
2546
4
1270
2645
4
1270
2652
4
1270
2684
4
1270
2842
4
1270
2929
4
1270
2934
4
1270
3069
4
1270
669
4
1270
679
4
1270
691
4
1270
761
4
1270
949
4
1270
989
4
1270
145
5
1270
1270
5
1270
1270
5
1270
1270
5
1270
1413
5
1270
1902
5
1270
3184
5
1270
145
6
1270
1205
6
1270
1270
6
1270
1270
6
1270
.i
1271
.t
secondary
key
retrieval
using
an
ibm
7090-1301
system
.w
the
secondary
key
retrieval
method
involves
the
preparation
of
secondary
storage
lists
from
primary
data
records.
search
requests
are
satisfied
by
logical
operations
on
appropriate
lists,
producing
a
complete
set
of
addresses
of
primary
records
relevant
to
the
request.
experimental
results
are
presented
and
a
comparative
analysis
is
given.
.b
cacm
april,
1965
.a
davis,
d.
r.
lin,
a.
d.
.n
ca650420
jb
march
7,
1978
3:18
pm
.x
1271
4
1271
1785
4
1271
2543
4
1271
2552
4
1271
911
4
1271
1271
5
1271
1271
5
1271
1271
5
1271
1976
5
1271
332
5
1271
1271
6
1271
.i
1272
.t
expanding
the
editing
function
in
language
data
processing
.w
in
automatic
abstracting,
citation
indexing,
mechanical
translation
and
other
such
procedures,
editing
is
required
whenever
the
automatic
method
leaves
something
to
be
desired.
this
paper
discusses
the
economy
of
editing
as
a
function
of
the
amount
of
condensation
of
text
in
language
processing
operations,
and
then
contends
that
editing
can
be
regarded
as
an
opportunity
rather
than
as
an
unwelcome
necessity.
"heavy
editing,"
which
goes
beyond
mere
correction
and
improvement
of
computer
output,
is
exemplified
by
the
use
of
a
concordance
in
preparing
a
survey
article
or
lecture.
other
opportunities
for
heavy
editing
are
described,
chief
among
them
being
interpretation
and
expansion
of
computer
output
in
such
processes
as
factor
analysis.
applications
are
described,
such
processes
as
factor
analysis.
applications
are
described,
such
as
the
quick,
unbiased
evaluation
of
a
large
volume
of
incoming
mail
or
telegrams,
yielding
summary
reports
not
possible
for
either
humans
or
computers
to
produce
alone.
.b
cacm
april,
1965
.a
doule,
l.
b.
.n
ca650419
jb
march
7,
1978
3:26
pm
.x
1272
5
1272
1272
5
1272
1272
5
1272
.i
1273
.t
remark
on
romberg
quadrature
.w
a
modified
form
of
romberg
quadrature
is
described,
which
is
less
sensitive
to
the
accumulation
of
rounding
errors
than
the
customary
one.
.b
cacm
april,
1965
.a
krasun,
a.
m.
prager,
w.
.n
ca650418
jb
march
7,
1978
3:27
pm
.x
1273
5
1273
1273
5
1273
1273
5
1273
1352
5
1273
1982
5
1273
2040
5
1273
1
6
1273
834
6
1273
872
6
1273
1040
6
1273
1092
6
1273
1241
6
1273
1241
6
1273
1273
6
1273
1273
6
1273
1273
6
1273
1352
6
1273
1356
6
1273
1883
6
1273
324
6
1273
324
6
1273
324
6
1273
429
6
1273
570
6
1273
621
6
1273
621
6
1273
786
6
1273
.i
1274
.t
on
the
numerical
solution
of
an
n-point
boundary
value
problem
for
linear
ordinary
differential
equations
.w
a
method
for
the
numerical
solution
of
then-point
boundary
value
problem
for
homogeneous
linear
ordinary
differential
equations
is
developed.
the
method
requires
two
runge-kutta
integrations
over
the
interval
under
consideration
and
the
solution
of
a
linear
system
of
equations
with
n-1
unknowns.
.b
cacm
april,
1965
.a
day,
j.
t.
.n
ca650417
jb
march
7,
1978
3:30
pm
.x
1274
4
1274
1147
5
1274
1274
5
1274
1274
5
1274
1274
5
1274
.i
1275
.t
code
structures
for
protection
and
manipulation
of
variable
length
items
(corrigendum)
.b
cacm
april,
1965
.a
ramamoorthy,
c.
v.
.n
ca650416
jb
march
7,
1978
3:31
pm
.x
1275
5
1275
1275
5
1275
1275
5
1275
.i
1276
.t
still
another
use
for
fortran
ii
chaining
.b
cacm
april,
1965
.n
ca650415
jb
march
7,
1978
3:32
pm
.x
1276
5
1276
1276
5
1276
1276
5
1276
.i
1277
.t
the
use
of
cobol
subroutines
in
fortran
main
programs
.b
cacm
april,
1965
.a
tajiri,
k.
.n
ca650414
jb
march
7,
1978
3:34
pm
.x
1277
5
1277
1277
5
1277
1277
5
1277
.i
1278
.t
wengert's
numerical
method
for
partial
derivatives,
orbit
determination
and
quasilinearization
.w
in
a
recent
article
in
the
communications
of
the
acm,
r.
wengert
suggested
a
technique
for
machine
evaluation
of
the
partial
derivatives
of
a
function
given
in
analytical
form.
in
solving
non-linear
boundary-value
problems
using
quasilinearization
many
partial
derivatives
must
be
formed
analytically
and
then
evaluated
numerically.
wengert's
method
appears
very
attractive
from
the
programming
viewpoint
equations
which
might
not
otherwise
be
undertaken.
.b
cacm
april,
1965
.a
bellman,
r.
e.
kagiwada,
h.
kalaba,
r.
e.
.n
ca650413
jb
march
7,
1978
3:39
pm
.x
1028
4
1278
1216
4
1278
1216
4
1278
1278
4
1278
1278
4
1278
1278
4
1278
1347
4
1278
1347
4
1278
1396
4
1278
1396
4
1278
1536
4
1278
973
5
1278
1028
5
1278
1029
5
1278
1278
5
1278
1278
5
1278
1278
5
1278
1347
5
1278
1396
5
1278
964
6
1278
1028
6
1278
1028
6
1278
1029
6
1278
1029
6
1278
1083
6
1278
1132
6
1278
1214
6
1278
1278
6
1278
1278
6
1278
1334
6
1278
1365
6
1278
1386
6
1278
1387
6
1278
1388
6
1278
1392
6
1278
1393
6
1278
1394
6
1278
1395
6
1278
1396
6
1278
1397
6
1278
1496
6
1278
284
6
1278
407
6
1278
3199
6
1278
3200
6
1278
3201
6
1278
3202
6
1278
3203
6
1278
3204
6
1278
561
6
1278
730
6
1278
.i
1279
.t
use
of
a
conditional
base
number
system
for
encoding
sequences
of
correlated
characters
.w
a
procedure
is
described
for
the
relatively
efficient
encoding
of
sequences
of
characters
which
have
predecessor-successor
selection
rules.
the
procedure
is
shown
to
assign
a
unique
integer
to
each
sequence
and
to
generate
a
reasonably
compact
set
of
values.
.b
cacm
april,
1965
.a
brown,
r.
m.
.n
ca650412
jb
march
7,
1978
3:42
pm
.x
1279
5
1279
1279
5
1279
1279
5
1279
.i
1280
.t
numerical
integration
of
a
differential-difference
equation
with
a
decreasing
time-lag
.w
systems
in
which
variable
time-lags
are
present
are
of
common
occurrence
in
biology.
variable
flow
rates
are
a
common
cause
of
these
variable
lags.
at
present
no
extensive
body
of
knowledge
exists
concerning
the
effects
which
these
variable
lags
can
cause.
shown
here
is
a
method
of
reducing
some
differential-difference
equations
to
ordinary
differential
equations
which
can
then
be
studied
numerically
with
ease.
subsequent
study
will
deal
with
situations
in
which
multiple-lags
and
lags
dependent
on
the
solution
itself
are
present.
.b
cacm
april,
1965
.a
bellman,
r.
e.
buell,
j.
d.
kalaba,
r.
e.
.n
ca650411
jb
march
7,
1978
3:46
pm
.x
1280
5
1280
1280
5
1280
1280
5
1280
1364
5
1280
1280
6
1280
.i
1281
.t
data
input
by
question
and
answer
.w
a
data
input
scheme
for
a
time-sharing
computer
is
described
in
this
paper.
instead
of
using
format
statements
to
determine
the
input,
the
computer
asks
the
user
for
the
required
values
one
at
a
time.
the
computer
converses
with
the
user
during
the
input
process,
checks
for
errors,
provides
standard
data,
and
allows
editing
of
values
input.
.b
cacm
april,
1965
.a
pyle,
i.
c.
.n
ca650410
jb
march
7,
1978
3:48
pm
.x
1281
5
1281
1281
5
1281
1281
5
1281
.i
1282
.t
the
use
of
fortran
in
subroutines
with
cobol
main
programs
.w
by
using
the
proper
cobol
coding
techniques
and
accounting
for
differences
in
storage
allocation
and
library
routines
between
the
two
languages,
it
is
possible
to
write
fortran
iv
subroutines
that
may
be
called
from
cobol
main
programs.
such
a
technique
enables
the
programmer
to
take
advantage
of
the
most
useful
properties
of
each
language
while
minimizing
their
respective
disadvantages.
.b
cacm
april,
1965
.a
shavell,
z.
a.
.n
ca650409
jb
march
7,
1978
3:52
pm
.x
1282
5
1282
1282
5
1282
1282
5
1282
.i
1283
.t
matrix
inversion
(algorithm
231
[f1])
.b
cacm
april,
1965
.a
ferring,
m.
.n
ca650408
jb
march
7,
1978
3:53
pm
.x
1283
5
1283
1283
5
1283
1283
5
1283
.i
1284
.t
bessel
function
for
a
set
of
integer
orders
.b
cacm
april,1965
.a
stafford,
j.
.n
ca650407
jb
march
7,
1978
3:54
pm
.x
1284
5
1284
1284
5
1284
1284
5
1284
1909
5
1284
134
6
1284
1023
6
1284
1284
6
1284
1316
6
1284
.i
1285
.t
eigenvalues
and
eigenvectors
of
a
real
symmetric
matrix
by
the
qr
method
(algorithm
254
[f2])
.b
cacm
april,
1965
.a
businger,
p.
a.
.n
ca650406
jb
march
7,
1978
3:55
pm
.x
1285
5
1285
1285
5
1285
1285
5
1285
.i
1286
.t
eigenvalues
of
a
real
symmetric
matrix
by
the
qr
method
(algorithm
253
[f2])
.b
cacm
april,
1965
.a
businger,
p.
a.
.n
ca650405
jb
march
7,
1978
3:56
pm
.x
1286
5
1286
1286
5
1286
1286
5
1286
.i
1287
.t
vector
coupling
or
clebsch-gordan
coefficients
(algorithm
252
[z])
.b
cacm
april,
1965
.a
gunn,
j.
h.
.n
ca650404
jb
march
7,
1978
3:58
pm
.x
1287
5
1287
1287
5
1287
1287
5
1287
.i
1288
.t
clp-the
cornell
list
processor
.w
presented
in
this
paper
are
the
highlights
of
clp,
a
teaching
language
which
has
been
employed
at
cornell
university
and
was
constructed
to
serve
as
a
means
of
introducing
simulation
and
other
list-processing
concepts.
the
various
advantages
of
clp
are
discussed
and
examples
are
given.
.b
cacm
april,
1965
.a
conway,
r.
w.
delfausse,
j.
j.
maxwell,
w.
l.
walker,
w.
e.
.n
ca650403
jb
march
7,
1978
4:02
pm
.x
1179
4
1288
1288
4
1288
1544
4
1288
1646
4
1288
2111
4
1288
2534
4
1288
2556
4
1288
2650
4
1288
1288
5
1288
1288
5
1288
1288
5
1288
830
5
1288
.i
1289
.t
proposed
revised
american
standard
code
for
information
interchange
.b
cacm
april,
1965
.n
ca650402
jb
march
7,
1978
4:03
pm
.x
1289
5
1289
1289
5
1289
1289
5
1289
.i
1290
.t
transparent-mode
control
procedures
for
data
communication,
using
the
american
standard
code
for
information
interchange
-a
tutorial
.w
this
paper
gives
the
considerations
of
task
group
x3.3.4
in
the
area
of
transparent-mode
data
communication
control
philosophy.
the
appearance
of
this
paper
was
forecast
(underthe
name
of
"second-level
control")
in
the
earlier
tutorial
paper,
"control
procedures
for
data
communications,"
task
group
document
x3.3.4.44,
dated
may
1964.
the
present
paper
elaborates
upon
solutions
to
the
problems
of
transparency
to
the
basic
ascii
communication
control
characters
as
outlined
in
the
previous
paper
mentioned
above.
moreover,
it
goes
on
to
cover
the
additional
control
problems
of
handling
material
such
as
off
line
encrypted
data
or
non-ascii
codes
by
means
of
systems
providing
complete
character
transparency.
it
does
not
cover
concepts
of
transparency
in
which
the
normal
character
structure
or
modulation
rate
of
a
system
may
be
abandoned.
in
conjunction
with
the
earlier
tutorial
paper,
this
paper
is
expected
to
lead
to
a
proposal
for
stand
ardizationof
data
communication
control
procedures
using
the
american
stand
ard
code
for
information
interchange.
.b
cacm
april,
1965
.n
ca650401
jb
march
7,
1978
4:10
pm
.x
1290
5
1290
1290
5
1290
1290
5
1290
.i
1291
.t
tabular
input
of
data
.b
cacm
march,
1965
.a
george,
r.
.n
ca650316
jb
march
7,
1978
4:11
pm
.x
1291
5
1291
1291
5
1291
1291
5
1291
.i
1292
.t
on
a
divide-and-correct
method
for
variable
precision
division
.w
described
in
this
paper
is
a
divide-and-correct
method
for
variable
precision
division
in
digital
computers.
unlike
the
earlier
methods
of
stein
and
pope,
the
present
method
uses
a
suitably
rounded
form
of
the
normalized
divisor
for
getting
an
estimate
of
the
quotient
characters.
this
results
in
a
correction
of
at
most
plus
or
minus
one
to
the
estimate,
to
obtain
the
exact
quotient
character.
it
is
believed
that
this
method
will
be
widely
applicable
for
division
operations
in
variable
word-length
character-oriented
machines.
.b
cacm
march,
1965
.a
krishnamurthy,
e.
v.
.n
ca650315jb
march
7,
1978
4:16
pm
.x
1026
4
1292
1258
4
1292
1258
4
1292
1292
4
1292
1292
4
1292
1497
4
1292
1497
4
1292
1975
4
1292
2605
4
1292
107
5
1292
1026
5
1292
1292
5
1292
1292
5
1292
1292
5
1292
1497
5
1292
1593
5
1292
1975
5
1292
107
6
1292
1026
6
1292
1026
6
1292
1292
6
1292
1292
6
1292
1292
6
1292
1497
6
1292
1593
6
1292
91
6
1292
.i
1293
.t
method
is
randomness
.w
certain
nonrandom
properties
of
a
commonly
used
random
number
generator
are
described
and
analyzed.
.b
cacm
march,
1965
.a
greenberger,
m.
.n
ca650314
jb
march
7,
1978
4:18
pm
.x
1293
5
1293
1293
5
1293
1293
5
1293
1674
5
1293
1691
5
1293
1293
6
1293
1293
6
1293
1420
6
1293
1631
6
1293
.i
1294
.t
note
on
triple-precision
floating-point
arithmetic
with
132-bit
numbers
.w
in
a
recent
paper,
gregory
and
raney
described
a
technique
for
double-precision
floating-point
arithmetic.
a
similar
technique
can
be
developed
for
triple-precision
floating-point
arithmetic
and
it
is
the
purpose
of
this
note
to
describe
this
technique.
only
the
multiplication
and
the
division
algorithms
are
described,
since
the
addition-subtraction
algorithm
can
be
obtained
by
a
trivial
modification
of
the
algorithm
in
gregory's
and
raney's
paper.
.b
cacm
march,
1965
.a
ikebe,
y.
.n
ca650313
jb
march
7,
1978
5:54
pm
.x
1294
4
1294
1152
5
1294
1294
5
1294
1294
5
1294
1294
5
1294
.i
1295
.t
pert
time
calculations
without
topological
ordering
.w
a
simplified
technique
is
presented
for
pert
time
calculations
without
topological
ordering.
each
event
is
assigned
a
unique
memory
location.
an
activity
is
represented
by
a
link.
a
link
is
defined
as
a
memory
location
containing
the
address
of
another
memory
location.
the
time
information
for
an
activity
is
carried
with
its
link.
for
a
typical
net,
the
majority
of
activities
can
be
described
by
one
36-bit
cell
each.
the
remainder
use
two
36-bit
cells
each.
the
links
are
unidirectional;
forward
during
the
t(e)
calculation
(expected
completion
time
for
an
activity);backward
during
the
t(l)
calculation
(time
latest
allowable
for
completion
of
an
activity).
the
calculations
progress
through
the
net
topologically
even
though
the
net
is
not
represented
topologically
in
core.
.b
cacm
march,
1965
.a
lass,
s.
e.
.n
ca650312
jb
march
7,
1978
6:00
pm
.x
1295
5
1295
1295
5
1295
1295
5
1295
1611
5
1295
1295
6
1295
340
6
1295
.i
1296
.t
ative
(algorithm
205
[e4])
.b
cacm
march,
1965
.a
wasscher,
e.
j.
.n
ca650311
jb
march
7,
1978
6:01
pm
.x
1296
5
1296
1296
5
1296
1296
5
1296
.i
1297
.t
steep1
(algorithm
203
[e4])
.b
cacm
march,
1965
.a
varah,
j.
m.
.n
ca650310
jb
march
7,
1978
6:02
pm
.x
1297
5
1297
1297
5
1297
1297
5
1297
.i
1298
.t
adaptive
numerical
integration
by
simpson's
rule
(algorithm
145
[d1])
.b
cacm
march,
1965
.a
pike,
m.
c.
.n
ca650309
jb
march
7,
1978
6:03
pm
.x
1298
5
1298
1298
5
1298
1298
5
1298
2093
5
1298
834
6
1298
872
6
1298
1092
6
1298
1298
6
1298
1573
6
1298
429
6
1298
.i
1299
.t
solutions
of
the
diophantine
equation
(algorithm
139
[a1])
.b
cacm
march,
1965
.a
bowlden,
h.
j.
.n
ca650308
jb
march
7,
1978
6:04
pm
.x
1299
5
1299
1299
5
1299
1299
5
1299
.i
1300
.t
function
minimization
(algorithm
251[e4])
.b
cacm
march,
1965
.a
wells,
m.
.n
ca650307
jb
march
7,
1978
6:05
pm
.x
1300
5
1300
1300
5
1300
1300
5
1300
.i
1301
.t
on
algol
i/o
conventions
.b
cacm
march,
1965
.a
zaremba,
w.
a.
.n
ca650306
jb
march
7,
1978
6:06
pm
.x
1301
5
1301
1301
5
1301
1301
5
1301
.i
1302
.t
parallel
signaling
speeds
for
data
transmission
(proposed
american
stand
ard)
.b
cacm
march,
1965
.n
ca650305
jb
march
7,
1978
6:08
pm
.x
1302
5
1302
1302
5
1302
1302
5
1302
.i
1303
.t
a
correspondence
between
algol
60
and
church's
lambda-notation:
part
ii*
.b
cacm
march,
1965
.a
landin,
p.
j.
.n
ca650304
jb
march
7,
1978
6:09
pm
.x
1303
5
1303
1303
5
1303
1303
5
1303
1469
5
1303
1486
5
1303
1491
5
1303
1781
5
1303
2178
5
1303
2326
5
1303
2470
5
1303
2684
5
1303
3044
5
1303
123
6
1303
196
6
1303
196
6
1303
919
6
1303
990
6
1303
1007
6
1303
1046
6
1303
1131
6
1303
1139
6
1303
1140
6
1303
1140
6
1303
1149
6
1303
1198
6
1303
1215
6
1303
1223
6
1303
1265
6
1303
1303
6
1303
1303
6
1303
1303
6
1303
1303
6
1303
1303
6
1303
1303
6
1303
1303
6
1303
1303
6
1303
1303
6
1303
1323
6
1303
1323
6
1303
1323
6
1303
1323
6
1303
1358
6
1303
1366
6
1303
1421
6
1303
1460
6
1303
1462
6
1303
1463
6
1303
1467
6
1303
1468
6
1303
1469
6
1303
1477
6
1303
1491
6
1303
1496
6
1303
1531
6
1303
1535
6
1303
1565
6
1303
1601
6
1303
1602
6
1303
1613
6
1303
1614
6
1303
1626
6
1303
1641
6
1303
1787
6
1303
1788
6
1303
205
6
1303
210
6
1303
1834
6
1303
1834
6
1303
224
6
1303
249
6
1303
288
6
1303
316
6
1303
381
6
1303
398
6
1303
2059
6
1303
11
6
1303
2127
6
1303
2192
6
1303
2264
6
1303
404
6
1303
410
6
1303
463
6
1303
464
6
1303
483
6
1303
3184
6
1303
3184
6
1303
3184
6
1303
3184
6
1303
3186
6
1303
3188
6
1303
584
6
1303
600
6
1303
680
6
1303
691
6
1303
729
6
1303
763
6
1303
799
6
1303
.i
1304
.t
a
rapid
turnaround
multi-programming
system
.w
in
this
paper,
basic
features,
system
characteristics
and
the
control
algorithm
for
a
multi-programming
system
with
rapid
turnaround
time
are
described.
.b
cacm
march,
1965
.a
irons,
e.
t.
.n
ca650303
jb
march
7,
1978
6:19
pm
.x
1304
5
1304
1304
5
1304
1304
5
1304
1550
5
1304
1304
6
1304
1472
6
1304
.i
1305
.t
the
internal
structure
of
the
fortran
cep
translator
.w
the
fortran
cep
translator
converts
a
source
program
written
in
the
fortran
cep
language
into
an
object
program
written
in
the
language
of
the
cep
computer.
in
this
paper,
after
an
outline
of
the
cep
computer,
the
internal
structure
of
the
translator
is
described.
emphasis
is
on
the
compilation
of
expressions,
of
input/output
lists,
and
of
subscripted
variables.
.b
cacm
march,
1965
.a
mancino,
o.
g.
cecchi,
m.
m.
.n
ca650302
jb
march
7,
1978
6:23
pm
.x
1305
4
1305
1035
5
1305
1305
5
1305
1305
5
1305
1305
5
1305
.i
1306
.t
a
class
of
unambiguous
computer
languages
.w
discussed
in
this
paper
is
the
concept
of
a
fully
nested
computer
language
which
may
be
one
means
of
designing
computer
languages
which
would
be
completely
free
of
ambiguities.
several
suggestions
are
also
given
here
for
the
redefinition
of
algol
as
a
fully
nested
language.
.b
cacm
march,
1965
.a
johnston,
j.
b.
.n
ca650301
jb
march
7,
1978
6:26
pm
.x
249
4
1306
254
4
1306
272
4
1306
1102
4
1306
1109
4
1306
1140
4
1306
1188
4
1306
1306
4
1306
1306
4
1306
1464
4
1306
1491
4
1306
1767
4
1306
1781
4
1306
1781
4
1306
1787
4
1306
1949
4
1306
321
4
1306
2059
4
1306
2126
4
1306
435
4
1306
437
4
1306
463
4
1306
483
4
1306
491
4
1306
2732
4
1306
560
4
1306
583
4
1306
3073
4
1306
627
4
1306
631
4
1306
632
4
1306
642
4
1306
644
4
1306
653
4
1306
680
4
1306
761
4
1306
762
4
1306
763
4
1306
123
4
1306
140
4
1306
919
4
1306
989
4
1306
196
5
1306
1306
5
1306
1306
5
1306
1306
5
1306
463
5
1306
.i
1307
.t
a
lightpen-controlled
program
for
on-line
data
analysis
.w
this
paper
describes
a
technique
designed
to
ease
the
use
of
a
data
processing
system
by
a
person,
in
particular,
a
scientist,
who
is
intimately
and
primarily
concerned
with
interpreting
the
significance
of
data
handled
by
the
system.
since
such
a
person
is
often
unable
to
spend
the
time
necessary
to
master
a
programming
language,
it
is
essential
that
he
be
aided
in
composing
commands
to
the
computer.
in
the
system
described,
the
user
is
not
required
to
learn
or
remember
the
vocabulary
of
the
language
because
the
vocabulary
is
displayed
before
him
on"menus"
by
means
of
a
computer-drive
scope.
he
selects
the
various
vocabulary
elements
required
by
pointing
with
the
light
pen.
by
use
of
a
small
unordered
set
of
rewriting
rules
applied
as
a
result
of
light
pen
selections,
the
user
generates
only
syntactically
correct
commands
to
the
system.
he
does
not
have
to
learn
or
remember
the
grammar.
the
program
restricts
the
user
severely
in
the
particular
language
he
can
use,
but
the
method
for
communicating
with
the
program
makes
these
restrictions
seem
quite
natural
and
unconstraining.
the
program
has
been
used
successfully
for
over
ten
months.
.b
cacm
february,
1965
.a
goodenough,
j.
b.
.n
ca650217
jb
march
7,
1978
10:40
pm
.x
1307
5
1307
1307
5
1307
1307
5
1307
1978
5
1307
1307
6
1307
1589
6
1307
1813
6
1307
.i
1308
.t
a
mathematical
model
for
mechanical
part
description
.w
the
flexibility
of
a
mathematical
model
takes
advantage
of
the
common
information
requirements
of
computer-aided
engineering
drawing,
numerical
control
tape
generation,
and
physical
characteristic
computation.
by
judicious
control
of
man-machine
communication
requirements,
improved
results
over
conventional
engineering
design
processes
are
possible.
an
english-like
input
language,
tailored
for
use
by
draftsmen
and
designers,
will
describe
the
part
and
specify
the
output
desired.
one
approach
to
the
mathematical
model
consists
of
a
group
of
surface-defining
quadric
equations,
which
are
created
by
a
system
of
modular
subprogram.
other
subprograms
will
convert
the
mathematical
model
into
instructions
for
driving
automatic
drafting
machines
and
numerical
controlled
machine
tools.
physical
part
characteristics,
such
as
center
of
gravity,
can
be
computed
by
subprograms
and
used
in
dynamic
analysis
work.
the
proposed
overall
system
is
presented
and
experiments
and
demonstrations
are
discussed.
.b
cacm
february,
1965
.a
luh,
j.
y.
s.
krolak,
r.
j.
.n
ca650216
jb
march
7,
1978
10:46
pm
.x
1308
5
1308
1308
5
1308
1308
5
1308
.i
1309
.t
a
computer
user-oriented
system
.w
a
computer
language
system
has
been
developed
which
makes
possible
fast
preparation
of
management
reports,
regardless
of
computational
complexity
or
format
variety.
costs
are
sufficiently
low
so
that
individually
tailored
reports
can
be
prepared
for
every
manager.
the
system
requires
initial
preparation
of
large
data
banks
containing
data
in
elementary
form.
use
of
two
special
languages,
extract
and
matran,
permits
selective
extraction
of
any
data
subset,
efficient
processing
through
any
computational
sequence,
and
flexible
presentation
of
results
in
either
tabular
or
graphical
form.
matrix
algebra
is
used
as
a
fundamental
vehicle
for
accomplishing
both
manipulation
and
computation.
.b
cacm
february,
1965
.a
montillon,
g.
d.
.n
ca650215
jb
march
7,
1978
10:51
pm
.x
1309
4
1309
892
4
1309
1309
5
1309
1309
5
1309
1309
5
1309
656
5
1309
.i
1310
.t
a
rapid
braille
transliteration
technique
for
certain
ibm
machines
.b
cacm
february,
1965
.a
weiler,
w.
j.
klema,
v.
c.
.n
ca650214
jb
march
7,
1978
10:55
pm
.x
1310
5
1310
1310
5
1310
1310
5
1310
.i
1311
.t
efficient
autocorrelation
.b
cacm
february,
1965
.a
schmid,
l.
p.
.n
ca650213
jb
march
7,
1978
10:56
pm
.x
1311
5
1311
1311
5
1311
1311
5
1311
.i
1312
.t
recursion
and
iteration
.b
cacm
february,
1965
.a
rice,
h.
g.
.n
ca650212
jb
march
7,
1978
10:57
pm
.x
1312
5
1312
1312
5
1312
1312
5
1312
3121
5
1312
1312
6
1312
308
6
1312
309
6
1312
2456
6
1312
2709
6
1312
.i
1313
.t
construction
of
nonlinear
programming
test
problems
.b
cacm
february,
1965
.a
rosen,
j.
b.
suzuki,
s.
.n
ca650211
jb
march
7,
1978
10:58
pm
.x
1313
5
1313
1313
5
1313
1313
5
1313
3099
5
1313
3138
5
1313
1313
6
1313
1313
6
1313
2031
6
1313
.i
1314
.t
the
organization
of
symbol
tables
.w
an
efficient
symbol
table
organization
is
an
important
feature
in
the
design
of
any
compiler.
during
the
construction
of
the
virginia
algol
60
compiler
for
the
burroughs
b205,
the
primary
consideration
in
the
symbol
table
design
was
that
the
recognition
of
identifiers
and
reserved
words
should
be
as
rapid
as
possible.
the
general
features
of
the
technique
are
described.
.b
cacm
february,
1965
.a
batson,
a.
.n
ca650210
jb
march
7,
1978
11:01
pm
.x
1314
5
1314
1314
5
1314
1314
5
1314
2033
5
1314
1314
6
1314
1785
6
1314
1786
6
1314
.i
1315
.t
automation
of
the
radioisotope
accountability
system
.w
the
radioisotope
service
of
the
veterans
administration
hospital,
omaha,
nebraska,
used
a
manual
system
of
radioisotope
accountability
for
three
years.
the
procedure
which
was
satisfactory
but
time-consuming
was
converted
from
manual
to
a
fully
automated
computer
system
in
january,
1963.
the
program
for
purchased
radioisotopes
is
written
in
format
fortran
for
the
ibm
1620
computer.
a
second
program
for
maintaining
accountability
for
reactor-created
radioisotopes
is
written
in
the
forcom
programming
language.
a
minimum
amount
of
bookkeeping
is
required
by
the
reactor
operating
staff.
the
united
states
atomic
energy
commission
regulations
specify
that
records
be
kept.
this
system
provides
detailed
records
for
each
container
of
radioactive
material
purchased
and/or
created
in
the
triga
reactor
indicating
the
amounts
received,
used,
and/or
transferred
to
the
health
physicist
for
disposal.
consolidated
records
contain
total
amounts
received,
used,
and/or
disposed
of
for
any
specified
period
of
time.
purchased
radioisotopes
are
reported
in
millicuries;
reactor-created
radioisotopes
in
microcuries.
.b
cacm
february,
1965
.a
lahners,
e.
l.
.n
ca650209
jb
march
7,
1978
11:10
pm
.x
1315
5
1315
1315
5
1315
1315
5
1315
.i
1316
.t
bessel
functions
of
the
first
kind
(algorithm
236
[s17])
.b
cacm
february,
1965
.a
gautschi,
w.
.n
ca650208
jb
march
7,1978
11:11
pm
.x
1316
5
1316
1316
5
1316
1316
5
1316
1909
5
1316
134
6
1316
1023
6
1316
1284
6
1316
1316
6
1316
.i
1317
.t
poisson-charlier
polynomials
(algorithm
234
[s23])
.b
cacm
february,
1965
.a
samet,
p.a.
.n
ca650207
jb
march
7,
1978
11:12
pm
.x
1317
5
1317
1317
5
1317
1317
5
1317
.i
1318
.t
arccossin
(algorithm
206
[b1])
.b
cacm
february,
1965
.a
bowlden,
h.
j.
.n
ca650206
jb
march
7,
1978
11:14
pm
.x
1318
5
1318
1318
5
1318
1318
5
1318
.i
1319
.t
crout
with
equilibration
and
iteration
(algorithm
135
[f4])
.b
cacm
february,
1965
.a
meissner,
l.
p.
.n
ca650205
jb
march
7,
1978
11:15
pm
.x
1319
4
1319
1319
4
1319
454
4
1319
140
4
1319
152
5
1319
1128
5
1319
1319
5
1319
1319
5
1319
1319
5
1319
.i
1320
.t
inverse
permutation
(algorithm
250
[g6])
.b
cacm
february,
1965
.a
boonstra,
b.
h.
.n
ca650204
jb
march
7,
1978
11:16
pm
.x
1320
5
1320
1320
5
1320
1320
5
1320
.i
1321
.t
outreal
n
(algorithm
[i5])
.b
cacm
february,
1965
.a
wirth,
n.
e.
.n
ca650203
jb
march
7,
1978
11:17
pm
.x
1321
5
1321
1321
5
1321
1321
5
1321
1705
5
1321
984
6
1321
986
6
1321
1020
6
1321
1321
6
1321
.i
1322
.t
netflow
(algorithm
248
[h])
.b
cacm
february,
1965
.a
briggs,
w.
a.
.n
ca650202
jb
march
7,
1978
11:18
pm
.x
1322
5
1322
1322
5
1322
1322
5
1322
1690
5
1322
1322
6
1322
.i
1323
.t
a
correspondence
between
algol
60
and
church's
lambda-notation:
part
i*
.w
this
paper
describes
how
some
of
the
semantics
of
algol
60
can
be
formalized
by
establishing
a
correspondence
between
expressions
of
algol
60
and
expressions
in
a
modified
form
of
church's
l-notation.
first
a
model
for
computer
languages
and
compute
behavior
is
described,
based
on
the
notions
of
functional
application
and
functional
abstraction,
but
also
having
analogues
for
imperative
language
features.
then
this
model
is
used
as
an
"abstract
object
language"
into
which
algol
60
is
mapped.
many
of
algol
60's
features
emerge
as
particular
arrangements
of
a
small
number
of
structural
rules,
suggesting
new
classifications
and
generalizations.
the
correspondence
is
first
described
informally,
mainly
by
illustrations.
the
second
part
of
the
paper
gives
a
formal
description,
i.e.
an
"abstract
compiler"
into
the
"abstract
objct
language."
this
is
itself
presented
in
a
"purely
functional"
notation,
that
is
one
using
only
application
and
abstraction.
.b
cacm
february,
1965
.a
landin,
p.
j.
.n
ca650201
jb
march
7,
1978
11:26
pm
.x
1086
4
1323
1132
4
1323
1234
4
1323
1263
4
1323
1265
4
1323
1270
4
1323
1323
4
1323
1323
4
1323
1323
4
1323
1358
4
1323
1358
4
1323
1379
4
1323
1380
4
1323
1380
4
1323
1453
4
1323
1464
4
1323
1484
4
1323
1491
4
1323
1498
4
1323
1613
4
1323
1614
4
1323
1665
4
1323
1781
4
1323
1781
4
1323
1787
4
1323
1825
4
1323
1860
4
1323
1989
4
1323
2083
4
1323
2112
4
1323
2178
4
1323
2179
4
1323
2252
4
1323
2325
4
1323
2341
4
1323
2534
4
1323
2541
4
1323
2546
4
1323
2645
4
1323
2652
4
1323
2684
4
1323
2698
4
1323
2733
4
1323
2820
4
1323
2842
4
1323
2929
4
1323
2934
4
1323
3069
4
1323
3073
4
1323
3155
4
1323
669
4
1323
679
4
1323
691
4
1323
761
4
1323
949
4
1323
989
4
1323
1323
5
1323
1323
5
1323
1323
5
1323
267
5
1323
1781
5
1323
2178
5
1323
2326
5
1323
2684
5
1323
3184
5
1323
799
5
1323
123
6
1323
196
6
1323
919
6
1323
990
6
1323
1007
6
1323
1046
6
1323
1131
6
1323
1139
6
1323
1140
6
1323
1149
6
1323
1198
6
1323
1215
6
1323
1223
6
1323
1265
6
1323
1303
6
1323
1303
6
1323
1303
6
1323
1303
6
1323
1323
6
1323
1323
6
1323
1323
6
1323
1323
6
1323
1358
6
1323
1366
6
1323
1421
6
1323
1460
6
1323
1462
6
1323
1463
6
1323
1467
6
1323
1468
6
1323
1477
6
1323
1491
6
1323
1496
6
1323
1531
6
1323
1535
6
1323
1565
6
1323
1601
6
1323
1602
6
1323
1613
6
1323
1614
6
1323
1626
6
1323
1641
6
1323
1787
6
1323
1788
6
1323
205
6
1323
1834
6
1323
224
6
1323
249
6
1323
288
6
1323
316
6
1323
381
6
1323
398
6
1323
2059
6
1323
11
6
1323
2127
6
1323
2192
6
1323
404
6
1323
410
6
1323
463
6
1323
464
6
1323
483
6
1323
3184
6
1323
3184
6
1323
3184
6
1323
3186
6
1323
3188
6
1323
584
6
1323
600
6
1323
680
6
1323
691
6
1323
763
6
1323
799
6
1323
.i
1324
.t
answering
english
questions
by
computer:
a
survey
.w
fifteen
experimental
english
language
question-answering
systems
which
are
programmed
and
operating
are
described
and
reviewed.
the
systems
range
from
a
conversation
machine
to
programs
which
make
sentences
about
pictures
and
systems
which
translate
from
english
into
logical
calculi.
systems
are
classified
as
list-structured
data-based,
graphic
data-based,
text-based
and
inferential.
principles
and
methods
of
operations
are
detailed
and
discussed.
it
is
concluded
that
the
data-base
question-answer
has
passed
from
initial
research
into
the
early
developmental
phase.
the
most
difficult
and
important
research
questions
for
the
advancement
of
general-purpose
language
processors
are
seen
to
be
concerned
with
measuring,
dealing
with
ambiguities,
translating
into
formal
languages
and
searching
large
tree
structures.
.b
cacm
january,
1965
.a
simmons,
r.
f.
.n
ca650113
jb
march
8,
1978
2:21
pm
.x
1324
4
1324
1324
4
1324
1324
4
1324
892
4
1324
931
4
1324
1155
5
1324
1324
5
1324
1324
5
1324
1324
5
1324
1456
5
1324
1468
5
1324
1515
5
1324
1699
5
1324
1856
5
1324
2127
5
1324
634
5
1324
652
5
1324
653
5
1324
1155
6
1324
1155
6
1324
1194
6
1324
1225
6
1324
1324
6
1324
1324
6
1324
1324
6
1324
1324
6
1324
1324
6
1324
1324
6
1324
1324
6
1324
1487
6
1324
1527
6
1324
1553
6
1324
1681
6
1324
1781
6
1324
1856
6
1324
.i
1325
.t
remote,
on-line,
real-time
computer
diagnosis
of
the
clinical
electrocardiogram
.w
presented
in
this
paper
is
a
brief
report
on
the
hardware,
software,
system
configuration
and
function
of
a
system
for
the
remote,
online,
real-time
digital
computer
diagnosis
of
clinical
electrocardiograms.
it
seems
likely
that
efforts
of
this
sort
will
lead
to
a
satisfactory
solution
to
the
problem
of
the
automatic
diagnosis
of
electrocardiograms.
current
attempts
by
the
authors
to
extend
the
diagnostic
capabilities
of
the
present
system
are
particularly
concerned
with
increasing
the
fidelity
of
the
adaptive
matched
filters,
the
development
of
three
dimensional
pattern
analysis,
the
analysis
of
parallel
electrocardiographer-computer
diagnostic
interaction,
and
a
study
of
the
possibility
of
introducing
major,
tree-like
branching
decisions
early
in
the
diagnostic
process.
.b
cacm
january,
1965
.a
whipple,
g.
h.
dickson,
j.
f.
horibe,
h.
stark,
l.
.n
ca650112
jb
march
8,
1978
2:27
pm
.x
1325
4
1325
1325
5
1325
1325
5
1325
1325
5
1325
462
5
1325
.i
1326
.t
boundary
networks
.w
a
feasible
computer
procedure
is
described
for
determining
the
total
or
partial
inclusion
of
arbitrarily
given
points
and
lines
with
respect
to
a
set
of
general
polygonal
domains
which
partition
a
plane
bounded
region.
a
scheme
for
the
computer
representation
of
the
boundaries
of
the
domains
and
an
algorithm,
based
on
this
scheme,
for
evaluating
the
inclusion
relations
are
specified
in
detail.
the
method
employs
several
levels
of
selection
criteria
for
the
purpose
of
reducing
the
number
of
accesses
to
auxiliary
storage
devices
and
the
amount
of
boundary
data
for
which
processing
is
required.
.b
cacm
january,
1965
.a
loomis,
r.
g.
.n
ca650111
jb
march
8,
1978
2:31
pm
.x
1326
5
1326
1326
5
1326
1326
5
1326
1630
5
1326
2547
5
1326
2987
5
1326
3165
5
1326
1326
6
1326
1326
6
1326
1326
6
1326
1326
6
1326
1630
6
1326
1925
6
1326
2125
6
1326
2547
6
1326
2633
6
1326
2987
6
1326
421
6
1326
524
6
1326
.i
1327
.t
use
of
decision
tables
in
computer
programming
.w
a
decision
table
is
a
tabular
form
for
displaying
decision
logic.
decision
tables
have
many
inherent
advantages.
the
technique
to
be
illustrated
puts
these
advantages
to
use
in
that
it
enables
one
to
program
directly
from
a
decision
table.
the
technique
is
based
on
the
creation
of
a
binary
image
of
a
limited
entry
decision
table
in
computer
memory.
a
binary
image
of
a
given
set
of
input
conditions
can
also
be
created.
this
data
image
is
used
to
scan
the
decision
table
image
to
arrive
at
the
proper
course
of
action.
there
are
several
advantages
gained
from
the
programming
point
view:
(1)
amount
of
computer
memory
used
is
drastically
reduced,
(2)
programming
is
simplified,
and
(3)
documentation
is
brief
and
clear.
.b
cacm
january,
1965
.a
kirk,
h.
w.
.n
ca650110
jb
march
8,
1978
2:36
pm
.x
1327
5
1327
1327
5
1327
1327
5
1327
1354
5
1327
1488
5
1327
2053
5
1327
2220
5
1327
2273
5
1327
2726
5
1327
2856
5
1327
1172
6
1327
1172
6
1327
1172
6
1327
1172
6
1327
1172
6
1327
1172
6
1327
1237
6
1327
1237
6
1327
1237
6
1327
1237
6
1327
1237
6
1327
1327
6
1327
1327
6
1327
1327
6
1327
1327
6
1327
1327
6
1327
1327
6
1327
1327
6
1327
1354
6
1327
1354
6
1327
1354
6
1327
1354
6
1327
1354
6
1327
1488
6
1327
1489
6
1327
1489
6
1327
1548
6
1327
1548
6
1327
1684
6
1327
250
6
1327
2053
6
1327
2053
6
1327
2220
6
1327
2220
6
1327
2220
6
1327
2221
6
1327
2263
6
1327
2453
6
1327
2598
6
1327
.i
1328
.t
further
remarks
on
reducing
truncation
errors
.b
cacm
january,
1965
.a
kahan,
w.
.n
ca650109
jb
march
8,
1978
2:37
pm
.x
1328
4
1328
1333
4
1328
2144
4
1328
1052
5
1328
1328
5
1328
1328
5
1328
1328
5
1328
2282
5
1328
2860
5
1328
3083
5
1328
1328
6
1328
1328
6
1328
1328
6
1328
1973
6
1328
2049
6
1328
2107
6
1328
2203
6
1328
2543
6
1328
2552
6
1328
492
6
1328
.i
1329
.t
simulation
of
boolean
functions
in
a
decimal
computer
.b
cacm
january,
1965
.a
mano,
m.
m.
.n
ca650108
jb
march
8,
1978
2:38
pm
.x
1207
5
1329
1208
5
1329
1329
5
1329
1329
5
1329
1329
5
1329
3053
5
1329
1329
6
1329
1329
6
1329
1329
6
1329
1785
6
1329
1973
6
1329
1992
6
1329
2107
6
1329
2109
6
1329
2412
6
1329
2543
6
1329
2673
6
1329
2707
6
1329
2770
6
1329
.i
1330
.t
automated
plotting
flow-charts
on
a
small
computer
.b
cacm
january,
1965
.a
anderson,
h.
e.
.n
ca650107
jb
march
8,
1978
2:39
pm
.x
1330
4
1330
1330
4
1330
1348
4
1330
2315
4
1330
1330
5
1330
1330
5
1330
1330
5
1330
528
5
1330
728
5
1330
.i
1331
.t
code
structures
for
protection
and
manipulation
of
variable-length
items
.w
when
items
are
made
up
of
a
variable
number
of
characters,
each
containing
the
same
number
of
bits,
certain
control
information
(partition
symbols)
is
inserted
to
mark
their
separations.
since
errors
in
identification
of
these
control
characters
can
lead
to
serious
trouble,
methods
of
protecting
these
symbols
are
indicated.
a
6-bit
code
assignment
of
alphanumeric
characters
for
fixed
word-length
computers
is
given
and
its
suitability
for
error
detection
and
variable-length
item
manipulation
is
shown.
also
indicated
is
its
flexibility
during
certain
arithmetic
operations.
.b
cacm
january,
1965
.a
ramamoorthy,
c.
v.
.n
ca650106
jb
march
8,
1978
2:48
pm
.x
1331
5
1331
1331
5
1331
1331
5
1331
.i
1332
.t
subroutine
assembly
.w
a
description
is
given
of
an
assembly
system,
which
requires
only
one
pass
and
does
not
maintain
a
table
of
information
about
the
subroutine
library.
.b
cacm
january,
1965
.a
samet,
p.
a.
.n
ca650105
jb
march
8,
1978
2:51
pm
.x
1332
4
1332
1044
5
1332
1332
5
1332
1332
5
1332
1332
5
1332
.i
1333
.t
reducing
truncation
errors
using
cascading
accumulators
.w
when
accumulating
a
large
number
of
quantities
as
in
numerical
integration,
the
sum
itself
may
become
much
larger
than
the
individual
addends.
this
results
in
truncation
error.
much
of
this
error
can
be
eliminated
using
cascading
accumulators
as
noted
in
a
recent
article
by
wolfe.
a
simpler
and
slightly
more
flexible
algorithm
is
presented
which
deals
also
with
the
case
of
negative
addends.
.b
cacm
january,
1965
.a
ross,
d.
r.
.n
ca650104
jb
march
8,
1978
2:54
pm
.x
1328
4
1333
1333
4
1333
2144
4
1333
1052
5
1333
1333
5
1333
1333
5
1333
1333
5
1333
.i
1334
.t
mechanization
of
tedious
algebra:
the
newcomb
operators
of
planetary
theory
.w
a
computer
program
has
been
written
to
generate
tables
of
formulas
for
the
newcomb
operators
of
planetary
theory.
the
newcomb
operators
are
expressed
as
polynomials
in
two
variables,
one
of
which
stands
for
a
simple
differential
operator,
and
the
other
for
an
arbitrary
integer.
the
polynomials
are
generated
by
a
recurrence
scheme.
the
program
is
coded
in
fortran,
using
simple
array
manipulation
techniques
to
perform
the
algebraic
operations.
formulas
for
over
100
newcomb
operators
have
been
produced
by
the
program
and
typeset
photographically
on
an
s-560
photon
system.
.b
cacm
january,
1965
.a
gerard,
j.
m.
izsak,
i.
g.
barnett,
m.
p.
.n
ca650103
jb
march
8,
1978
2:59
pm
.x
1334
4
1334
1396
4
1334
1444
4
1334
964
5
1334
1334
5
1334
1334
5
1334
1334
5
1334
1396
5
1334
964
6
1334
1028
6
1334
1029
6
1334
1083
6
1334
1132
6
1334
1214
6
1334
1278
6
1334
1334
6
1334
1365
6
1334
1386
6
1334
1387
6
1334
1388
6
1334
1392
6
1334
1393
6
1334
1394
6
1334
1395
6
1334
1396
6
1334
1397
6
1334
1496
6
1334
284
6
1334
407
6
1334
3199
6
1334
3200
6
1334
3201
6
1334
3202
6
1334
3203
6
1334
3204
6
1334
561
6
1334
730
6
1334
.i
1335
.t
character
set
for
optical
character
recognition
(proposed
american
stand
ard)
.b
cacm
january,
1965
.n
ca650102
jb
march
8,
1978
3:00
pm
.x
1335
5
1335
1335
5
1335
1335
5
1335
.i
1336
.t
npl:
highlights
of
a
new
programming
language
.b
cacm
january,
1965
.a
radin,
g.
rogoway,
h.
p.
.n
ca650101
jb
march
8,
1978
3:01
pm
.x
1247
5
1336
1336
5
1336
1336
5
1336
1336
5
1336
1945
5
1336
823
6
1336
914
6
1336
915
6
1336
917
6
1336
984
6
1336
989
6
1336
990
6
1336
1012
6
1336
1084
6
1336
1098
6
1336
1122
6
1336
1138
6
1336
1139
6
1336
1141
6
1336
1200
6
1336
1223
6
1336
1265
6
1336
1336
6
1336
1336
6
1336
1396
6
1336
1455
6
1336
1477
6
1336
1487
6
1336
1491
6
1336
1496
6
1336
483
6
1336
584
6
1336
669
6
1336
680
6
1336
763
6
1336
.i
1337
.t
euler:
a
generalization
of
algol,
and
its
formal
definition
.b
cacm
december,
1966
.a
wirth,
n.
weber,
h.
.n
ca661212
jb
march
30,
1978
9:11
am
.x
1337
5
1337
1337
5
1337
1337
5
1337
2423
5
1337
1337
6
1337
2015
6
1337
.i
1338
.t
additional
comments
on
a
problem
in
concurrent
progamming
control
.b
cacm
december,
1966
.a
knuth,
d.
e.
.n
ca661211
jb
march
30,
1978
9:12
am
.x
1338
5
1338
1338
5
1338
1338
5
1338
2150
5
1338
2228
5
1338
2256
5
1338
2342
5
1338
2618
5
1338
1198
6
1338
1198
6
1338
1198
6
1338
1198
6
1338
1198
6
1338
1338
6
1338
1338
6
1338
1338
6
1338
1338
6
1338
1338
6
1338
1749
6
1338
1749
6
1338
1749
6
1338
1877
6
1338
2256
6
1338
.i
1339
.t
a
contribution
to
the
development
of
algol
.b
cacm
december,
1966
.a
wirth,
n.
hoare,
c.
a.
r.
.n
ca661210
jb
march
30,
1978
9:13
am
.x
1339
5
1339
1339
5
1339
1339
5
1339
.i
1340
.t
multiplexing
of
slow
peripherals
.w
the
philosophy
of
a
monitor
which
allows
slow
output
devices
to
be
multiplexed
is
presented.
.b
cacm
december,
1966
.a
abraham,
c.
lance,
g.
n.
pearcey,
t.
.n
ca661209
jb
march
2,
1978
2:25
pm
.x
1340
5
1340
1340
5
1340
1340
5
1340
.i
1341
.t
levels
of
computer
systems
.w
in
building
current
computer
systems,
we
tend
to
break
them
down
into
"levels"
of
control,
command
and
communication;
in
using
the
system,
we
break
our
problems
down
correspondingly.
the
continued
use
of
such
a
structure
raises
questions
about
its
effects
on
the
usefulness
of
future
systems,
particularly
with
regard
to
such
trends
as
time
sharing,
parallel
programming,
and,
eventually,
systems
which
learn.
in
this
essay
some
of
these
questions
are
posed,
and
the
general
attitude
we
must
take
in
pursuing
the
problem
further
is
discussed.
.b
cacm
december,
1966
.a
bryant,
p.
.n
ca661208
jb
march
2,
1978
2:29
pm
.x
1341
5
1341
1341
5
1341
1341
5
1341
.i
1342
.t
transportation
problem
(algorithms
293
[h])
.b
cacm
december,
1966
.a
bayer,
g.
.n
ca661207a
jb
march
2,
1978
2:30
pm
.x
1342
5
1342
1342
5
1342
1342
5
1342
.i
1343
.t
havie
integrator
(algorithm
257
[d1])
.b
cacm
december,
1966
.a
farkas,
i.
.n
ca661207b
jb
march
23,
1978
4:16
pm
.x
1343
5
1343
1343
5
1343
1343
5
1343
.i
1344
.t
statistical
computations
based
upon
algebraically
specified
models
.w
based
upon
a
machine-readable
statistical
model
and
related
symbolic
specifications,
an
efficient
method
of
performing
calculations
for
statistical
models
of
a
balanced
complete
nature
is
presented.
fixes,
mixed,
and
random
analysis
of
variance
models
are
considered.
a
procedure
for
obtaining
variance
components
and
calculated
f
statistics
for
the
model
terms
is
included.
.b
cacm
december,
1966
.a
schlater,
j.
e.
hemerle,
w.
j.
.n
ca661206
jb
march
2,
1978
2:33
pm
.x
1344
5
1344
1344
5
1344
1344
5
1344
.i
1345
.t
tensor
calculations
on
the
computer
.w
a
formac
program
has
been
written
which
is
capable
of
calculating
various
quantities
of
interest
in
tensor
calculus.
using
this
code,
christoffel
symbols
have
been
calculated
for
12
basic
orthogonal
coordinate
systems.
.b
cacm
december,
1966
.a
waltons,
j.
j.
.n
ca661205
jb
march
2,
1978
2:35
pm
.x
1345
5
1345
1345
5
1345
1345
5
1345
1543
5
1345
1664
5
1345
1345
6
1345
1345
6
1345
1543
6
1345
1616
6
1345
1616
6
1345
.i
1346
.t
on
the
application
of
the
process
of
equalization
of
maxima
to
obtain
rational
approximation
to
certain
modified
bessel
functions
.w
the
second
remes
algorithm
as
originally
established
for
polynomials,
may
converge
or
not
when
the
approximating
functions
are
rational.
however,
the
few
results
known
in
this
domain
show
how
efficient
the
algorithm
can
be
to
obtain
approximations
with
a
small
error,
much
more
than
in
the
polynomial
case,
in
which
the
best
approximation
can
be
very
nearly
approached
directly
by
a
series
development.
the
aim
of
this
paper
is
to
investigate
the
limitations
of
the
applicability
of
certain
extensions
of
the
algorithm
to
the
case
where
the
approximations
are
rational
as
well
as
to
present
some
numerical
results.
.b
cacm
december,
1966
.a
gargantini,
l.
.n
ca661204
jb
march
2,
1978
2:39
pm
.x
1015
4
1346
1346
4
1346
1346
4
1346
1440
4
1346
1645
4
1346
951
4
1346
951
5
1346
1346
5
1346
1346
5
1346
1346
5
1346
532
5
1346
.i
1347
.t
general
time-varying
systems
error
sensitivities
program
.w
the
evaluation,
by
the
propagation
of
variance
technique,
of
the
sensitivity
of
time-varying
systems
to
initial
condition
and
parameter
errors,
involves
the
determination
of
several
system-dependent
partial
derivative
matrices.
this
requirement
has
led
to
separate
programs
for
each
system
under
investigation.
a
new
program,
through
utilization
of
the
wengert
differentiation
technique,
automatically
determines
the
required
matrices
from
specific
system
equations
supplied
in
subroutine
form
at
execution
time,
eliminating
the
need
for
individualized
programs,
and
presaging
the
further
development
of
extremely
general
computer
programs.
.b
cacm
december,
1966
.a
wilkins,
r.
d.
.n
ca661203
jb
march
2,
1978
2:44
pm
.x
1028
4
1347
1216
4
1347
1216
4
1347
1278
4
1347
1278
4
1347
1347
4
1347
1347
4
1347
1347
4
1347
1396
4
1347
1396
4
1347
1396
4
1347
1536
4
1347
1028
5
1347
1029
5
1347
1278
5
1347
1347
5
1347
1347
5
1347
1347
5
1347
.i
1348
.t
flowtrace,
a
computer
program
for
flowcharting
programs
.w
the
flowtrace
system
produces
flowcharts
of
programs
written
in
"almost
any"
programming
language.
one
most
describe
the
syntax
of
the
control
statements
in
his
language;
for
this
purpose
a
metalanguage
is
available.
the
resultant
object
deck
is
used
to
flowchart
any
programs
in
the
language
described.
several
examples
of
fap
and
snobol
flowcharts
are
given.
however,
it
is
not
necessary
to
confine
one's
scope
to
existing
languages.
one
may
define
his
own
language
in
any
"well-structured"
manner.
this
feature
is
particularly
useful
when
it
is
desirable
to
chart
only
comments
within
a
program.
such
an
approach
permits
the
documentation
of
descriptive
remarks
and
avoids
the
inclusion
of
coding
details.
.b
cacm
december,
1966
.a
sherman,
p.
m.
.n
ca661202
jb
march
2,
1978
2:49
pm
.x
1330
4
1348
1348
4
1348
2315
4
1348
1348
5
1348
1348
5
1348
1348
5
1348
2315
5
1348
728
5
1348
1348
6
1348
1834
6
1348
1987
6
1348
728
6
1348
.i
1349
.t
computing
capabilities
at
western
european
universities
.w
this
report
on
the
author's
trip
to
universities
in
western
europe
in
the
summer
of
1966
gives
brief
descriptions
of
computing
activities
at
each
institution
visited.
present
equipment
capabilities
vary
from
moderate
to
large
scale;
however,
many
institutions
plan
to
acquire
complex
time-shared
systems
in
the
near
future.
in
the
author's
opinion,
the
state
of
the
art
lags
behind
that
on
this
continent.
this
lag
is
attributed
to
four
principal
factors:
(a)
the
handicapping
organization
of
academic
procedures;
(b)
the
university-government
financial
relationship;
(c)
the
subordinated
organization
of
the
computing
facility;
(d)
the
paucity
of
professional
interchange
of
knowledge.
the
effects
of
these
constraints
are
explicated.
.b
cacm
december,
1966
.a
finerman,
a.
.n
ca661201
jb
march
2,
1978
2:55
pm
.x
1349
4
1349
1349
4
1349
1349
4
1349
1349
4
1349
689
4
1349
1349
5
1349
1349
5
1349
1349
5
1349
236
5
1349
1862
5
1349
323
5
1349
415
5
1349
83
5
1349
1349
6
1349
.i
1350
.t
the
augmented
predictive
analyzer
for
context-free
languages-its
relative
efficiency
.w
it
has
been
proven
by
greibach
that
for
a
given
context-free
grammar
g,
a
standard-form
grammar
gs
can
be
constructed,
which
generates
the
same
languages
as
is
generated
by
g
and
whose
rules
are
all
of
the
form
z
-->
cy(1)
...
y(m),
(m
>=
o)
where
z
and
y(i)
are
intermediate
symbols
and
c
a
terminal
symbol.
since
the
predictive
analyzer
at
harvard
uses
a
standard-form
grammar,
it
can
accept
the
language
of
any
context-free
grammar
g,
given
an
equivalent
standard-form
grammar
gs.
the
structural
descriptions
sd(gs,x)
assigned
to
a
given
sentence
x
by
the
predictive
analyzer,
however,
are
usually
different
from
the
structural
descriptions
sd(g,x)
assigned
to
the
same
sentence
by
the
original
context-free
grammar
g
from
which
gs
is
derived.
in
section
1,
an
algorithm,
originally
due
to
abbott
is
described
standard-form
grammar
each
of
whose
rules
is
in
standard
form,
supplemented
by
additional
information
describing
its
derivation
from
the
original
context-free
grammar.
a
technique
for
performing
the
sd(gs,x)
to
sd(g,x)
transformation
effectively
is
also
described.
in
section
2,
the
augmented
predictive
analyzer
as
a
parsing
algorithm
for
arbitrary
context-free
languages
is
compared
with
two
other
parsing
algorithms:
a
selective
top-to-bottom
algorithm
similar
to
irons'
"error
correcting
parse
algorithm"
and
an
immediate
constituent
analyzer
which
is
an
extension
of
sakai-cocke's
algorithm
for
normal
grammars.
the
comparison
is
based
upon
several
criteria
of
efficiency,
covering
core-storage
requirements,
complexities
of
the
programs
and
processing
time.
.b
cacm
november,
1966
.a
kuno,s.
.n
ca661108
jb
march
2,
1978
3:11
pm
.x
1225
4
1350
1225
4
1350
1350
4
1350
1350
4
1350
1350
4
1350
1350
4
1350
1350
4
1350
1399
4
1350
1646
4
1350
1659
4
1350
1659
4
1350
1768
4
1350
1781
4
1350
1781
4
1350
1856
4
1350
1945
4
1350
1945
4
1350
1945
4
1350
2050
4
1350
2110
4
1350
2650
4
1350
2698
4
1350
2708
4
1350
3093
4
1350
3094
4
1350
1012
5
1350
1225
5
1350
1265
5
1350
1350
5
1350
1350
5
1350
1350
5
1350
1399
5
1350
1659
5
1350
680
5
1350
1225
6
1350
1265
6
1350
1350
6
1350
1671
6
1350
1697
6
1350
.i
1351
.t
automatic
error
bounds
on
real
zeros
of
rational
functions
.w
a
procedure
for
implementing
an
interval
arithmetic
version
of
the
newton-raphson
method
is
proposed.
the
procedure
require
only
a
starting
interval
over
which
the
zeros
of
a
given
rational
function
are
to
be
located.
the
method
automatically
provides
bounds
for
roundoff
error.
.b
cacm
november,
1966
.a
dargel,
r.
h.
loscalzo,
f.
r.
witt,
t.
h.
.n
ca661107
jb
march
2,
1978
3:31
pm
.x
1351
5
1351
1351
5
1351
1351
5
1351
.i
1352
.t
automatic
integration
of
a
function
with
a
parameter
.w
two
efficient
methods
for
automatic
numerical
integration
are
romberg
integration
and
adaptive
simpson
integration.
for
integrands
of
the
form
f(x)g(x,a)
where
a
is
a
parameter,
it
is
shown
that
romberg's
method
is
more
efficient.
a
fortran
program
shows
how
to
achieve
this
greater
efficiency.
.b
cacm
november,
1966
.a
rabinowitz,
p.
.n
ca661106
jb
march
2,
1978
3:35
pm
.x
1040
4
1352
1352
4
1352
1352
4
1352
1352
4
1352
1352
4
1352
1352
4
1352
1352
4
1352
1352
4
1352
1352
4
1352
1352
4
1352
1352
4
1352
1352
4
1352
1356
4
1352
1883
4
1352
1982
4
1352
1982
4
1352
2040
4
1352
2040
4
1352
2040
4
1352
2040
4
1352
2048
4
1352
2048
4
1352
2048
4
1352
2074
4
1352
2074
4
1352
2074
4
1352
2074
4
1352
2093
4
1352
2093
4
1352
2093
4
1352
2093
4
1352
2415
4
1352
2550
4
1352
1040
5
1352
1092
5
1352
1241
5
1352
1273
5
1352
1352
5
1352
1352
5
1352
1352
5
1352
324
5
1352
2040
5
1352
429
5
1352
570
5
1352
621
5
1352
786
5
1352
834
5
1352
872
5
1352
1241
6
1352
1273
6
1352
1352
6
1352
1356
6
1352
324
6
1352
621
6
1352
.i
1353
.t
techniques
for
automatic
tolerance
control
in
linear
programming
.w
in
this
technical
note,
the
numerical
steps
for
the
simplex
method
of
linear
programming
are
reviewed
and
the
tolerances
needed
in
the
numerical
procedure
are
defined.
objective
criteria
are
given
for
accomplishing
the
numerical
steps
of
the
method
and
the
calculation
of
necessary
tolerances.
.b
cacm
november,
1966
.a
clasen,
r.
j.
.n
ca661105
jb
march
2,
1978
3:37
pm
.x
1353
5
1353
1353
5
1353
1353
5
1353
2589
5
1353
1353
6
1353
.i
1354
.t
conversion
of
decision
tables
to
computer
programs
by
rule
mark
techniques
.w
the
rule
mask
technique
is
one
method
of
converting
limited
entry
decision
tables
to
computer
programs.
recent
discussion
suggest
that
in
many
circumstances
it
is
to
be
preferred
to
the
technique
of
constructing
networks
or
trees.
a
drawback
of
the
technique
as
hitherto
presented
is
its
liability
to
produce
object
programs
of
longer
run
time
than
necessary.
in
this
paper
a
modification
of
the
technique
is
discussed
which
takes
into
account
both
rule
frequencies
and
the
relative
times
for
evaluating
conditions.
this
can
materially
improve
object
program
run
time.
.b
cacm
november,
1966
.a
king,
p.
j.
h.
.n
ca661104
jb
march
2,
1978
3:41
pm
.x
1354
4
1354
1354
4
1354
1354
4
1354
1488
4
1354
1488
4
1354
1994
4
1354
2053
4
1354
2053
4
1354
2053
4
1354
2220
4
1354
2220
4
1354
2220
4
1354
2273
4
1354
2273
4
1354
2273
4
1354
2453
4
1354
2598
4
1354
2726
4
1354
2726
4
1354
2856
4
1354
2856
4
1354
1172
5
1354
1237
5
1354
1327
5
1354
1354
5
1354
1354
5
1354
1354
5
1354
1684
5
1354
2053
5
1354
2220
5
1354
2273
5
1354
2453
5
1354
2726
5
1354
2856
5
1354
3113
5
1354
1172
6
1354
1172
6
1354
1172
6
1354
1172
6
1354
1172
6
1354
1172
6
1354
1237
6
1354
1237
6
1354
1237
6
1354
1327
6
1354
1327
6
1354
1327
6
1354
1327
6
1354
1327
6
1354
1354
6
1354
1354
6
1354
1354
6
1354
1354
6
1354
1354
6
1354
1354
6
1354
1354
6
1354
1354
6
1354
1488
6
1354
1489
6
1354
1489
6
1354
1548
6
1354
1548
6
1354
1564
6
1354
1684
6
1354
250
6
1354
2053
6
1354
2053
6
1354
2053
6
1354
2220
6
1354
2220
6
1354
2220
6
1354
2220
6
1354
2221
6
1354
2263
6
1354
2263
6
1354
2453
6
1354
2598
6
1354
2598
6
1354
2691
6
1354
2856
6
1354
753
6
1354
.i
1355
.t
regular
coulomb
wave
functions
(algorithm
292
)
.b
cacm
november,
1966
.a
gautschi,
w.
.n
ca661103a
jb
march
2,
1978
3:43
pm
.x
1355
4
1355
2619
4
1355
1355
5
1355
1355
5
1355
1355
5
1355
1419
5
1355
.i
1356
.t
havie
integrator
(algorithm
257
[d1])
.b
cacm
november,
1966
.a
hillstrom,
k.
.n
ca661103b
jb
march
23,
1978
4:19
pm
.x
1352
4
1356
1356
4
1356
1883
4
1356
2040
4
1356
1241
5
1356
1356
5
1356
1356
5
1356
1356
5
1356
2040
5
1356
1241
6
1356
1273
6
1356
1352
6
1356
1356
6
1356
324
6
1356
621
6
1356
.i
1357
.t
examination
scheduling
(algorithm
286
[h])
.b
cacm
november,
1966
.a
williams,
r.
.n
ca661103c
jb
march
23,
1978
4:20
pm
.x
1357
5
1357
1357
5
1357
1357
5
1357
.i
1358
.t
syntax
macros
and
extended
translation
.w
a
translation
approach
is
described
which
allows
one
to
extended
the
syntax
and
semantics
of
a
given
high-level
base
language
by
the
use
of
a
new
formalism
called
a
syntax-macro.
syntax-macros
define
string
transformations
based
on
syntactic
elements
of
the
base
language.
two
types
of
macros
are
discussed,
and
examples
are
given
of
their
use.
the
conditional
generation
of
macros
based
on
options
and
alternatives
recognized
by
the
scan
are
also
described.
.b
cacm
november,
1966
.a
leavenworth,
b.
m.
.n
ca661102
jb
march
2,
1978
3:46
pm
.x
1037
4
1358
1086
4
1358
1132
4
1358
1234
4
1358
1234
4
1358
1263
4
1358
1265
4
1358
1270
4
1358
1323
4
1358
1323
4
1358
1358
4
1358
1358
4
1358
1358
4
1358
1358
4
1358
1358
4
1358
1379
4
1358
1380
4
1358
1380
4
1358
1453
4
1358
1464
4
1358
1484
4
1358
1491
4
1358
1491
4
1358
1498
4
1358
1565
4
1358
1613
4
1358
1614
4
1358
1665
4
1358
1781
4
1358
1781
4
1358
1781
4
1358
1781
4
1358
1787
4
1358
1788
4
1358
1825
4
1358
1860
4
1358
1989
4
1358
2083
4
1358
2112
4
1358
2178
4
1358
2179
4
1358
2252
4
1358
2325
4
1358
2341
4
1358
2534
4
1358
2541
4
1358
2546
4
1358
2645
4
1358
2652
4
1358
2684
4
1358
2698
4
1358
2733
4
1358
2820
4
1358
2842
4
1358
2929
4
1358
2934
4
1358
3069
4
1358
3073
4
1358
3155
4
1358
669
4
1358
679
4
1358
691
4
1358
761
4
1358
949
4
1358
989
4
1358
205
5
1358
1358
5
1358
1358
5
1358
1358
5
1358
1460
5
1358
1541
5
1358
1565
5
1358
1781
5
1358
1824
5
1358
2252
5
1358
3184
5
1358
729
5
1358
799
5
1358
123
6
1358
196
6
1358
919
6
1358
990
6
1358
1007
6
1358
1046
6
1358
1131
6
1358
1139
6
1358
1140
6
1358
1149
6
1358
1162
6
1358
1198
6
1358
1215
6
1358
1223
6
1358
1265
6
1358
1303
6
1358
1323
6
1358
1358
6
1358
1358
6
1358
1358
6
1358
1358
6
1358
1358
6
1358
1366
6
1358
1380
6
1358
1421
6
1358
1455
6
1358
1460
6
1358
1462
6
1358
1463
6
1358
1467
6
1358
1468
6
1358
1477
6
1358
1491
6
1358
1496
6
1358
1496
6
1358
1531
6
1358
1535
6
1358
1565
6
1358
1601
6
1358
1602
6
1358
1613
6
1358
1614
6
1358
1614
6
1358
1626
6
1358
1641
6
1358
1781
6
1358
1787
6
1358
1788
6
1358
205
6
1358
205
6
1358
224
6
1358
249
6
1358
288
6
1358
316
6
1358
381
6
1358
398
6
1358
11
6
1358
2155
6
1358
404
6
1358
404
6
1358
410
6
1358
463
6
1358
464
6
1358
483
6
1358
3184
6
1358
3184
6
1358
3188
6
1358
584
6
1358
600
6
1358
680
6
1358
691
6
1358
763
6
1358
799
6
1358
.i
1359
.t
data
filtering
applied
to
information
storage
and
retrieval
applications
.w
manipulation
of
data
strings
is
the
most
complex
processing
function
in
information
storage
and
retrieval
applications.
data
string
manipulation
is
discussed
within
the
context
of
an
interpretive
processing
environment
controlled
by
the
use
of
procedural
directives.
the
sequence
of
procedural
directives
is
derived
from
a
job
assumed
to
be
expressed
in
a
user-oriented
source
language.
each
data
string
with
the
structured
data
environment
(data
bank)
is
explicitly
or
implicitly
related
to
a
format
declaration
residing
in
a
format
library.
the
processing
mechanics
associated
with
data
string
manipulation
is
developed
in
accordance
with
a
generalized
data
filtering
concept.
this
results
in
the
implementation
of
a
two-part
data
filter
module
that
satisfies
internal
processing
functions
by
filtering
data
strings
through
format
declarations
associated
with
its
input
and
output
ports.
.b
cacm
november,
1966
.a
larsen,
r.
p.
.n
ca661101
jb
march
2,
1978
3:52
pm
.x
1359
5
1359
1359
5
1359
1359
5
1359
.i
1360
.t
description
of
systems
used
for
data
transmission*
(an
asa
tutorial)
.b
cacm
october,
1966
.n
ca661007
jb
march
2,
1978
3:54
pm
.x
1360
5
1360
1360
5
1360
1360
5
1360
.i
1361
.t
rectangular
holes
in
twelve-row
punched
cards*
(proposed
american
standard)
.b
cacm
october,
1966
.n
ca661006
jb
march
2,
1978
3:55
pm
.x
1361
5
1361
1361
5
1361
1361
5
1361
.i
1362
.t
code
extension
in
ascii*
(an
asa
tutorial)
.w
the
american
standard
code
for
information
interchange
(ascii)
contains
a
number
of
control
characters
associated
with
the
principle
of
code
extension,
that
is,
with
the
representation
of
information
which
cannot
be
directly
represented
by
means
of
the
characters
in
the
code.
the
manner
of
use
of
these
characters
has
not
previously
been
completely
described.
this
paper
presents
a
set
of
mutually
consistent
philosophies
regarding
code
extension
applications,
and
suggests
a
corollary
set
of
doctrines
for
the
application
of
the
code
extension
characters.
distinctions
are
drawn
between
code
extension
and
such
other
concepts
as
"graphic
substitution"
or
"syntactic
representation"
which
are
often
used
to
meet
similar
requirements.
also
covered
are
certain
topics
which
are
not
truly
concerned
with
code
extension
but
which
are
often
linked
with
it
in
discussion
on
code
applications.
the
material
in
this
paper
is
equally
applicable
in
principle
to
the
(proposed)
iso
international
7-bit
code
for
information
interchange.
.b
cacm
october,
1966
.n
ca661005
jb
march
2,
1978
4:02
pm
.x
1362
5
1362
1362
5
1362
1362
5
1362
.i
1363
.t
a
general
method
of
systematic
interval
computation
for
numerical
integration
of
initial
value
problems
.w
a
procedure
is
given
for
continuously
computing
and
monitoring
the
step
size
to
be
used
by
a
self-starting,
p-th
order
numerical
integration
method
to
solve
an
initial
value
problem.
the
procedure
uses
an
estimate
of
the
truncation
error
to
calculate
the
step
size.
.b
cacm
october,
1966
.a
martin,
w.
c.
paulson,
k.
c.
sashkin,
l.
.n
ca661004
jb
march
2,
1978
4:05
pm
.x
1363
5
1363
1363
5
1363
1363
5
1363
.i
1364
.t
mathematical
experimentation
in
time-lag
modulation
.w
equations
of
the
form
du/dt
=
g(u(t),u(h(t)))
arise
in
a
number
of
scientific
contexts.
the
authors
point
out
some
interesting
properties
of
the
solution
u'(t)
=
-u(t-1-k*sin(wt))+sin(at).
these
properties
were
obtained
by
means
of
numerical
solution.
.b
cacm
october,
1966
.a
bellman,
r.
buell,
j.
kalaba,
r.
.n
ca661003
jb
march
2,
1978
4:08
pm
.x
1364
4
1364
1280
5
1364
1364
5
1364
1364
5
1364
1364
5
1364
.i
1365
.t
eliminating
monotonous
mathematics
with
formac
.w
the
formac
(formula
manipulation
compiler)
programming
system
provides
a
powerful
tool
for
performing
mathematical
analysis.
it
is
an
extension
of
fortran
iv
which
permits
the
use
of
the
computer
to
perform
the
tedious
algebraic
computations
that
arise
in
many
different
fields.
among
the
areas
in
which
it
has
been
successfully
used
are:
differentiation
of
complicated
expressions,
expansion
of
truncated
power
series,
solution
of
simultaneous
equations
with
literal
coefficients,
nonlinear
maximum
likelihood
estimation,
tensor
analysis,
and
generation
of
the
coefficients
of
equations
in
keplerian
motion.
these
types
of
analysis-which
arose
in
the
solution
of
specific
practical
problems
in
physics,
engineering,
astronomy,
statistics
and
astronautics-are
discussed
in
the
paper.
in
addition
to
its
usage
for
specific
problem
solutions,
formac
can
also
be
used
to
automate
the
analysis
phase
in
certain
production
programming.
several
such
applications
are
presented.
.b
cacm
october,
1966
.a
tobey,
r.
g.
.n
ca661002
jb
march
2,
1978
4:14
pm
.x
1396
5
1365
1365
5
1365
1365
5
1365
1365
5
1365
2229
5
1365
964
6
1365
1028
6
1365
1029
6
1365
1083
6
1365
1132
6
1365
1214
6
1365
1278
6
1365
1334
6
1365
1365
6
1365
1365
6
1365
1386
6
1365
1387
6
1365
1388
6
1365
1392
6
1365
1393
6
1365
1394
6
1365
1395
6
1365
1396
6
1365
1397
6
1365
1496
6
1365
284
6
1365
407
6
1365
3199
6
1365
3200
6
1365
3201
6
1365
3202
6
1365
3203
6
1365
3204
6
1365
561
6
1365
730
6
1365
.i
1366
.t
computer
simulation-discussion
of
the
technique
and
comparison
of
languages
.w
the
purpose
of
this
paper
is
to
present
a
comparison
of
some
computer
simulation
languages
and
of
some
of
the
involved
in
comparing
software
packages
for
digital
computers
are
discussed
in
part
i.
the
issue
is
obvious:
users
of
digital
computers
must
choose
from
available
languages
or
write
their
own.
substantial
costs
can
occur,
particularly
in
training,
implementation
and
computer
time
if
an
inappropriate
language
is
chosen.more
and
more
computer
simulation
languages
are
being
developed:
comparisons
and
evaluations
of
existing
languages
are
useful
for
designers
and
implementers
as
well
as
users.
the
second
part
is
devoted
to
computer
simulation
and
simulation
languages.
the
computational
characteristics
of
simulation
are
discussed
with
special
attention
being
paid
to
a
distinction
between
continuous
and
discrete
change
models.
part
iii
presents
a
detailed
comparison
of
six
simulation
languages
and
packages:
simscript,
clp,
csl,
gasp,
cpss
and
sol.
the
characteristics
of
each
are
summarized
in
a
series
of
tables.
the
implications
of
this
analysis
for
designers
of
languages,
for
users,
and
for
implementers
are
developed.
the
conclusion
of
the
paper
is
that
the
packages
now
available
for
computer
simulation
offer
features
which
none
of
the
more
general-purpose
packages
do
and
that
analysis
of
strengths
and
weaknesses
of
each
suggests
ways
in
which
both
current
and
future
simulation
languages
and
packages
can
be
improved.
.b
cacm
october,
1966
.a
teichroew,
d.
lubin,
j.
f.
.n
ca661001
jb
march
2,
1978
4:23
pm
.x
1366
5
1366
1366
5
1366
1366
5
1366
1503
5
1366
1781
5
1366
1860
5
1366
2091
5
1366
123
6
1366
196
6
1366
919
6
1366
990
6
1366
1007
6
1366
1046
6
1366
1131
6
1366
1139
6
1366
1140
6
1366
1149
6
1366
1198
6
1366
1215
6
1366
1223
6
1366
1265
6
1366
1303
6
1366
1323
6
1366
1358
6
1366
1366
6
1366
1366
6
1366
1366
6
1366
1366
6
1366
1389
6
1366
1421
6
1366
1421
6
1366
1460
6
1366
1462
6
1366
1463
6
1366
1467
6
1366
1468
6
1366
1477
6
1366
1477
6
1366
1491
6
1366
1491
6
1366
1496
6
1366
1496
6
1366
1531
6
1366
1535
6
1366
1565
6
1366
1601
6
1366
1602
6
1366
1613
6
1366
1614
6
1366
1626
6
1366
1626
6
1366
1641
6
1366
1641
6
1366
1785
6
1366
1786
6
1366
1787
6
1366
1788
6
1366
205
6
1366
224
6
1366
249
6
1366
288
6
1366
316
6
1366
378
6
1366
381
6
1366
398
6
1366
11
6
1366
404
6
1366
410
6
1366
463
6
1366
464
6
1366
483
6
1366
3184
6
1366
3184
6
1366
3188
6
1366
584
6
1366
600
6
1366
680
6
1366
691
6
1366
763
6
1366
799
6
1366
.i
1367
.t
character
structure
and
character
parity
sense
for
parallel-by-bit
data
communication
in
ascii*
(proposed
american
standard)
.b
cacm
september,
1966
.n
ca660912
jb
march
2,
1978
4:26
pm
.x
1367
4
1367
2772
4
1367
2787
4
1367
1116
5
1367
1367
5
1367
1367
5
1367
1367
5
1367
.i
1368
.t
systematic
generation
of
hamiltonian
circuits
.w
for
a
combinatorial
matrix
which
may
specify
both
directed
and
nondirected
arcs,
the
paper
describes
a
computer
program
which
generates
systematically
and
exhaustively
all
the
hamiltonian
circuits.
specific
application
is
made
to
the
"traveling
salesman"
problem.
.b
cacm
september,
1966
.a
roberts,
s.
m.
.n
ca660911
jb
march
2,
1978
4:30
pm
.x
1368
5
1368
1368
5
1368
1368
5
1368
.i
1369
.t
half
rotations
in
n-dimensional
euclidean
space
.w
an
iterative
procedure
is
described
for
determining
half
rotations
in
n-dimensional
euclidean
space.
the
method
is
a
variant
of
the
cyclic
jacobi
procedure
and
utilizers
elementary
plane
rotations
to
obtain
the
half
rotation
matrix.
numerical
examples
are
given.
.b
cacm
september,
1966
.a
mccamon,
r.
b.
.n
ca660910
jb
march
2,
1978
4:32
pm
.x
1369
5
1369
1369
5
1369
1369
5
1369
1961
5
1369
1369
6
1369
1504
6
1369
1847
6
1369
.i
1370
.t
linear
equations,
exact
solutions
(algorithm
290
[f4])
.b
cacm
september,
1966
.a
boothroyd,
j.
.n
ca660909a
jb
march
2,
1978
4:33
pm
.x
1370
5
1370
1370
5
1370
1370
5
1370
1813
5
1370
1370
6
1370
.i
1371
.t
logarithm
of
gamma
function
(algorithm
291
[s14])
.b
cacm
september,
1966
.a
pike,
m.
c.
hill,
i.
d.
.n
ca660909bjb
march
23,
1978
4:24
pm
.x
1371
5
1371
1371
5
1371
1371
5
1371
.i
1372
.t
direct
search
(algorithm
178
[e4])
.b
cacm
september,
1966
.a
bell,
m.
pike,
m.
c.
.n
ca660909c
jb
march
23,
1978
4:25
pm
.x
1372
5
1372
1372
5
1372
1372
5
1372
2190
5
1372
1372
6
1372
1849
6
1372
.i
1373
.t
gamma
function;
gamma
function
for
range
1
to
2;
reciprocal
gamma
function
to
real
argument;
gamma
function;
logarithm
of
gamma
function
(algorithms
34[s14];
54[s14];
80[s14];
221[s14];
291[s14])
.b
cacm
september,
1966
.a
pike,
m.
c.
hill,
i.
d.
.n
ca660909d
jb
march
23,
1978
4:28
pm
.x
1373
5
1373
1373
5
1373
1373
5
1373
.i
1374
.t
evaluation
of
determinant;
determinant
evaluation
(algorithms
41[f3];
269[f3])
.b
cacm
september,
1966
.a
bergson,
a.
.n
ca660909e
jb
march
23,
1978
4:29
pm
.x
1374
5
1374
1374
5
1374
1374
5
1374
.i
1375
.t
function
minimization
(algorithm
251
[e4])
.b
cacm
september,
1966
.a
fletcher,
r.
.n
ca660909f
jb
march
23,
1978
4:31
pm
.x
1375
5
1375
1375
5
1375
1375
5
1375
.i
1376
.t
modified
graeffee
method
(algorithm
256
[c2])
.b
cacm
september,
1966
.a
stern,
g.
.n
ca660909g
jb
march
23,
1978
4:32
pm
.x
1376
5
1376
1376
5
1376
1376
5
1376
.i
1377
.t
pseudo-random
numbers
(algorithm
266
[g5])
.b
cacm
september,
1966
.a
hansson,
l.
.n
ca660909h
jb
march
23,
1978
6:45
pm
.x
1377
5
1377
1377
5
1377
1377
5
1377
.i
1378
.t
pseudo-random
numbers
(algorithm
266
[g5])
.b
cacm
september,
1966
.a
hill,
i.
d.
pike,
m.
c.
.n
ca660909i
jb
march
23,
1978
6:46
pm
.x
1378
5
1378
1378
5
1378
1378
5
1378
.i
1379
.t
a
final
solution
to
the
dangling
else
of
algol
60
and
related
languages
.w
the
dangling
else
problem
consists
of
a
class
of
potential
ambiguities
in
algol-like
conditional
statements
whose
basic
form
is
"if
b1
then
if
b2
then
s1
else
s2"
where
b1
and
b2
are
boolean
expressions
and
s1
and
s2
are
basic
statements.
the
difficulty
lies
in
whether
to
attach
the
else
to
the
first
if
or
to
the
second
one.
existing
solutions
to
the
problem
are
either
ambiguous
or
unnecessarily
restrictive.
let
sand
s1
be
statements.
we
define
s
to
be
closed
if
"s
else
s1"
is
not
a
statement,
and
to
be
open
if
"s
else
s1"
is
a
statement.
thus
an
unconditional
statement
is
a
closed
statement.
open
and
closed
conditional
statements
are
defined
by
syntax
equations
in
such
a
way
as
to
preserve
openness
and
closure.
in
each
case,
an
else
must
always
be
preceded
by
a
closed
statement.
it
is
shown
that
the
syntax
equations
are
unambiguous,
and
that
may
change
in
the
statement
types
required
within
the
syntax
equations
would
lead
to
either
ambiguity
or
unnecessary
restriction.
.b
cacm
september,
1966
.a
abrahams,
p.
w.
.n
ca660908
jb
march
2,
1978
6:18
pm
.x
1084
4
1379
1086
4
1379
1132
4
1379
1234
4
1379
1263
4
1379
1265
4
1379
1270
4
1379
1323
4
1379
1358
4
1379
1379
4
1379
1379
4
1379
1379
4
1379
1379
4
1379
1379
4
1379
1380
4
1379
1453
4
1379
1464
4
1379
1484
4
1379
1491
4
1379
1498
4
1379
1613
4
1379
1614
4
1379
1625
4
1379
1693
4
1379
1781
4
1379
1781
4
1379
1825
4
1379
1836
4
1379
1860
4
1379
1945
4
1379
1945
4
1379
2015
4
1379
2060
4
1379
2061
4
1379
2083
4
1379
2091
4
1379
2178
4
1379
2179
4
1379
2179
4
1379
2252
4
1379
2325
4
1379
2341
4
1379
2546
4
1379
2546
4
1379
2645
4
1379
2652
4
1379
2684
4
1379
2698
4
1379
2708
4
1379
2842
4
1379
2929
4
1379
2934
4
1379
3045
4
1379
3069
4
1379
669
4
1379
679
4
1379
691
4
1379
761
4
1379
949
4
1379
989
4
1379
1263
5
1379
1379
5
1379
1379
5
1379
1379
5
1379
1477
5
1379
2167
5
1379
2956
5
1379
3184
5
1379
669
5
1379
761
5
1379
1379
6
1379
1379
6
1379
1392
6
1379
1393
6
1379
2169
6
1379
2651
6
1379
.i
1380
.t
simula-an
algol-based
simulation
language
.w
this
paper
is
an
introduction
to
simula,
a
programming
language
designed
to
provide
a
systems
analyst
with
unified
concepts
which
facilitate
the
concise
description
of
discrete
event
systems.
a
system
description
also
serves
as
a
source
language
simulation
program.
simula
is
an
extension
of
algol
60
in
which
the
most
important
new
concepts
is
that
of
quasi-parallel
processing.
.b
cacm
september,
1966
.a
dahl,
o.
j.
nygaard,
k.
.n
ca660907
jb
march
2,
1978
6:21
pm
.x
1024
4
1380
1051
4
1380
1086
4
1380
1098
4
1380
1132
4
1380
1214
4
1380
1234
4
1380
1263
4
1380
1265
4
1380
1270
4
1380
1323
4
1380
1323
4
1380
1358
4
1380
1358
4
1380
1379
4
1380
1380
4
1380
1380
4
1380
1380
4
1380
1380
4
1380
1388
4
1380
1393
4
1380
1453
4
1380
1464
4
1380
1484
4
1380
1485
4
1380
1487
4
1380
1491
4
1380
1498
4
1380
1549
4
1380
1552
4
1380
1570
4
1380
1613
4
1380
1614
4
1380
1665
4
1380
1693
4
1380
1781
4
1380
1781
4
1380
1781
4
1380
1787
4
1380
1825
4
1380
1854
4
1380
1860
4
1380
1860
4
1380
1878
4
1380
1946
4
1380
1957
4
1380
1989
4
1380
2060
4
1380
2083
4
1380
2112
4
1380
2168
4
1380
2178
4
1380
2179
4
1380
2252
4
1380
2325
4
1380
2341
4
1380
2534
4
1380
2541
4
1380
2546
4
1380
2645
4
1380
2652
4
1380
2684
4
1380
2698
4
1380
2723
4
1380
2733
4
1380
2820
4
1380
2842
4
1380
2857
4
1380
2929
4
1380
2934
4
1380
557
4
1380
3069
4
1380
3073
4
1380
3112
4
1380
3155
4
1380
669
4
1380
679
4
1380
691
4
1380
761
4
1380
949
4
1380
989
4
1380
1380
5
1380
1380
5
1380
1380
5
1380
1421
5
1380
1541
5
1380
1846
5
1380
2060
5
1380
2218
5
1380
3112
5
1380
3184
5
1380
731
5
1380
799
5
1380
106
6
1380
1358
6
1380
1380
6
1380
1380
6
1380
1380
6
1380
1380
6
1380
1380
6
1380
1421
6
1380
1424
6
1380
1469
6
1380
1477
6
1380
1484
6
1380
1491
6
1380
1572
6
1380
1572
6
1380
1728
6
1380
1751
6
1380
1752
6
1380
1810
6
1380
1826
6
1380
210
6
1380
1869
6
1380
1879
6
1380
1972
6
1380
2095
6
1380
2110
6
1380
2438
6
1380
2723
6
1380
2736
6
1380
2833
6
1380
2838
6
1380
576
6
1380
731
6
1380
.i
1381
.t
impact
of
computers
on
the
undergraduate
mathematics
curriculum
.w
the
use
of
computers
to
permit
the
widespread
application
of
mathematical
ideas
requiring
computation
in
science
and
technology
is
extremely
significant
for
the
understanding
of
our
current
society.
student
interest
in
this
development
is
intense
and
if
properly
utilized
should
yield
a
much
better
understanding
of
mathematical
concepts
as
well
as
the
ideas
of
programming
and
logical
structure
which
have
been
introduced
into
many
fields
by
the
use
of
computers.
the
present
paper
suggests
that
that
portion
of
the
undergraduate
mathematical
curriculum
which
is
preparation
for
the
use
of
mathematics
by
persons
who
are
not
professional
mathematicians
be
modified
to
include
the
extensions
and
clarifications
which
are
possible
because
of
computers.
an
early
introduction
to
programming
is
desirable
to
permit
a
continuing
use
of
automatic
computation
to
illustrate
and
clarify
mathematical
concepts.
following
the
calculus
equation
stage
an
intensive
introduction
to
numerical
analysis
should
be
added
to
the
current
curriculum.
in
addition
to
providing
competence
in
the
mostly
used
computing
techniques,
it
would
permit
a
more
sophisticated
utilization
of
the
advanced
mathematical
ideas
associated
with
complex
variables
and
transform
theories.
.b
cacm
september,
1966
.a
murray,
f.
j.
.n
ca660905
jb
march
2,
1978
6:31
pm
.x
1381
5
1381
1381
5
1381
1381
5
1381
.i
1382
.t
desired
computer
impact
on
undergraduate
mathematics
.w
three
matters
relating
to
the
theme
of
the
symposium
are
discussed
here.
the
author
examines
some
projections
concerning
the
supply
and
demand
for
mathematicians
in
the
united
states
through
the
mid-1970s,
comments
briefly
on
some
of
the
factors
which
may
influence
the
professional
activities
of
applied
mathematicians
over
the
next
several
years,
and
discusses
in
broad
terms
how
this
information
may
relate
to
the
undergraduate
training
of
mathematicians.
.b
cacm
september,
1966
.a
macon,
n.
.n
ca660904
jb
march
2,
1978
6:35
pm
.x
1382
5
1382
1382
5
1382
1382
5
1382
.i
1383
.t
implications
of
the
digital
computer
for
education
in
the
mathematical
sciences
.w
the
digital
computer
has
profoundly
altered
the
definition
of
what
is
interesting
in
mathematics.
the
importance
of
applied
logic
in
human
affairs
is
changed
by
the
existence
of
the
"logical
engine."
the
result
is
that
one
should
no
longer
think
in
terms
of
a
single
discipline
of
mathematics
but
in
terms
of
a
complex
of
mathematical
sciences.
.b
cacm
september,
1966
.a
givens,
w.
.n
ca660903
jb
march
2,
1978
6:39
pm
.x
1383
5
1383
1383
5
1383
1383
5
1383
2665
5
1383
1383
6
1383
1549
6
1383
.i
1384
.t
mathematics
for
undergraduate
computer
scientists
.w
the
mathematical
requirements
for
an
undergraduate
program
in
computer
science
are
a
subject
of
debate.
the
association
for
computing
machinery's
curriculum
committee,
however,
believes
that
these
requirements
are
essentially
the
same
as
the
mathematical
content
of
physical
sciences
undergraduate
programs.
the
committee
believes
that
these
requirements
should
assure
the
student
of
a
broad
mathematical
background
and
should
enable
him
to
take
a
wide
variety
of
courses
in
other
scientific
disciplines.
the
committee's
concern
is
to
develop
a
solid
scientific
approach
to
computer
science.
.b
cacm
september,1966
.a
atchison,
w.
f.
.n
ca660902
jb
march
2,
1978
6:46
pm
.x
1384
5
1384
1384
5
1384
1384
5
1384
.i
1385
.t
computer
technology
in
communist
china,
1956-1965
.w
based
on
information
from
translations
of
communist
chinese
news
items
and
periodical
literature
for
the
1965
period,
computer
technology
in
china
is
reviewed
under
the
following
headings:
(1)
initial
planning,
organization
and
educational
aspects
of
computer
technology
and
automation;
(2)
machine
development
progress:
two
major
specific
machines
in
1958-59,
with
soviet
aid;
a
vacuum
in
1960-64
due
to
the
withdrawal
of
soviet
aid;
then
presumably
all-chinese-made
machines
from
1965
to
the
present;
(3)
computer
applications;
(4)
the
trend
of
automation:
control
of
production
processes
rather
than
data
processing;
and
(5)
the
"yun
ch'ou
hsueh"
(science
of
operation
and
programming)
campaign
of
1958-60,
during
which
an
attempt
was
made
to
bring
concepts
such
as
linear
programming
to
ordinary
chinese
workers
and
peasants.
communist
china
is
adjudged
to
have
a
marginal
computer
capability,
with
most
of
its
machines
probably
being
of
a
binary
nature;
however,
a
turning
point
may
have
been
reached
in
mid-1965.
.b
cacm
september,
1966
.a
audette,
d.
g.
.n
ca660901
jb
march
2,
1978
6:59
pm
.x
1385
5
1385
1385
5
1385
1385
5
1385
.i
1386
.t
symbolic
factoring
of
polynomials
in
several
variables
.w
an
algorithm
for
finding
the
symbolic
factors
of
a
multi-variate
polynomial
with
integer
coefficients
is
presented.
the
algorithm
is
an
extension
of
a
technique
used
by
kronecker
in
a
proof
that
the
prime
factoring
of
any
polynomial
may
be
found
in
a
finite
number
of
steps.
the
algorithm
consists
of
factoring
single-variable
instances
of
the
given
polynomial
by
kronecker's
method
and
introducing
the
remaining
variables
by
interpolation.
techniques
for
implementing
the
algorithm
and
several
examples
are
discussed.
the
algorithm
promises
sufficient
power
to
be
used
efficiently
in
an
online
system
for
symbolic
mathematics.
.b
cacm
august,
1966
.a
jordan,
d.
e.
kain,
r.
y.
clapp,
l.
c.
.n
ca660812
jb
march
2,
1978
7:06
pm
.x
1396
5
1386
1386
5
1386
1386
5
1386
1386
5
1386
964
6
1386
1028
6
1386
1029
6
1386
1083
6
1386
1132
6
1386
1214
6
1386
1278
6
1386
1334
6
1386
1365
6
1386
1386
6
1386
1387
6
1386
1388
6
1386
1392
6
1386
1393
6
1386
1394
6
1386
1395
6
1386
1396
6
1386
1397
6
1386
1496
6
1386
284
6
1386
407
6
1386
3199
6
1386
3200
6
1386
3201
6
1386
3202
6
1386
3203
6
1386
3204
6
1386
561
6
1386
730
6
1386
.i
1387
.t
solution
of
systems
of
polynomial
equations
by
elimination
.w
the
elimination
procedure
as
described
by
williams
has
been
coded
in
lisp
and
formac
and
used
in
solving
systems
of
polynomial
equations.
it
is
found
that
the
method
is
very
effective
in
the
case
of
small
systems,
where
it
yields
all
solutions
without
the
need
for
initial
estimates.
the
method,
by
itself,
appears
in
appropriate,
however,
in
the
solution
of
large
systems
of
equation
due
to
the
explosive
growth
in
the
intermediate
equations
and
the
hazards
which
arise
when
the
coefficients
are
truncated.
a
comparison
is
made
with
difficulties
found
in
other
problems
in
non-numerical
mathematics
such
as
symbolic
integration
and
simplification.
.b
cacm
august,
1966
.a
moses,
j.
.n
ca660811
jb
march
2,
1978
7:11
pm
.x
1396
5
1387
1387
5
1387
1387
5
1387
1387
5
1387
1946
5
1387
878
6
1387
902
6
1387
964
6
1387
1028
6
1387
1029
6
1387
1083
6
1387
1093
6
1387
1132
6
1387
1177
6
1387
1214
6
1387
1278
6
1387
1334
6
1387
1365
6
1387
1386
6
1387
1387
6
1387
1387
6
1387
1388
6
1387
1392
6
1387
1393
6
1387
1393
6
1387
1394
6
1387
1395
6
1387
1396
6
1387
1397
6
1387
1496
6
1387
284
6
1387
360
6
1387
407
6
1387
3199
6
1387
3200
6
1387
3201
6
1387
3202
6
1387
3203
6
1387
3204
6
1387
561
6
1387
730
6
1387
731
6
1387
.i
1388
.t
automast:
automatic
mathematical
analysis
and
symbolic
translation
.w
a
procedure
for
numerically
solving
systems
of
ordinary
differential
equation
is
shown
to
also
generate
symbolic
solutions.
the
procedure
is
based
on
a
finite
taylor
series
expansion
that
includes
an
estimate
of
the
error
in
the
final
result.
a
computer
program
is
described
that
reads
in
a
system
of
such
equations
and
then
generates
the
expansions
for
all
of
the
dependent
variables.
the
expansions
are
determined
symbolically,
hence
any
non-numeric
parameters
in
the
original
equations
are
carried
automatically
into
the
final
expansions.
thus
the
exact
influence
of
any
parameters
on
the
problem
solution
can
be
easily
displayed.
.b
cacm
august,
1966
.a
ball,
w.
e.
berns,
r.
i.
.n
ca660810
jb
march
2,
1978
7:16
pm
.x
1024
4
1388
1051
4
1388
1098
4
1388
1214
4
1388
1223
4
1388
1380
4
1388
1388
4
1388
1388
4
1388
1393
4
1388
1485
4
1388
1487
4
1388
1549
4
1388
1570
4
1388
1878
4
1388
1946
4
1388
1957
4
1388
2168
4
1388
436
4
1388
2723
4
1388
2857
4
1388
3112
4
1388
1388
5
1388
1388
5
1388
1388
5
1388
1396
5
1388
405
5
1388
731
5
1388
964
6
1388
1028
6
1388
1029
6
1388
1083
6
1388
1132
6
1388
1214
6
1388
1278
6
1388
1334
6
1388
1365
6
1388
1386
6
1388
1387
6
1388
1388
6
1388
1392
6
1388
1393
6
1388
1394
6
1388
1395
6
1388
1396
6
1388
1397
6
1388
1496
6
1388
284
6
1388
407
6
1388
3199
6
1388
3200
6
1388
3201
6
1388
3202
6
1388
3203
6
1388
3204
6
1388
561
6
1388
730
6
1388
.i
1389
.t
a
programmer's
description
of
l^6
.w
bell
telephone
laboratories'
low-linked
list
language
l^6
(pronounced
"l-six")
is
a
new
programming
language
for
list
structure
manipulations.
it
contains
many
of
the
facilities
which
underlie
such
list
processors
as
ipl,
lisp,
comit
ad
snobol,
but
permits
the
user
to
get
much
closer
to
machine
code
in
order
to
write
faster-running
programs,
to
use
storage
more
efficiently
and
to
build
a
wider
variety
of
linked
data
structures.
.b
cacm
august,
1966
.a
knowlton,
k.
c.
.n
ca660809
jb
march
2,
1978
7:20
pm
.x
1389
4
1389
1552
4
1389
2162
4
1389
2435
4
1389
2596
4
1389
2768
4
1389
2845
4
1389
2902
4
1389
2955
4
1389
1184
5
1389
1389
5
1389
1389
5
1389
1389
5
1389
1860
5
1389
1957
5
1389
2155
5
1389
2162
5
1389
1184
6
1389
1366
6
1389
1389
6
1389
1389
6
1389
1389
6
1389
1389
6
1389
1421
6
1389
1496
6
1389
1626
6
1389
1641
6
1389
1785
6
1389
1786
6
1389
210
6
1389
1860
6
1389
378
6
1389
378
6
1389
2046
6
1389
2060
6
1389
3184
6
1389
731
6
1389
.i
1390
.t
convert
.w
a
programming
language
is
described
which
is
applicable
to
problems
conveniently
described
by
transformation
rules.
by
this
is
meant
that
patterns
may
be
prescribed,
each
being
associated
with
a
skeleton,
so
that
a
series
of
such
pairs
may
be
searched
until
a
pattern
is
found
which
matches
an
expression
to
be
transformed.
the
conditions
for
a
match
are
governed
by
a
code
which
also
allows
subexpressions
to
be
identified
and
eventually
substituted
into
the
corresponding
skeleton.
the
primitive
patterns
and
primitive
skeletons
are
described,
as
well
as
the
principle
which
allow
their
elaboration
in
to
more
complicated
patterns
and
skeletons.
the
advantages
of
the
language
are
that
it
allows
one
to
apply
transformation
rules
to
lists
and
arrays
as
easily
as
strings,
that
both
patterns
and
skeletons
may
be
defined
recursively,
and
that
as
a
consequence
programs
may
be
stated
quite
concisely.
.b
cacm
august,
1966
.a
guzman,
a.
mcintosh,
h.
v.
.n
ca660808
jb
march
2,
1978
7:32
pm
.x
1024
4
1390
1051
4
1390
1102
4
1390
1132
4
1390
1390
4
1390
1486
4
1390
1549
4
1390
1706
4
1390
1826
4
1390
1878
4
1390
378
4
1390
2060
4
1390
2155
4
1390
2168
4
1390
2719
4
1390
2723
4
1390
2838
4
1390
2842
4
1390
2855
4
1390
2879
4
1390
3077
4
1390
3080
4
1390
3106
4
1390
627
4
1390
106
4
1390
210
5
1390
1390
5
1390
1390
5
1390
1390
5
1390
.i
1391
.t
computer
experiments
in
finite
algebra
.w
a
medium-scale
programming
system
is
written
in
mad
and
fap
on
the
ibm
7094
to
manipulate
some
of
the
objects
of
modern
algebra:
finite
groups,
maps
and
sets
of
maps,
subsets
and
sets
of
subsets,
constant
integers
and
truth-values.
designed
to
operate
in
a
time-sharing
environment,
the
system
can
serve
as
a
teacher's
aid
to
the
undergraduate
student
of
modern
algebra,
as
well
as
for
the
working
scientist
or
engineer
wishing
to
familiarize
himself
with
the
subset.
.b
cacm
august,
1966
.a
maurer,
w.
d.
.n
ca660807
jb
march
2,
1978
7:36
pm
.x
1391
5
1391
1391
5
1391
1391
5
1391
1948
5
1391
1391
6
1391
1559
6
1391
.i
1392
.t
experience
with
formac
algorithm
design
.w
various
facets
of
the
design
and
implementation
of
mathematical
expression
manipulation
algorithms
are
discussed.
concrete
examples
are
provided
by
the
formac
expand
and
differentiation
algorithms,
a
basic
formac
utility
routine,
and
an
experiment
in
the
extraction
of
the
skeletal
structure
of
an
expression.
one
recurrent
theme
is
the
need
to
avoid
excessive
intermediate
expression
swell
in
order
to
minimize
core
storage
requirements.
although
many
details
from
the
formac
implementation
are
presented,
an
attempt
is
made
to
stress
principles
and
ideas
of
general
relevance
in
the
design
of
algorithms
for
manipulating
mathematical
expressions.
.b
cacm
august,
1966
.a
tobey,
r.
g.
.n
ca660806
jb
march
2,
1978
7:43
pm
.x
1028
4
1392
1216
4
1392
1392
4
1392
1396
4
1392
964
4
1392
1396
5
1392
1392
5
1392
1392
5
1392
1392
5
1392
2167
5
1392
561
5
1392
964
6
1392
1028
6
1392
1029
6
1392
1083
6
1392
1132
6
1392
1214
6
1392
1278
6
1392
1334
6
1392
1365
6
1392
1379
6
1392
1386
6
1392
1387
6
1392
1388
6
1392
1392
6
1392
1392
6
1392
1393
6
1392
1393
6
1392
1394
6
1392
1395
6
1392
1396
6
1392
1397
6
1392
1496
6
1392
284
6
1392
2169
6
1392
407
6
1392
3199
6
1392
3200
6
1392
3201
6
1392
3202
6
1392
3203
6
1392
3204
6
1392
561
6
1392
730
6
1392
.i
1393
.t
pm,
a
system
for
polynomial
manipulation
.w
pm
is
an
ibm
7094
program
system
for
formal
manipulation
of
polynomials
in
any
number
of
variables,
with
integral
coefficients
unrestricted
in
size.
some
of
the
formal
operations
which
can
be
performed
by
the
system
are
sums,
differences,
products,
quotients,
derivatives,
substitutions
and
greater
common
divisors.
pm
is
based
on
the
refco
iii
list
processing
system,
which
is
described
and
compared
with
the
lisp
and
slip
systems.
the
pm
subroutines
for
arithmetic
of
large
integers
are
described
as
constituting
an
independently
useful
subsystem.
pm
is
compared
with
the
alpak
system
in
several
respects,
including
the
choice
of
canonical
forms
for
polynomials.
a
new
algorithm
for
polynomial
greatest
common
divisor
calculation
is
mentioned,
and
exaples
are
included
to
illustrate
its
superiority.
.b
cacm
august,
1966
.a
collins,
g.
e.
.n
ca660805
jb
march
2,
1978
7:51
pm
.x
1024
4
1393
1050
4
1393
1051
4
1393
1098
4
1393
1214
4
1393
1380
4
1393
1388
4
1393
1393
4
1393
1393
4
1393
1393
4
1393
1485
4
1393
1487
4
1393
1549
4
1393
1549
4
1393
1570
4
1393
1878
4
1393
1946
4
1393
1957
4
1393
2023
4
1393
2168
4
1393
2723
4
1393
2857
4
1393
3112
4
1393
3112
4
1393
627
4
1393
106
5
1393
1393
5
1393
1393
5
1393
1393
5
1393
1396
5
1393
296
5
1393
1946
5
1393
2167
5
1393
2857
5
1393
731
5
1393
878
6
1393
902
6
1393
964
6
1393
1028
6
1393
1029
6
1393
1083
6
1393
1093
6
1393
1132
6
1393
1177
6
1393
1214
6
1393
1278
6
1393
1334
6
1393
1365
6
1393
1379
6
1393
1386
6
1393
1387
6
1393
1387
6
1393
1388
6
1393
1392
6
1393
1392
6
1393
1393
6
1393
1393
6
1393
1393
6
1393
1393
6
1393
1394
6
1393
1395
6
1393
1396
6
1393
1397
6
1393
1496
6
1393
284
6
1393
360
6
1393
2169
6
1393
407
6
1393
3199
6
1393
3200
6
1393
3201
6
1393
3202
6
1393
3203
6
1393
3204
6
1393
561
6
1393
730
6
1393
731
6
1393
731
6
1393
.i
1394
.t
computation
of
algebraic
properties
of
elementary
particle
reactions
using
a
digital
computer
.w
a
large
number
of
calculations
in
high-energy
elementary
particle
physics
involve
the
manipulation
of
complicated
algebraic
expressions
containing
both
tensor
and
noncommutative
matrix
quantities.
many
of
these
calculations
take
several
months
to
complete,
although
the
operations
involved
follow
straightforward
rules.
in
this
paper
a
program
is
described,
which
has
been
developed
in
lisp
for
solving
such
problems.
the
manner
in
which
these
problems
are
encountered
is
outlined,
and
their
representation
in
the
computer
discussed.
at
present,
about
six
months
of
human
work
takes
less
than
fifteen
minutes
on
an
ibm
7090.
limitations
of
the
present
system
and
future
plans
are
also
outlined.
.b
cacm
august,
1966
.a
hearn,
a.
c.
.n
ca660804
jb
march
2,
1978
7:58
pm
.x
1396
5
1394
1394
5
1394
1394
5
1394
1394
5
1394
964
6
1394
1028
6
1394
1029
6
1394
1083
6
1394
1132
6
1394
1214
6
1394
1278
6
1394
1334
6
1394
1365
6
1394
1386
6
1394
1387
6
1394
1388
6
1394
1392
6
1394
1393
6
1394
1394
6
1394
1395
6
1394
1396
6
1394
1397
6
1394
1496
6
1394
284
6
1394
407
6
1394
3199
6
1394
3200
6
1394
3201
6
1394
3202
6
1394
3203
6
1394
3204
6
1394
561
6
1394
730
6
1394
.i
1395
.t
on
the
implementation
of
ambit,
a
language
for
symbol
manipulation
.w
a
brief
description
is
given
of
the
implementation
technique
for
the
replacement
rule
of
the
ambit
programming
language.
the
algorithm
for
the
"ambit
scan"
and
an
example
of
its
application
are
given.
the
algorithm
is
applicable
to
other
members
of
the
family
of
string
transformation
languages
of
which
ambit
is
a
member,
and
it
provides
a
rationale
for
the
design
of
the
ambit
language.
.b
cacm
august,
1966
.a
christensen,
c.
.n
ca660803
jb
march
2,
1978
8:02
pm
.x
1396
4
1395
1395
4
1395
1395
4
1395
1706
4
1395
1180
5
1395
1396
5
1395
1395
5
1395
1395
5
1395
1395
5
1395
1395
5
1395
964
6
1395
1028
6
1395
1029
6
1395
1083
6
1395
1132
6
1395
1180
6
1395
1214
6
1395
1278
6
1395
1334
6
1395
1365
6
1395
1386
6
1395
1387
6
1395
1388
6
1395
1392
6
1395
1393
6
1395
1394
6
1395
1395
6
1395
1395
6
1395
1396
6
1395
1397
6
1395
1496
6
1395
284
6
1395
407
6
1395
3199
6
1395
3200
6
1395
3201
6
1395
3202
6
1395
3203
6
1395
3204
6
1395
561
6
1395
730
6
1395
.i
1396
.t
survey
of
formula
manipulation
.w
the
field
of
formula
manipulation
is
surveyed,
with
particular
attention
to
the
specific
capabilities
of
differentiation,
integration
and
the
supporting
capabilities
of
simplification,
displays
and
input/output
editing,
and
precision
arithmetic.
general
systems-both
batch
and
online-are
described.
finally,
some
programs
to
solve
specific
applications
are
discussed.
.b
cacm
august,
1966
.a
sammet,
j.
e.
.n
ca660802
jb
march
2,
1978
8:07
pm
.x
1028
4
1396
1028
4
1396
1083
4
1396
1083
4
1396
1214
4
1396
1216
4
1396
1216
4
1396
1216
4
1396
1278
4
1396
1278
4
1396
1334
4
1396
1347
4
1396
1347
4
1396
1347
4
1396
1392
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1395
4
1396
1444
4
1396
1536
4
1396
1624
4
1396
1767
4
1396
1781
4
1396
1787
4
1396
1860
4
1396
1945
4
1396
1945
4
1396
1946
4
1396
1946
4
1396
1988
4
1396
2167
4
1396
2167
4
1396
2229
4
1396
2252
4
1396
2857
4
1396
679
4
1396
964
4
1396
964
4
1396
964
5
1396
1028
5
1396
1029
5
1396
1083
5
1396
1132
5
1396
1214
5
1396
1278
5
1396
1334
5
1396
1388
5
1396
1393
5
1396
1396
5
1396
1396
5
1396
1396
5
1396
1396
5
1396
1392
5
1396
1395
5
1396
1397
5
1396
1365
5
1396
284
5
1396
1386
5
1396
1387
5
1396
1394
5
1396
1496
5
1396
1945
5
1396
407
5
1396
561
5
1396
3199
5
1396
3200
5
1396
3201
5
1396
3202
5
1396
3203
5
1396
3204
5
1396
730
5
1396
823
6
1396
914
6
1396
915
6
1396
917
6
1396
964
6
1396
984
6
1396
989
6
1396
990
6
1396
1012
6
1396
1028
6
1396
1029
6
1396
1083
6
1396
1084
6
1396
1098
6
1396
1122
6
1396
1132
6
1396
1138
6
1396
1139
6
1396
1141
6
1396
1200
6
1396
1214
6
1396
1223
6
1396
1265
6
1396
1278
6
1396
1334
6
1396
1336
6
1396
1365
6
1396
1386
6
1396
1387
6
1396
1388
6
1396
1392
6
1396
1393
6
1396
1394
6
1396
1395
6
1396
1396
6
1396
1396
6
1396
1397
6
1396
1455
6
1396
1477
6
1396
1487
6
1396
1491
6
1396
1496
6
1396
1496
6
1396
284
6
1396
407
6
1396
483
6
1396
3199
6
1396
3200
6
1396
3201
6
1396
3202
6
1396
3203
6
1396
3204
6
1396
561
6
1396
584
6
1396
669
6
1396
680
6
1396
730
6
1396
763
6
1396
.i
1397
.t
proceedings
of
the
acm
symposium
on
symbolic
and
algebraic
manipulation
.w
the
acm
symposium
on
symbolic
and
algebraic
manipulation
brought
together
over
four
hundred
people
interested
in
programming
languages
designed
for
manipulation
of
algebraic
formulas
and
symbol
strings,
in
their
applications,
and
in
algorithms
for
their
implementation.
twenty-eight
papers
were
presented,
followed
by
a
lively
panel
discussion
of
future
directions.
evening
meetings
were
arranged
for
several
interest
groups.
the
conference
was
sponsored
by
the
acm
special
interest
committee
on
symbolic
and
algebraic
manipulation.
the
program
committee
consisted
of
chairman
jean
e.
sammet,
paul
abrahams,
thomas
e.
cheatham,
max
goldstein,
and
douglas
mcllroy.
conference
arrangements
were
made
by
lewis
c.
clapp,
daniel
bobrow
and
james
h.
griesmer.-robert
w.
floyd,
editor
.b
cacm
august,
1966
.n
ca660801
jb
march
2,
1978
8:17
pm
.x
1397
4
1397
2704
4
1397
1247
5
1397
1396
5
1397
1397
5
1397
1397
5
1397
1397
5
1397
964
6
1397
1028
6
1397
1029
6
1397
1083
6
1397
1132
6
1397
1214
6
1397
1278
6
1397
1334
6
1397
1365
6
1397
1386
6
1397
1387
6
1397
1388
6
1397
1392
6
1397
1393
6
1397
1394
6
1397
1395
6
1397
1396
6
1397
1397
6
1397
1496
6
1397
284
6
1397
407
6
1397
3199
6
1397
3200
6
1397
3201
6
1397
3202
6
1397
3203
6
1397
3204
6
1397
561
6
1397
730
6
1397
.i
1398
.t
robot
data
screening:
a
solution
to
multivariate
type
problems
in
the
biological
and
social
sciences
.w
a
new
approach
is
outlined
toward
the
solution
of
the
type
of
multivariate
problem
that
is
found
usually
in
the
biological
and
social
sciences
as
well
as
in
medicine.
this
approach
uses
a
"logical"
rather
than
a
"statistical"
criterion
by
which
variables
are
grouped
into
a
deterministic
model.
algorithm
are
developed
by
which
some
variables
are
kept
on
for
further
analysis
while
others
are
eliminated.
criteria
for
the
acceptance
of
a
variable
as
well
as
the
termination
of
the
searching
process
are
derived
from
information
theory.
.b
cacm
july,
1966
.a
sterling,
t.
gleser,
m.
haberman,
s.
pollack,
s.
.n
ca660714jb
march
2,
1978
8:26
pm
.x
1398
5
1398
1398
5
1398
1398
5
1398
.i
1399
.t
on
top-to-bottom
recognition
and
left
recursion
.w
a
procedure
is
given
for
obtaining
structural
descriptions
in
a
context-free
grammar
by
performing
the
recognition
according
to
a
strongly
equivalent,
left-recursion-freegrammar.
the
effect
of
allowing
null
strings
in
the
rewriting
rules
is
discussed.
.b
cacm
july,
1966
.a
kurki-suonio,
r.
.n
ca660713
jb
march
2,
1978
8:29
pm
.x
1350
4
1399
1399
4
1399
1659
4
1399
1768
4
1399
1781
4
1399
1945
4
1399
2110
4
1399
3094
4
1399
1265
5
1399
1350
5
1399
1399
5
1399
1399
5
1399
1399
5
1399
1012
6
1399
1225
6
1399
1265
6
1399
1399
6
1399
680
6
1399
.i
1400
.t
free-text
inputs
to
utility
routines
.w
through
the
use
of
some
rather
simple
techniques,
it
is
frequently
possible
to
produce
a
program
which
will
accept
free-text
inputs.
the
techniques
are
discussed
and
related
to
a
general
tape
manipulation
routine.
.b
cacm
july,
1966
.a
blum,
r.
i.
.n
ca660712
jb
march
2,
1978
8:32
pm
.x
1400
4
1400
1553
4
1400
1945
4
1400
2127
4
1400
2396
4
1400
2730
4
1400
1400
5
1400
1400
5
1400
1400
5
1400
1487
5
1400
.i
1401
.t
quasilinearization
and
the
calculation
of
eigenvalues
.w
several
eigenvalue
problems
for
systems
of
ordinary
differential
equations
are
considered.
they
are
resolved
computationally
using
the
quasilinerization
technique,
a
quadratically
convergent
successive
approximation
scheme
related
to
the
newton-raphson-kantorovich
method.
.b
cacm
july,
1966
.a
bellman,
r.,
kagiwada,
h.
kalaba,
r.
.n
ca660711
jb
march
2,
1978
8:40
pm
.x
1401
5
1401
1401
5
1401
1401
5
1401
1766
5
1401
1401
6
1401
.i
1402
.t
partial
step
integration
.w
a
partial
step
integration
equation
is
derived
for
use
with
the
adams
or
adams-bashforth
method
of
integration
of
differential
equations.
this
method
of
obtaining
functional
values
at
points
intermediate
to
the
integration
points
yields
accuracy
comparable
to
the
integration
and
does
not
require
storing
of
additional
information
as
in
interpolation
methods.
.b
cacm
july,
1966
.a
glauz,
r.
d.
.n
ca660710
jb
march
2,
1978
9:08
pm
.x
1402
5
1402
1402
5
1402
1402
5
1402
.i
1403
.t
a
method
for
finding
the
m
smallest
values
of
a
monotonic
function
defined
on
ordered
sets
of
positive
integers
.w
the
minimum
value
of
a
monotonic
increasing
function
defined
on
a
partially
ordered
set
s
is
assumed
on
the
set
of
minimal
points
of
s.
this
observation
is
used
to
devise
an
efficient
method
for
finding
the
m
smallest
functional
values
of
monotonic
functions
defined
on
ordered
pairs
of
positive
integers.
the
method
is
easily
extended
to
include
monotonic
functions
defined
on
ordered
n-tuples.
included
is
a
fortran
program
which
was
written
to
implement
the
procedure
for
a
certain
important
case.
.b
cacm
july,
1966
.a
sigillito,
v.
g.
.n
ca660709
jb
march
2,
1978
9:13
pm
.x
1403
5
1403
1403
5
1403
1403
5
1403
.i
1404
.t
computational
aspects
of
multiple
covariance
analysis
on
a
multifactor
structure
.w
the
computational
procedure
for
the
analysis
of
multiple
covariance
in
statistics
is
discussed
with
reference
to
the
analysis
of
variance.
a
special
operator
calculus
developed
by
hartly
for
programming
analysis
of
variance
for
multifactor
experiments
is
extended
to
cover
the
analysis
of
covariance.
this
extension
is
accomplished
by
utilizing
the
connection
between
the
analysis
of
covariance
and
the
analysis
of
variance
and
by
introducing
a
new
operator.
the
results
are
illustrated
by
a
numerical
example
for
analysis
of
covariance,
in
which
the
basic
computations
are
shown
to
be
carried
out
by
an
analysis-of-variance
program.
.b
cacm
july,
1966
.a
peng,
k.
c.
.n
ca660708
jb
march
2,
1978
9:18
pm
.x
1404
4
1404
1045
5
1404
1404
5
1404
1404
5
1404
1404
5
1404
.i
1405
.t
matrix
triangulation
with
integer
arithmetic
(algorithm
287
[f1])
.b
cacm
july,
1966
.a
blankinship,
w.
a.
.n
ca660707a
jb
march
2,
1978
9:20
pm
.x
1405
5
1405
1405
5
1405
1405
5
1405
.i
1406
.t
solution
of
simultaneous
linear
diophantine
equations
(algorithm
288
[f4])
.b
cacm
july,
1966
.a
blankinship,
w.
a.
.n
ca660707b
jb
march
23,
1978
7:06
pm
.x
1406
5
1406
1406
5
1406
1406
5
1406
.i
1407
.t
confidence
interval
for
a
ratio
(algorithm
289
[g1])
.b
cacm
july,
1966
.a
hill,
i.
d.
pike,
m.
c.
.n
ca660707c
jb
march
23,
1978
7:07
pm
.x
1407
5
1407
1407
5
1407
1407
5
1407
.i
1408
.t
the
eschenbach
drum
scheme
.w
the
prime
function
of
a
drum,
operating
in
real
time,
is
to
perform
accesses
quickly.
the
usual
means
for
increasing
this
capacity
is
to
incorporate
engineering
or
hardware
improvements.
in
this
paper
the
problem
is
attacked
not
by
changing
the
drum,
but
rather
by
modifying
the
manner
in
which
it
operates.
at
the
outset,
a
drum
is
given
a
functional
definition.
then
a
simple
design
scheme
(eschenbach)
is
introduced
which
enormously
increases
the
rate
of
accessing
for
drums
so
defined.
this
is
shown
to
enable
a
system
to
perform
a
job
by
employing
fewer
or
less
expensive
drums.
it
is
suggested
that
although
the
design
scheme
has
a
specific
use,
the
method
underlying
it
has
more
general
applicability.
the
question
of
the
efficacy
of
the
drum
scheme
is
then
raised.
to
deal
with
this,
a
standard
of
efficiency
is
developed
in
light
of
realistic
real-time
circumstances.
the
drum
scheme
is
then
modelled
in
a
manner
which
permits
it
to
be
analyzed
as
a
problem
in
queueing
theory.
thus
one
is
enabled
to
ascertain
whether
the
drum
scheme
is
efficient
enough
for
its
application.
again,
whereas
the
analysis
of
the
drum
scheme
has
a
specific
use,
the
methods
underlying
it
have
more
general
applicability.
.b
cacm
july,
1966
.a
weingarten,
a.
.n
ca660706
jb
march
2,
1978
9:29
pm
.x
1408
5
1408
1408
5
1408
1408
5
1408
2319
5
1408
1408
6
1408
1719
6
1408
1749
6
1408
1751
6
1408
2016
6
1408
2017
6
1408
2080
6
1408
2188
6
1408
2203
6
1408
2204
6
1408
.i
1409
.t
nebula:
a
digital
computer
using
a
20
mc
glass
delay
line
memory
.w
oregon
state
university
has
designed
and
constructed
a
medium-speed
serial
digital
computer
using
glass
delay
lines
circulating
at
22
mc
as
memory.
the
design
objectives
as
originally
conceived
in
a
special
seminar
were:
(1)
to
be
a
research
project
in
computer
design;
(2)
to
be
usable
as
an
educational
machine;and
(3)
to
have
easily
modifiable
hardware
for
basic
research
in
computer
systems
design.
an
unusual
arrangement
of
information
within
the
22
mc
memory
allows
a
simple
interface
with
the
340
kc
arithmetic
unit,
which
results
in
an
effective
zero
latency
time
and
provides
possibilities
for
an
associative
memory.
the
arithmetic
unit
has
a
command
structure
similar
to
large
parallel
machines,
and
uses
flip-flop
arithmetic
and
control
registers
throughout.
all
hardware
development
has
been
aimed
toward
the
concept
of
easy
modification,
elaborate
console
controls
for
effective
man-machine
interaction
and
low
cost.
.b
cacm
july,
1966
.a
boles,
j.
a.
rux,
p.
t.
weingarten
jr.,
f.
w.
.n
ca660705
jb
march
2,
1978
9:35
pm
.x
1409
4
1409
1208
5
1409
1409
5
1409
1409
5
1409
1409
5
1409
.i
1410
.t
interarrival
statistics
for
time
sharing
systems
.w
the
optimization
of
time-shared
system
performance
requires
the
description
of
the
stochastic
processes
governing
the
user
inputs
and
the
program
activity.
this
paper
provides
a
statistical
description
of
the
user
input
process
in
the
sdc-arpa
general-purpose
time-sharing
system
(tss).
the
input
process
is
assumed
to
be
stationary,
and
to
be
defined
by
the
interarrival
time
distribution.
the
data
obtained
appear
to
justify
satisfactorily
the
common
assumption
that
the
interarrival
times
are
serially
independent.
the
data
do
not
appear
to
justify,
except
as
a
very
rough
approximation,
the
usual
assumption
off
an
exponential
distribution
for
interarrival
time.
a
much
more
satisfactory
approximation
to
the
data
can
be
obtained
with
a
biphase
or
triphase
hyperexponential
distribution.
.b
cacm
july,
1966
.a
coffman,
e.
g.
wood,
r.
c.
.n
ca660704
jb
march
2,
1978
9:45
pm
.x
1410
5
1410
1410
5
1410
1410
5
1410
1604
5
1410
1951
5
1410
2373
5
1410
1224
6
1410
1410
6
1410
1410
6
1410
1410
6
1410
1604
6
1410
1751
6
1410
1810
6
1410
1951
6
1410
2374
6
1410
.i
1411
.t
comparison
of
several
algorithms
for
computation
of
means,
standard
deviations
and
correlation
coefficients
.w
several
algorithms
for
computation
of
basic
statistics
are
compared
by
their
performance
on
systematically
generated
test
data.
the
statistics
calculated
were
the
mean,
standard
deviation
and
correlation
coefficient.
for
each
statistic,
the
algorithm
included
the
usual
computing
formulas,
correction
due
to
an
accumulated
error
term,
and
a
recursive
computation
of
the
current
value
of
the
statistic.
the
usual
computing
formulas
were
also
evaluated
in
double
precision.
large
errors
were
noted
for
some
calculation
using
the
usual
computing
formulas.
the
most
reliable
technique
was
correction
of
the
initial
estimate
by
use
of
an
accumulated
error
term.
to
eliminate
the
need
for
making
two
passes
on
the
data,
it
was
suggested
that
the
initial
estimate
of
the
mean
be
obtained
from
a
subset
of
the
data.
.b
cacm
july,
1966
.a
neely,
p.
m.
.n
ca660703
jb
march
6,
1978
2:54
pm
.x
1411
5
1411
1411
5
1411
1411
5
1411
1619
5
1411
3166
5
1411
1411
6
1411
1411
6
1411
2731
6
1411
2799
6
1411
3159
6
1411
3167
6
1411
.i
1412
.t
the
banking
information
system
concept
.w
most
large
commercial
banks
have
progressed
to
the
point
where
their
major
accounting
applications
have
been
automated
and
more
sophisticated
usage
of
data
processing
equipment
is
being
sought.
this,
coupled
with
the
availability
of
equipment
well
suited
to
real-time,
direct
access
processing,has
led
to
development
within
some
banks
of
the
central
file
of
data
base
approach
toward
a
banking
information
system.
the
banking
information
system
now
serves
the
two-fold
purpose
of
providing
real-time
responses
to
inquires
about
individual
account
stasus
and
providing
more
complex
combinations
of
information
for
management
use.
both
kinds
of
processing
draw
upon
a
common
store
of
data
contained
in
the
direct
access
central
file.
this
data
base
includes
indexes
which
facilitate
cross
referencing
of
account
information
so
that
all
relationships
between
bank
and
customer
may
be
discerned.
in
introducing
the
banking
information
system
concept,
a
gradual
approach
to
account
cross-referencing
and
file
conversion
is
most
prudent.
generally,
this
system
must
interface
with
other
computer
applications
already
existing
within
the
bank.
.b
cacm
july,
1966
.a
head,
r.
v.
.n
ca660702
jb
march
2,
1978
9:53
pm
.x
1412
5
1412
1412
5
1412
1412
5
1412
.i
1413
.t
a
vision
of
technology
and
education
.w
educational
technology
is
currently
quite
fashionable.
here,
as
in
many
other
branches
or
aspects
of
technology,
changes
possible
in
the
next
generation
or
two
are
now
known
as
ideas,
discoveries
or
inventions.
the
unknown
is
whether
the
potential
will
become
the
actual
and,
if
so,
on
what
time
scale.
this
ignorance
stems
largely
from
ignorance
about
the
social
response
to
potential
technological
change.
the
object
of
this
paper
is
to
present
a
vision
of
potential
educational
technology
and
to
raise
questions
about
the
modes
of
social
response
and
adaptation
likely
to
be
evoked
by
such
a
vision.
.b
cacm
july,
1966
.a
oettinger,
a.
g.
.n
ca660701
jb
march
3,
1978
8:38
am
.x
1413
4
1413
1413
4
1413
1654
4
1413
1771
4
1413
1902
4
1413
2478
4
1413
1205
5
1413
1270
5
1413
1413
5
1413
1413
5
1413
1413
5
1413
.i
1414
.t
twelve-row
punched-card
code
for
information
interchange*
(proposed
american
standard)
.b
cacm
june,
1966
.n
ca660607
jb
march
3,
1978
8:39
am
.x
1414
5
1414
1414
5
1414
1414
5
1414
.i
1415
.t
automatic
derivation
of
microsentences
.w
the
decomposition
of
long
complex
english
sentences
into
shorter
kernel-like
constituent
sentences
(microsentences)has
often
been
suggested
as
an
avenue
toward
conducting
automatic
retrieval
of
natural
language
messages.
to
explore
the
prospects
of
such
a
step,
the
authors
attempted
in
1963
to
prepare
a
general
program
for
deriving
microsentences
from
longer
sentences
that
had
been
syntactically
analyzed
by
the
harvard
multipath
analysis
program.
the
basic
idea
was
to
extract
the
subject,
verb
and
object
(if
any)
of
each
clause
and
to
reassemble
these
materials
into
a
grammatical
microsentence.
a
program
is
described
in
this
paper,
which
was
designed
to
operate
on
the
tree
structure
output
of
the
analyzer,
and
the
microsentences
that
were
produced
are
exhibited.
the
authors
conclude
that
while
microsentences
of
the
quality
achieved
do
not
open
up
immediate
prospects
for
improving
the
performance
of
automatic
message
retrieval
systems,
they
may
have
practical
value
in
man-machine
systems
using
human
monitors
to
select
the
preferred
syntactic
interpretation
of
a
sentence.
.b
cacm
june,
1966
.a
carmody,
b.
t
jones
jr.,
p.
e.
.n
ca660606
jb
march
3,
1978
8:47
am
.x
1415
5
1415
1415
5
1415
1415
5
1415
.i
1416
.t
a
fortran
technique
for
simplifying
input
to
report
generators
.w
typical
report
generators
allow
the
production
of
standard
forms
when
tabulating
a
magnetic
tape
file;
the
extraction
of
nonstandard
sets
of
information,
with
suitable
annotation,
involves
troublesome
forms
design.
a
method
of
information
extraction
involving
the
calculation
of
suitable
fortran
format
statements,
which
combats
this
problem,
is
described.
.b
cacm
june,
1966
.a
cleary,
j.
g.
.n
ca660605
jb
march
3,
1978
8:53
am
.x
1416
5
1416
1416
5
1416
1416
5
1416
.i
1417
.t
economies
of
scale
and
the
ibm
system/360
.w
cost
functions
among
five
system/360
models
are
analyzed
through
examinations
of
instruction
times,
program
kernels
and
a
"typical"
instruction
mix.
comparisons
are
made
between
the
data
developed
here
and
grosch's
law
which
seems
to
be
applicable
to
much
of
the
data.
sizable
economies
of
scale
are
unquestionably
present
in
computing
equipment.
.b
cacm
june,
1966
.a
solomon
jr.,
m.
b.
.n
ca660604
jb
march
3,
1978
8:57
am
.x
1417
5
1417
1417
5
1417
1417
5
1417
1653
5
1417
2387
5
1417
2852
5
1417
963
6
1417
1069
6
1417
1417
6
1417
1417
6
1417
1417
6
1417
1771
6
1417
2345
6
1417
2387
6
1417
2479
6
1417
3190
6
1417
.i
1418
.t
examination
scheduling
(algorithm
286
[zh])
.b
cacm
june,
1966
.a
peck,
j.
e.
l.
williams,
m.
r.
.n
ca660603a
jb
march
3,
1978
8:58
am
.x
1418
5
1418
1418
5
1418
1418
5
1418
2350
5
1418
2354
5
1418
2355
5
1418
1418
6
1418
1418
6
1418
1418
6
1418
1521
6
1418
1521
6
1418
1597
6
1418
1597
6
1418
1679
6
1418
1883
6
1418
2040
6
1418
2350
6
1418
2350
6
1418
2354
6
1418
2354
6
1418
2355
6
1418
2355
6
1418
.i
1419
.t
chebyshev
quadrature
(algorithm
279
[d1])
.b
cacm
june,
1966
.a
hopgood,
f.
r.
a.
litherland,
c.
.n
ca660603b
jb
march
23,
1978
7:09
pm
.x
1355
5
1419
1419
5
1419
1419
5
1419
1419
5
1419
2619
5
1419
1419
6
1419
1419
6
1419
1429
6
1419
.i
1420
.t
a
new
uniform
pseudorandom
number
generator
.w
a
new
multiplicative
congruential
pseudorandom
number
generator
is
discussed,
in
which
the
modulus
is
the
largest
prime
within
accumulator
capacity
and
the
multiplier
is
a
primitive
root
of
that
prime.
this
generator
passes
the
usual
statistical
tests
and
in
addition
the
least
significant
bits
appear
to
be
as
random
as
the
most
significant
bits-a
property
which
generators
having
modulus
2^k
do
not
possess.
.b
cacm
june,
1966
.a
hutchinson,
d.
w.
.n
ca660602
jb
march
3,
1978
9:01
am
.x
1420
5
1420
1420
5
1420
1420
5
1420
1691
5
1420
1293
6
1420
1420
6
1420
1631
6
1420
.i
1421
.t
a
contribution
to
the
development
of
algol
.w
a
programming
language
similar
in
many
respects
to
algol
60,
but
incorporating
a
large
number
of
improvements
based
on
six
years
experience
with
that
language,
is
described
in
detail.
part
i
consists
of
an
introduction
to
the
new
language
and
a
summary
of
the
changes
made
to
algol
60,
together
with
a
discussion
of
the
motives
behind
there
visions.
part
ii
is
a
rigorous
definition
of
the
proposed
language.
part
iii
describes
a
set
of
proposed
standard
procedures
to
be
used
with
the
language,
including
facilities
for
input/output.
.b
cacm
june,
1966
.a
wirth,
n.
hoare,
c.
a.
r.
.n
ca660601
jb
march
3,
1978
9:07
am
.x
1380
5
1421
1421
5
1421
1421
5
1421
1421
5
1421
1552
5
1421
1693
5
1421
1781
5
1421
1854
5
1421
1860
5
1421
2060
5
1421
557
5
1421
123
6
1421
196
6
1421
919
6
1421
990
6
1421
1007
6
1421
1046
6
1421
1131
6
1421
1139
6
1421
1140
6
1421
1149
6
1421
1184
6
1421
1198
6
1421
1215
6
1421
1223
6
1421
1265
6
1421
1303
6
1421
1323
6
1421
1358
6
1421
1366
6
1421
1366
6
1421
1380
6
1421
1389
6
1421
1421
6
1421
1421
6
1421
1421
6
1421
1421
6
1421
1421
6
1421
1421
6
1421
1421
6
1421
1421
6
1421
1460
6
1421
1462
6
1421
1463
6
1421
1467
6
1421
1468
6
1421
1469
6
1421
1471
6
1421
1477
6
1421
1477
6
1421
1477
6
1421
1491
6
1421
1491
6
1421
1491
6
1421
1496
6
1421
1496
6
1421
1531
6
1421
1535
6
1421
1565
6
1421
1601
6
1421
1602
6
1421
1613
6
1421
1614
6
1421
1614
6
1421
1626
6
1421
1626
6
1421
1641
6
1421
1641
6
1421
1748
6
1421
1749
6
1421
1785
6
1421
1786
6
1421
1787
6
1421
1788
6
1421
205
6
1421
210
6
1421
224
6
1421
249
6
1421
1869
6
1421
288
6
1421
316
6
1421
378
6
1421
378
6
1421
381
6
1421
398
6
1421
2110
6
1421
11
6
1421
404
6
1421
410
6
1421
463
6
1421
464
6
1421
483
6
1421
3184
6
1421
3184
6
1421
3184
6
1421
3188
6
1421
584
6
1421
600
6
1421
680
6
1421
691
6
1421
731
6
1421
763
6
1421
799
6
1421
799
6
1421
.i
1422
.t
eleven-sixteenths
inch
perforated
paper
tape
(proposed
american
standard)
.b
cacm
may,
1966
.n
ca660515
jb
march
3,
1978
9:09
am
.x
1422
5
1422
1422
5
1422
1422
5
1422
.i
1423
.t
a
simple
algorithm
for
computing
the
generalized
inverse
of
a
matrix
.w
the
generalized
inverse
of
a
matrix
is
important
in
analysis
because
it
provides
an
extension
of
the
concept
of
an
inverse
which
applies
to
all
matrices.
it
also
has
many
applications
in
numerical
analysis,
but
it
is
not
widely
used
because
the
existing
algorithms
are
fairly
complicated
and
require
considerable
storage
space.
a
simple
extension
has
been
found
to
the
conventional
orthogonalization
method
for
inverting
non-singular
matrices,
which
gives
the
generalized
inverse
with
little
extra
effort
and
with
no
additional
storage
requirements.
the
algorithm
gives
the
generalized
inverse
for
any
m
by
n
matrix
a,
including
the
special
case
when
m+n
and
a
is
non-singular
and
the
case
when
m>n
and
rank(a)
=
n.
in
the
first
case
the
algorithm
gives
the
ordinary
inverse
of
a.
in
the
second
case
the
algorithm
yields
the
ordinary
least
squares
transformation
matrix
inv(a'a)a'
and
has
the
advantage
of
avoiding
the
loss
of
significance
which
results
in
forming
the
product
a'a
explicitly.
.b
cacm
may,
1966
.a
rust,
r.
burrus,
w.
r.
schneeberger,
c.
.n
ca660514
jb
march
3,
1978
9:22
am
.x
1423
5
1423
1423
5
1423
1423
5
1423
.i
1424
.t
automatic
analysis
of
electronic
digital
circuits
using
list
processing
.w
a
mapping
from
black
diagrams
of
digital
circuits
to
list
structures
is
described,
together
with
a
list
processing
program
written
for
the
control
data
3600
which
uses
this
mapping
to
automatically
carry
out
circuit
analysis.
.b
cacm
may,
1966
.a
shalla,
l.
.n
ca660513
jb
march
3,
1978
9:24
am
.x
1424
5
1424
1424
5
1424
1424
5
1424
1846
5
1424
1380
6
1424
1424
6
1424
1484
6
1424
1572
6
1424
576
6
1424
.i
1425
.t
flow
diagrams,
turing
machines
and
languages
with
only
two
formation
rules
.w
in
the
first
part
of
the
paper,
flow
diagrams
are
introduced
to
represent
inter
al.
mappings
of
a
set
into
itself.
although
not
every
diagram
is
decomposable
into
a
finite
number
of
given
base
diagrams,
this
becomes
true
at
a
semantical
level
due
to
a
suitable
extension
of
the
given
set
and
of
the
basic
mappings
defined
in
it.
two
normalization
methods
of
flow
diagrams
are
given.
the
first
has
three
base
diagrams;
the
second,
only
two.
in
the
second
part
of
the
paper,
the
second
method
is
applied
to
the
theory
of
turing
machines.
with
every
turing
machine
provided
with
a
two-way
half-tape,
there
is
associated
a
similar
machine,
doing
essentially
the
same
job,
but
working
on
a
tape
obtained
from
the
first
one
by
interspersing
alternate
blank
squares.
the
new
machine
belongs
to
the
family,
elsewhere
introduced,
generated
by
composition
and
iteration
from
the
two
machines
l
and
r.
that
family
is
a
proper
subfamily
of
the
whole
family
of
turing
machines.
.b
cacm
may,
1966
.a
bohm,
c.
jacopini,
g.
.n
ca660512
jb
march
3,
1978
9:35
am
.x
1425
4
1425
1781
4
1425
438
4
1425
762
4
1425
249
5
1425
1425
5
1425
1425
5
1425
1425
5
1425
2709
5
1425
2802
5
1425
3004
5
1425
1425
6
1425
1425
6
1425
1425
6
1425
2138
6
1425
2204
6
1425
2247
6
1425
2356
6
1425
2456
6
1425
2456
6
1425
2477
6
1425
3186
6
1425
.i
1426
.t
a
simulation
of
hospital
admission
policy
.w
a
study
is
described
which
simulates
different
admission
policies
of
a
large
specialized
hospital.
the
objective
is
to
determine
better
policies
for
stabilization
of
admission
and
census
rates
while
maintaining
a
reasonably
full
hospital.
there
types
of
policies
were
examined:
admission
based
on
percentages
of
discharge
rates,
discharge
rates
plus
or
minus
a
constant,
and
fixed
authorizations
independent
of
discharge
rates.
the
last
type
policy
produced
more
stable
simulated
results,
and
when
put
into
practice,
improvements
were
realized.
.b
cacm
may,
1966
.a
smith,
w.
g.
solomon
jr.,
m.
b.
.n
ca660511
jb
march
3,
1978
9:42
am
.x
1426
5
1426
1426
5
1426
1426
5
1426
.i
1427
.t
simulation
of
radioisotope
scans
by
computer
.w
in
radioisotope
scanning,
a
field
which
is
assuming
increasing
importance
in
medical
diagnosis,
the
scan
is
a
two-dimensional
pattern
made
up
of
dots.
areas
of
increased
source
activity
are
represented
on
the
scan
by
areas
of
increased
dot
density.
to
study
the
output
of
scanners
with
various
characteristics,
a
program
which
simulates
radioisotope
scans
has
been
written
for
a
pdp-1
computer
with
auxiliary
disk
storage
and
cathode
ray
tube
display.
past
and
present
research
using
the
output
of
the
simulator
has
shown
the
flexibility
of
the
system
to
be
important.
the
structure
of
this
program
can
be
useful
in
the
simulation
of
the
output
of
any
quantum-limited
system.
.b
cacm
may,
1966
.a
pizer,
s.
m.
.n
ca660510
jb
march
3,
1978
9:47
am
.x
1427
5
1427
1427
5
1427
1427
5
1427
.i
1428
.t
shock
iii,
a
computer
system
as
an
aid
in
the
management
of
critically
iii
patients
.w
shock
iii,
an
online
digital
computer
system
to
assist
the
physician,
nurse
and
paramedical
personnel
in
monitoring
and
reporting
on
critically
ill
patients,
is
described.
.b
cacm
may,
1966
.a
rockwell
jr.,
m.
a.
shubin,
h.
weil,
m.
h.
meagher,
p.
f.
.n
ca660509
jb
march
3,
1978
9:49
am
.x
1428
5
1428
1428
5
1428
1428
5
1428
.i
1429
.t
matrix
reduction
using
the
hungarian
method
for
the
generation
of
school
timetables
.w
the
application
of
kuhn's
hungarian
method
to
the
problem
of
matrix
reduction
as
needed
in
gotlieb's
method
for
timetable
generation
is
described.
the
method
is
suited
to
both
hand
and
computer
calculation.
devices
to
improve
the
efficiency
of
the
basic
algorithm
are
discussed.
.b
cacm
may,
1966
.a
lions,
j.
.n
ca660508
jb
march
3,
1978
9:52
am
.x
1429
5
1429
1429
5
1429
1429
5
1429
2619
5
1429
2772
5
1429
2787
5
1429
1116
6
1429
1116
6
1429
1419
6
1429
1429
6
1429
1429
6
1429
1429
6
1429
.i
1430
.t
multiple
precision
floating-point
conversion
from
decimal-to-binary
and
vice
versa
.w
decimal-to-binary
and
binary-to-decimal
floating-point
conversion
is
often
performed
by
using
a
table
of
the
powers
10^i,
(ia
positive
integer)
for
converting
from
base
10
to
base
2,
and
by
using
a
table
of
the
coefficient
of
a
polynomial
approximation
of
10^x,
(0<=x<1)
for
converting
from
base
2
to
base
10.
these
tables
occupy
a
large
storage
region
in
the
case
of
a
nonsingle
precision
conversion.
this
paper
shows
that
a
single
small
table
suffices
for
a
floating-point
conversion
from
decimal
to
binary,
and
vice
versa,
in
any
useful
precision.
.b
cacm
may,
1966
.a
mancino,
o.
g.
.n
ca660507
jb
march
3,
1978
9:56
am
.x
1430
5
1430
1430
5
1430
1430
5
1430
.i
1431
.t
on
a
storage
mapping
function
for
data
structures
.w
some
basic
facts
about
certain
data
structures
are
reviewed
and
an
efficient
algorithm
is
presented
for
constructing
a
storage
mapping
function
for
a
structure
from
the
structure's
definition.
.b
cacm
may,
1966
.a
deuel,
p.
.n
ca660506
jb
march
3,
1978
9:58
am
.x
1431
5
1431
1431
5
1431
1431
5
1431
.i
1432
.t
incorporation
of
nonstandard
input/output
devices
into
fortran
systems
.w
a
fortran
system
may
readily
be
modified
to
handle
input/output
with
nonstandard
media
on
the
same
basis
on
which
it
handles
the
standard
media.
this
is
done
by
providing
a
character-handling
subroutine
suited
to
the
nonstandard
medium
and
arranged
to
be
called
by
an
otherwise
unused
output
statement
type
or
unit
number.
this
method
was
used
to
control
output
of
alphanumeric
information
on
a
digital
graph
plotter.
.b
cacm
may,
1966
.a
cohn,
c.
e.
.n
ca660505
jb
march
3,
1978
10:01
am
.x
1432
5
1432
1432
5
1432
1432
5
1432
.i
1433
.t
a
note
on
linear
programming
algorithm
design:
a
combinatorial
problem
.w
as
linear
programming
models
grow
bigger
and
bigger
in
size,
much
actual
data
that
must
be
memorized
is
often
put
on
magnetic
tape
or
disk,
and
consequently
there
is
an
improportionality
fast
rise
in
the
consumption
of
computer
time.to
cut
down
this
expense,
an
ever
increasing
effort
is
made
to
design
more
efficient
algorithms.
this
paper
is
meant
to
support
the
effort.
it
is
attempted
to
find
some
characteristics
of
the
way
a
pivot
column
is
found.
the
number
of
repetitions
of
a
certain
transfer
of
data
from
tape
to
core
memory
is
considered.
after
some
simplification,
the
problem
is
restated
in
a
general
way.
the
generating
function
of
the
probability
distribution
and
the
moment
generating
function
of
the
number
of
repetitions
is
found.
asymptotic
formulas
are
given
for
the
moments
using
a
result
from
a
paper
of
s.
narumi
[1].
the
results
may
be
applied
to
write
very
efficient
routines
that
search
for
an
extreme
value
in
a
table.
formulas
provide
a
means
of
calculating
the
computer
timings
in
this
case.
.b
cacm
may,
1966
.a
roes,
p.
b.
m.
.n
ca660504
jb
march
3,
1978
10:10
am
.x
1433
5
1433
1433
5
1433
1433
5
1433
.i
1434
.t
a
monte
carlo
algorithm
for
assigning
students
to
classes
.w
a
technique
of
random
choice
is
illustrated
by
application
to
the
problem
of
assigning
students
to
a
fixed
schedule
of
courses.
using
the
technique
it
is
possible
to
reduce
or
eliminate
difficulties
that
result
when
a
popular
section
is
filled
and
closed
before
all
students
requesting
and
requiring
it
have
been
scheduled.
the
effectiveness
of
automatic
scheduling
is
retained
without
loss
of
the
students
privilege
of
picking
favorite
instructors.
.b
cacm
may,
1966
.a
macon,
n.
walker,
e.
e.
.n
ca660503
jb
march
3,
1978
10:14
am
.x
1434
5
1434
1434
5
1434
1434
5
1434
1540
5
1434
2209
5
1434
1434
6
1434
1434
6
1434
1540
6
1434
.i
1435
.t
design
of
computer
simulation
experiments
for
industrial
systems
.w
the
aim
of
this
paper
is
to
provide
background
information
on
the
existing
literature
on
experimental
design
techniques
which
may
be
applicable
to
the
design
of
computer
simulation
experiments
for
industrial
systems.
although
major
emphasis
is
placed
on
analysis
of
variance
techniques,
three
other
techniques
of
data
analysis
are
considered-multiple
ranking
procedures,
sequential
sampling
and
spectral
analysis.
the
paper
treats
four
specific
experimental
design
problems
and
several
techniques
for
solving
them.
the
four
experimental
design
problems
are:
(1)
the
problem
of
stochastic
convergence,
(2)
the
problem
of
factor
selection,
(3)
the
problem
of
motive
and
(4)
the
many
response
problem.
.b
cacm
may,
1966
.a
burdick,
d.
s.
naylor,
t.
h.
.n
ca660502
jb
march
3,
1978
10:20
am
.x
1435
5
1435
1435
5
1435
1435
5
1435
1517
5
1435
1435
6
1435
.i
1436
.t
interchange
of
two
blocks
of
data
(algorithm
284
[k2])
.b
cacm
may,
1966
.a
fletcher,
w.
.n
ca660501a
jb
march
3,
1978
10:21
am
.x
1436
5
1436
1436
5
1436
1436
5
1436
.i
1437
.t
the
mutual
primal-dual
method
(algorithm
285
[h])
.b
cacm
may,
1966
.a
aird,
t.
j.
.n
ca660501b
jb
march
23,
1978
7:12
pm
.x
1437
5
1437
1437
5
1437
1437
5
1437
.i
1438
.t
a
method
for
locating
zeros
of
complex
functions
.w
a
method
for
computing
the
index,
or
winding
number,
is
developed
and
applied
to
the
problem
of
finding
zeros
of
functions
from
the
plane
into
the
plane.
.b
cacm
april,
1966
.a
cain
jr.,
g.
l.
.n
ca660411
jb
march
3,
1978
10:23
am
.x
1438
5
1438
1438
5
1438
1438
5
1438
.i
1439
.t
mechanization
of
the
curve
fitting
process:
datan
.w
a
process
for
fitting
a
curve
to
approximate
data
and
the
problem
it
creates
for
the
engineer-programmer
is
defined.
an
approach
has
also
been
defined
and
a
system
has
been
written
for
the
sru
1107
to
mechanize
a
major
portion
of
this
process.
the
techniques
developed
to
accomplish
the
mechanization
are
largely
empirical,
and
are
dependent
for
their
information
only
on
the
actual
data
points.
.b
cacm
april,
1966
.a
simonsen,
r.
h.
anketell,
d.
l.
.n
ca660410
jb
march
3,
1978
10:26
am
.x
1439
5
1439
1439
5
1439
1439
5
1439
.i
1440
.t
starting
approximations
for
square
root
calculation
on
ibm
system/360
.w
several
starting
approximations
for
square
root
calculation
by
newton's
method
are
presented
in
a
form
to
facilitate
their
use
in
ibm
system/360
square
root
routines.
these
approximations
include
several
for
the
range
[1/16,
1],
which
is
the
interval
of
primary
interest
on
ibm
system/360.
.b
cacm
april,
1966
.a
fike,
c.
t.
.n
ca660409
jb
march
3,
1978
10:32
am
.x
1015
4
1440
1346
4
1440
1440
4
1440
1440
4
1440
1645
4
1440
1932
4
1440
2159
4
1440
951
4
1440
962
5
1440
1440
5
1440
1440
5
1440
1440
5
1440
1566
5
1440
532
5
1440
1440
6
1440
.i
1441
.t
methods
of
numerical
integration
applied
to
a
system
having
trivial
function
evaluations
.w
a
study
has
been
made
to
determine
which
methods
of
numerical
integration
require
the
least
computation
time
for
a
given
amount
of
truncation
error
when
applied
to
a
particular
system
of
ordinary
differential
equations
where
function
evaluations
are
relatively
trivial.
recent
methods
due
to
butcher
and
gear
are
compared
with
classic
runge-kutta,
kutta-nystrom
and
adams
methods.
some
of
the
newer
one-step
methods
due
to
butcher
are
found
to
be
slightly
superior,
but
no
one
method
is
found
to
have
any
great
advantage
over
the
others
in
the
application
to
this
particular
problem.
.b
cacm
april,
1966
.a
waters,
j.
.n
ca660408
jb
march
3,
1978
10:37
am
.x
1441
5
1441
1441
5
1441
1441
5
1441
.i
1442
.t
recorded
magnetic
tape
for
information
interchange
(800
cpi,
nrzi)*
(proposed
american
standard)
.b
cacm
april,
1966
.n
ca660407
jb
march
3,
1978
10:39
am
.x
1442
5
1442
1442
5
1442
1442
5
1442
.i
1443
.t
a
method
for
finding
the
least
squares
estimate
of
the
intersection
point
of
two
helices
in
space
.w
when
the
helical
trajectories
of
two
charged
particles
moving
away
from
a
common
point
in
a
magnetic
field
are
reconstructed
from
measurements
on
the
tracks,
the
reconstructed
tracks
are
perturbed
by
measurement
and
other
errors
and
do
not,
in
general,
intersect.
a
method
is
given
for
adjusting
the
reconstructed
tracks
in
a
least
squares
manner
so
that
they
do
intersect.
.b
cacm
april,
1966
.a
royston,
r.
j.
gregory,
j.
.n
ca660406
jb
march
3,
1978
10:42
am
.x
1443
5
1443
1443
5
1443
1443
5
1443
.i
1444
.t
an
algorithm
for
generating
projective
reduction
formulas
for
matrix
elements
of
many-electron
wavefunctions
.w
an
algol
procedure
is
given
for
automatically
generating
formulas
for
matrix
elements
arising
in
the
variational
solution
of
the
schrodinger
equation
for
many-electron
systems.
.b
cacm
april,
1966
.a
reeves,
c.
m.
.n
ca660405
jb
march
3,
1978
10:44
am
.x
1334
4
1444
1396
4
1444
1444
4
1444
964
5
1444
1444
5
1444
1444
5
1444
1444
5
1444
.i
1445
.t
use
of
the
computer
to
teach
introductory
statistics
.w
it
has
always
been
obvious
that
the
aid
to
calculation
offered
by
the
computer
forces
a
change
in
the
curricula
of
mathematics,
statistics,
physics,
engineering
and
other
courses.
not
so
obvious
are
the
many
pedagogic
aids
the
computer
can
offer
in
teaching
the
subject
matter.
the
possibilities
of
giving
the
student
a
better
technical
as
well
as
conceptual
understanding
of
statistics
were
explored
for
a
number
of
years
at
the
college
of
medicine
of
the
university
of
cincinnati
and
are
reported
here.
.b
cacm
april,
1966
.a
sterling,
t.
d.
pollack,
s.
v.
.n
ca660404
jb
march
3,
1978
10:48
am
.x
1445
5
1445
1445
5
1445
1445
5
1445
.i
1446
.t
chebyshev
quadrature
(algorithm
279
[d1])
.b
cacm
april,
1966
.a
hopgood,
f.
r.
a.
litherland,
c.
.n
ca660403a
jb
march
3,
1978
10:50
am
.x
1446
5
1446
1446
5
1446
1446
5
1446
.i
1447
.t
abscissas
and
weights
for
gregory
quadrature
[d1])
.b
cacm
april,
1966
.a
welsch,
j.
h.
.n
ca660403b
jb
march
23,
1978
7:16
pm
.x
1447
5
1447
1447
5
1447
1447
5
1447
.i
1448
.t
abscissas
and
weights
for
romberg
quadrature
(algorithm
281
[d1])
.b
cacm
april,
1966
.a
welsch,
j.
h.
.n
ca660403c
jb
march
23,
1978
7:17
pm
.x
1448
5
1448
1448
5
1448
1448
5
1448
.i
1449
.t
derivatives
(algorithm
282
[s22])
.b
cacm
april,
1966
.a
gautschi,
w.
.n
ca660403d
jb
march
23,
1978
7:18
pm
.x
1449
5
1449
1449
5
1449
1449
5
1449
2129
5
1449
1449
6
1449
.i
1450
.t
simultaneous
displacement
of
polynomial
roots
if
real
and
simple
(algorithm
283
[c2])
.b
cacm
april,
1966
.a
kerner,
i.
o.
.n
ca660403e
jb
march
23,
1978
7:19
pm
.x
1450
5
1450
1450
5
1450
1450
5
1450
.i
1451
.t
runge-kutta
integration
(algorithm
9
[d2])
.b
cacm
april,
1966
.a
thacher
jr.,
h.
c.
.n
ca660403f
jb
march
23,
1978
7:21
pm
.x
1451
5
1451
1451
5
1451
1451
5
1451
.i
1452
.t
kutta-merson
(algorithm
218
[d2]
.b
cacm
april,
1966
.a
bayer,
g.
.n
ca660403g
jb
march
30,
1978
9:31
am
.x
1452
5
1452
1452
5
1452
1452
5
1452
1633
5
1452
1452
6
1452
.i
1453
.t
a
nonrecursive
method
of
syntax
specification
.w
the
use
of
the
kleene
regular
expression
notation
for
describing
algebraic
language
syntax,
in
particular
of
algol,
is
described
in
this
paper.
a
fortran
ii
computer
program
for
carrying
out
the
elimination
algorithm
of
gorn,similar
to
gaussian
elimination
for
linear
systems
of
algebraic
equations,
is
described.
this
was
applied
to
numerous
smaller
languages,
including
some
sublanguage
of
algol.
a
hand
calculation
result
of
the
application
of
the
algorithm
to
all
of
algol
is
given,
thus
expressing
the
revised
algol
1960
syntax
in
completely
nonrecursive
terms,
as
far
as
its
context-free
portion
is
concerned.
this
description
in
many
ways
is
far
more
intuitively
understood
than
the
previous
recursive
description,
it
is
suggested.
the
paper
also
includes
results
of
the
machine
program,
which
does
not
include
a
simplification
algorithm.
.b
cacm
april,
1966
.a
carr
iii,
j.
w.
weiland,
j.
.n
ca660402
jb
march
3,
1978
11:02
am
.x
1086
4
1453
1132
4
1453
1234
4
1453
1263
4
1453
1263
4
1453
1265
4
1453
1270
4
1453
1323
4
1453
1358
4
1453
1379
4
1453
1380
4
1453
1453
4
1453
1453
4
1453
1464
4
1453
1484
4
1453
1491
4
1453
1498
4
1453
1613
4
1453
1614
4
1453
1781
4
1453
1825
4
1453
1860
4
1453
1945
4
1453
2083
4
1453
2178
4
1453
2179
4
1453
2252
4
1453
2325
4
1453
2341
4
1453
2546
4
1453
2645
4
1453
2652
4
1453
2684
4
1453
2842
4
1453
2929
4
1453
2934
4
1453
3069
4
1453
669
4
1453
679
4
1453
691
4
1453
761
4
1453
949
4
1453
989
4
1453
989
5
1453
1453
5
1453
1453
5
1453
1453
5
1453
1613
5
1453
3184
5
1453
987
6
1453
1086
6
1453
1134
6
1453
1453
6
1453
3184
6
1453
.i
1454
.t
a
simple
user-oriented
compiler
source
language
for
programming
automatic
test
equipment
.w
for
the
nonprogrammer,
difficulty
in
using
a
language
increases
rapidly
with
the
number
of
nonproblem-oriented
conventions.
a
simple
language,
even
if
inelegant,
which
considers
the
user's
background
as
part
of
the
problem
may
be
more
effective
than
a
source
language
containing
subtle
and
more
powerful
capabilities.
the
language
described
in
this
paper
is
used
to
write
computer
programs
which
test
electronic
equipment.
because
this
testing
process
contains
few
complex
ideas,
there
is
little
need
for
the
elegance
and
redundancy
of
a
highly
syntax-oriented
language.
a
simple
and
direct
language
will
suffice
for
the
problem.
the
eventual
users
of
this
language
are
military
depot
personnel
who
cannot
he
expected
to
have
computer
programming
skill
or
significant
programming
training.
for
this
nonprogramming-oriented
user,
it
was
essential
to
create
a
language
using
familiar
engineering
statements;
programming-oriented
conventions
would
have
unnecessarily
complicated
his
task.
.b
cacm
april,
1966
.a
scheff,
b.
h.
.n
ca660401
jb
march
3,
1978
11:09
am
.x
1454
5
1454
1454
5
1454
1454
5
1454
.i
1455
.t
trac,
a
procedure-describing
language
for
the
reactive
typewriter
.w
a
description
of
the
trac
(text
reckoning
and
compiling)
language
and
processing
algorithm
is
given.
the
trac
language
was
developed
as
the
basis
of
a
software
package
for
the
reactive
typewriter.
in
the
trac
language,
one
can
write
procedures
for
accepting,
naming
and
storing
any
character
string
from
the
typewriter;
for
modifying
any
string
in
any
way;
for
treating
any
string
at
any
time
as
an
executable
procedure,
or
as
a
name,
or
as
text;
and
for
printing
out
any
string.
the
trac
language
is
based
upon
an
extension
and
generalization
to
character
strings
of
the
programming
concept
of
the
"macro."
through
the
ability
of
trac
to
accept
and
store
definitions
of
procedures,
the
capabilities
of
the
language
can
be
indefinitely
extended,
and
can
deal
with
character
strings,
integers
and
boolean
vector
variables.
.b
cacm
march,
1966
.a
mooers,
c.
n.
.n
ca660317
jb
march
3,
1978
11:18
am
.x
1455
5
1455
1455
5
1455
1455
5
1455
1530
5
1455
1531
5
1455
1565
5
1455
1703
5
1455
1945
5
1455
2036
5
1455
823
6
1455
914
6
1455
915
6
1455
917
6
1455
984
6
1455
989
6
1455
990
6
1455
1012
6
1455
1084
6
1455
1098
6
1455
1122
6
1455
1138
6
1455
1139
6
1455
1141
6
1455
1162
6
1455
1185
6
1455
1200
6
1455
1223
6
1455
1265
6
1455
1336
6
1455
1358
6
1455
1396
6
1455
1455
6
1455
1455
6
1455
1455
6
1455
1455
6
1455
1455
6
1455
1455
6
1455
1477
6
1455
1487
6
1455
1491
6
1455
1496
6
1455
1565
6
1455
205
6
1455
483
6
1455
584
6
1455
669
6
1455
680
6
1455
763
6
1455
.i
1456
.t
storage
and
retrieval
of
aspects
of
meaning
in
directed
graph
structures
.w
an
experimental
system
that
uses
lisp
to
make
a
conceptual
dictionary
is
described.
the
dictionary
associates
with
each
english
word
the
syntactic
information,
definitional
material,
and
references
to
the
contexts
in
which
it
has
been
used
to
define
other
words.
such
relations
as
class
inclusion,
possession,
and
active
or
passive
actions
are
used
as
definitional
material.
the
resulting
structure
serves
as
a
powerful
vehicle
for
research
on
the
logic
of
question
answering.
examples
of
methods
of
inputting
information
and
answering
simple
english
questions
are
given.
an
important
conclusion
is
that,
although
lisp
and
other
list
processing
languages
are
ideally
suited
for
producing
complex
associative
structures,
they
are
inadequate
vehicles
for
language
processing
on
any
large
scale-at
east
until
they
can
use
auxiliary
memory
as
a
continuous
extension
of
core
memory.
.b
cacm
march,
1966
.a
simmons,
r.
f.
.n
ca660316
jb
march
3,
1978
11:25
am
.x
1155
4
1456
1456
4
1456
1468
4
1456
1515
4
1456
1699
4
1456
1856
4
1456
2127
4
1456
1324
5
1456
1456
5
1456
1456
5
1456
1456
5
1456
.i
1457
.t
data
manipulation
and
programming
problems
in
automatic
information
retrieval
.w
automatic
information
retrieval
programs
require
the
manipulation
of
a
variety
of
different
data
structures,
including
linear
text,
sparse
matrices,
and
tree
or
list
structures.
the
main
data
manipulations
to
be
performed
in
automatic
information
systems
are
first
briefly
reviewed.
a
variety
of
data
representations
which
have
been
used
to
describe
structured
information
are
then
examined,
and
the
characteristics
of
various
processing
languages
are
outlined
in
the
light
of
the
procedures
requiring
implementation.
advantages
of
these
programming
languages
for
the
retrieval
application
are
examined,
and
suggestions
are
made
for
the
design
of
programming
facilities
to
aid
in
information
retrieval.
.b
cacm
march,
1966
.a
salton,
g.
.n
ca660315
jb
march
3,
1978
11:35
am
.x
1457
4
1457
1236
5
1457
1457
5
1457
1457
5
1457
1457
5
1457
.i
1458
.t
online
programming
.w
when
the
transition
has
been
made
from
off
line
to
online
programming,
there
are
a
number
of
changes
in
the
working
conditions
noted.
these
changes
in
the
environment
make
necessary
corresponding
changes
in
the
processes
related
to
producing
and
checking
out
programs.
in
the
main,
it
it
not
the
programming
language
itself
which
must
be
changed
to
provide
a
facility
for
the
online
user;
it
is
the
system
surrounding
the
programming
language.
in
this
paper
the
online
environment
and
its
effect
on
programming
are
discussed.
.b
cacm
march,
1966
.a
schwartz,
j.
i.
.n
ca660314
jb
march
3,
197811:44
am
.x
1458
4
1458
1523
4
1458
1603
4
1458
1698
4
1458
1747
4
1458
1748
4
1458
1854
4
1458
1877
4
1458
1960
4
1458
2377
4
1458
2378
4
1458
2497
4
1458
2558
4
1458
2625
4
1458
2632
4
1458
2840
4
1458
2941
4
1458
3105
4
1458
3144
4
1458
1458
5
1458
1458
5
1458
1458
5
1458
1471
5
1458
.i
1459
.t
requirements
for
real-time
languages
.w
real-time
languages
have
different
requirements
from
other
programming
languages
because
of
the
special
nature
of
their
applications,
the
environment
in
which
their
object
programs
are
executed
and
the
environment
in
which
they
may
be
compiled.
it
may
not
be
the
language
extensions
that
ultimately
advance
developments
in
the
field.
progress
may
be
made
by
attacking
the
special
compiling
and
executing
system
problems
that
must
be
solved.
.b
cacm
march,
1966
.a
opler,
a.
.n
ca660313
jb
march
3,
1978
11:48
am
.x
1459
5
1459
1459
5
1459
1459
5
1459
.i
1460
.t
evolution
of
the
meta-assembly
program
.w
a
generalized
assembler
called
a
"meta-assembler"
is
described.
the
meta-assembler
is
defined
and
factors
which
contributed
to
its
evolution
are
presented.
how
a
meta-assembler
is
made
to
function
as
an
assembly
program
is
described.
finally,
the
implication
of
meta-assemblers
on
compiler
design
is
discussed.
.b
cacm
march,
1966
.a
ferguson,
d.
e.
.n
ca660312
jb
march
3,
1978
11:56
am
.x
1358
5
1460
1460
5
1460
1460
5
1460
1460
5
1460
1781
5
1460
123
6
1460
196
6
1460
919
6
1460
990
6
1460
1007
6
1460
1046
6
1460
1131
6
1460
1139
6
1460
1140
6
1460
1149
6
1460
1198
6
1460
1215
6
1460
1223
6
1460
1265
6
1460
1303
6
1460
1323
6
1460
1358
6
1460
1366
6
1460
1421
6
1460
1460
6
1460
1460
6
1460
1462
6
1460
1463
6
1460
1467
6
1460
1468
6
1460
1477
6
1460
1491
6
1460
1496
6
1460
1531
6
1460
1535
6
1460
1565
6
1460
1601
6
1460
1602
6
1460
1613
6
1460
1614
6
1460
1626
6
1460
1641
6
1460
1787
6
1460
1788
6
1460
205
6
1460
205
6
1460
224
6
1460
249
6
1460
288
6
1460
316
6
1460
381
6
1460
398
6
1460
11
6
1460
404
6
1460
410
6
1460
463
6
1460
464
6
1460
483
6
1460
3184
6
1460
3184
6
1460
3188
6
1460
584
6
1460
600
6
1460
680
6
1460
691
6
1460
729
6
1460
763
6
1460
799
6
1460
799
6
1460
.i
1461
.t
discussion
summary
on
operating
systems
.b
cacm
march,
1966
.n
ca660311
jb
march
3,
1978
1:26
pm
.x
1461
5
1461
1461
5
1461
1461
5
1461
.i
1462
.t
multilevel
operating
systems
.w
the
basic
software
for
all
newer
computers
is
built
on
the
well-established
need
for
standard
operating
systems.
this
implies
that
all
applications-no
matter
how
large,
complex
or
time
consuming-must
operate
under
(or,
more
precisely,
on
top
of)
the
standard
system.
large
applications
require
supervisory
monitors
which
handle
problems
similar
to
those
of
the
operating
systems,
but
at
a
different
level.
sometimes,
still
a
third
or
even
a
fourth
such
level
is
required
or
desirable.
this
leads
naturally
to
the
concept
of
multilevel
systems-similar
vertically,
but
different
horizontally.
proper
division
of
responsibility
between
levels
leads
to
greater
efficiency
and
less
logical
complexity,
while
actually
enhancing
capability.
.b
cacm
march,
1966
.a
orchard-hays,
w.
.n
ca660310
jb
march
3,
1978
1:31
pm
.x
1462
5
1462
1462
5
1462
1462
5
1462
1781
5
1462
123
6
1462
196
6
1462
919
6
1462
990
6
1462
1007
6
1462
1046
6
1462
1131
6
1462
1139
6
1462
1140
6
1462
1149
6
1462
1198
6
1462
1215
6
1462
1223
6
1462
1265
6
1462
1303
6
1462
1323
6
1462
1358
6
1462
1366
6
1462
1421
6
1462
1460
6
1462
1462
6
1462
1463
6
1462
1467
6
1462
1468
6
1462
1477
6
1462
1491
6
1462
1496
6
1462
1531
6
1462
1535
6
1462
1565
6
1462
1601
6
1462
1602
6
1462
1613
6
1462
1614
6
1462
1626
6
1462
1641
6
1462
1787
6
1462
1788
6
1462
205
6
1462
224
6
1462
249
6
1462
288
6
1462
316
6
1462
381
6
1462
398
6
1462
11
6
1462
404
6
1462
410
6
1462
463
6
1462
464
6
1462
483
6
1462
3184
6
1462
3188
6
1462
584
6
1462
600
6
1462
680
6
1462
691
6
1462
763
6
1462
799
6
1462
.i
1463
.t
more
on
extensible
machines
.w
one
of
the
most
salient
characteristics
of
extensible
machines
(em)
is
the
facility
for
providing
system
control
over
program-to-program
and
program-to-data
linkage
(e.g.,
address
connection).
it
is
the
intent
of
this
paper
to
expand
and
clarify
the
remarks
concerning
program-to-program
and
program-to-data
linkage
that
were
embodied
in
the
authors'
previous
paper
on
the
em
concepts,
and
to,
finally,
trace
the
employment
of
linkage
mechanisms
through
various
levels
of
programming
languages.
.b
cacm
march,
1966
.a
leonard,
g.
f.
goodroe,
j.
r.
.n
ca660309
jb
march
3,
1978
1:34
pm
.x
1463
5
1463
1463
5
1463
1463
5
1463
1781
5
1463
123
6
1463
196
6
1463
919
6
1463
990
6
1463
1007
6
1463
1046
6
1463
1131
6
1463
1139
6
1463
1140
6
1463
1149
6
1463
1198
6
1463
1215
6
1463
1223
6
1463
1265
6
1463
1303
6
1463
1323
6
1463
1358
6
1463
1366
6
1463
1421
6
1463
1460
6
1463
1462
6
1463
1463
6
1463
1467
6
1463
1468
6
1463
1477
6
1463
1491
6
1463
1496
6
1463
1531
6
1463
1535
6
1463
1565
6
1463
1601
6
1463
1602
6
1463
1613
6
1463
1614
6
1463
1626
6
1463
1641
6
1463
1787
6
1463
1788
6
1463
205
6
1463
224
6
1463
249
6
1463
288
6
1463
316
6
1463
381
6
1463
398
6
1463
11
6
1463
404
6
1463
410
6
1463
463
6
1463
464
6
1463
483
6
1463
3184
6
1463
3188
6
1463
584
6
1463
600
6
1463
680
6
1463
691
6
1463
763
6
1463
799
6
1463
.i
1464
.t
an
algol
compiler:
construction
and
use
in
relation
to
an
elaborate
operating
system
.w
an
algol
translator
has
been
prepared
and
integrated
into
the
ibsys
operating
system.
assembly
and
"go"
features
of
ibsys
permit
immediate
execution
with
optional
listings,
decks
and
debugging
information.
using
the
chain
feature
of
ibsys,
links
written
in
map
or
fortran
as
well
as
algol
may
be
called
by
the
algol
main
program.
in
addition,
procedures
coded
in
map
may
be
included
in
any
algol
program.
although
assembly
plus
loading
time
exceeds
compilation
time,
the
total
time
is
satisfactory
and
the
user
gets
ease
and
facility
which
are
fully
compensating.
.b
cacm
march,
1966
.a
boussard,
j.
c.
.n
ca660308
jb
march
3,
1978
1:41
pm
.x
249
4
1464
254
4
1464
272
4
1464
1086
4
1464
1102
4
1464
1109
4
1464
1132
4
1464
1140
4
1464
1188
4
1464
1234
4
1464
1263
4
1464
1265
4
1464
1270
4
1464
1306
4
1464
1323
4
1464
1358
4
1464
1379
4
1464
1380
4
1464
1453
4
1464
1464
4
1464
1464
4
1464
1484
4
1464
1491
4
1464
1491
4
1464
1498
4
1464
1613
4
1464
1614
4
1464
1767
4
1464
1781
4
1464
1781
4
1464
1787
4
1464
1825
4
1464
1860
4
1464
1949
4
1464
321
4
1464
2059
4
1464
2083
4
1464
2126
4
1464
2178
4
1464
2179
4
1464
2252
4
1464
2325
4
1464
2341
4
1464
2546
4
1464
435
4
1464
437
4
1464
463
4
1464
483
4
1464
491
4
1464
2645
4
1464
2652
4
1464
2684
4
1464
2732
4
1464
2842
4
1464
2929
4
1464
2934
4
1464
560
4
1464
583
4
1464
3069
4
1464
3073
4
1464
627
4
1464
631
4
1464
632
4
1464
642
4
1464
644
4
1464
653
4
1464
669
4
1464
679
4
1464
680
4
1464
691
4
1464
761
4
1464
761
4
1464
762
4
1464
763
4
1464
123
4
1464
140
4
1464
919
4
1464
949
4
1464
989
4
1464
989
4
1464
196
5
1464
1464
5
1464
1464
5
1464
1464
5
1464
3184
5
1464
.i
1465
.t
program
translation
viewed
as
a
general
data
processing
problem
.w
efficiency
dictates
that
the
overall
effectiveness
of
a
compiler
be
increased
by
all
means
available.
for
a
compiler
to
have
a
substantial
useful
life
it
needs
a
clear
logical
structure,
reliability
and
sound
data
processing
techniques.
a
compiler
must
be
based
on
fixed
conventions
to
preserve
efficiency
and
reliability;
empty
options
and
default
conventions
violate
this
dictum.
use
of
structure
to
associate
various
parts
of
a
program
and
economy
of
features
promote
clarity
and
reliability.
.b
cacm
march,
1966
.a
naur,
p.
.n
ca660307
jb
march
3,
1978
1:45
pm
.x
1465
5
1465
1465
5
1465
1465
5
1465
.i
1466
.t
discussion
summary
on
graphical
languages
.b
cacm
march,
1966
.n
ca660306
jb
march
3,
1978
1:46
pm
.x
1466
5
1466
1466
5
1466
1466
5
1466
2341
5
1466
990
6
1466
1468
6
1466
1466
6
1466
3184
6
1466
.i
1467
.t
a
graphical
servicesystem
with
variable
syntax
.w
man-machine
interaction
in
many
fields
of
endeavor
should
be
greatly
facilitated
in
the
near
future
through
the
use
of
interactive
graphical
languages.
to
provide
a
variety
of
display
scope
communication
procedures,
a
graphic
service
system
which
functions
as
a
generalized
graphical
language
translator,
is
being
developed
to
aid
the
definition
as
well
as
the
use
of
new
graphical
languages.
.b
cacm
march,
1966
.a
roberts,
l.
g.
.n
ca660305
jb
march
3,
1978
1:49
pm
.x
1467
5
1467
1467
5
1467
1467
5
1467
1767
5
1467
1781
5
1467
123
6
1467
196
6
1467
196
6
1467
919
6
1467
990
6
1467
1007
6
1467
1046
6
1467
1131
6
1467
1139
6
1467
1140
6
1467
1149
6
1467
1198
6
1467
1215
6
1467
1223
6
1467
1265
6
1467
1303
6
1467
1323
6
1467
1358
6
1467
1366
6
1467
1421
6
1467
1460
6
1467
1462
6
1467
1463
6
1467
1467
6
1467
1467
6
1467
1468
6
1467
1468
6
1467
1477
6
1467
1491
6
1467
1496
6
1467
1496
6
1467
1531
6
1467
1535
6
1467
1565
6
1467
1601
6
1467
1602
6
1467
1613
6
1467
1614
6
1467
1626
6
1467
1641
6
1467
1787
6
1467
1788
6
1467
205
6
1467
224
6
1467
249
6
1467
288
6
1467
316
6
1467
381
6
1467
398
6
1467
11
6
1467
404
6
1467
410
6
1467
463
6
1467
464
6
1467
483
6
1467
3184
6
1467
3188
6
1467
584
6
1467
600
6
1467
680
6
1467
691
6
1467
763
6
1467
799
6
1467
.i
1468
.t
syntax-directed
interpretation
of
classes
of
pictures
.w
a
descriptive
scheme
for
classes
of
pictures
based
on
labeling
techniques
using
parallel
processing
algorithms
was
proposed
by
the
author
some
years
ago.
since
then
much
work
has
been
done
in
applying
this
to
bubble
chamber
pictures.
the
parallel
processing
simulator,
originally
written
for
an
ibm
7094
system,
has
now
been
rewritten
for
a
cdc
3600
system.
this
paper
descriptive
models
by
considering
their
specific
application
to
bubble
chamber
pictures.
how
the
description
generated
in
this
phase
can
be
embedded
in
a
larger
"conversation"
program
is
explained
by
means
of
a
certain
specific
example
that
has
been
worked
out.
a
partial
generative
grammar
for
"handwritten"
english
letters
is
given,
as
are
also
a
few
computer-generated
outputs
using
this
grammar
and
the
parallel
processing
simulator
mentioned
earlier.
.b
cacm
march,
1966
.a
narasimhan,
r.
.n
ca660304
jb
march
3,
1978
1:56
pm
.x
1155
4
1468
1456
4
1468
1468
4
1468
1515
4
1468
1699
4
1468
1856
4
1468
2127
4
1468
1324
5
1468
1468
5
1468
1468
5
1468
1468
5
1468
1767
5
1468
1781
5
1468
2341
5
1468
123
6
1468
196
6
1468
196
6
1468
919
6
1468
990
6
1468
990
6
1468
1007
6
1468
1046
6
1468
1131
6
1468
1139
6
1468
1140
6
1468
1149
6
1468
1198
6
1468
1215
6
1468
1223
6
1468
1265
6
1468
1303
6
1468
1323
6
1468
1358
6
1468
1366
6
1468
1421
6
1468
1460
6
1468
1462
6
1468
1463
6
1468
1467
6
1468
1467
6
1468
1468
6
1468
1468
6
1468
1468
6
1468
1466
6
1468
1477
6
1468
1491
6
1468
1496
6
1468
1496
6
1468
1531
6
1468
1535
6
1468
1565
6
1468
1601
6
1468
1602
6
1468
1613
6
1468
1614
6
1468
1626
6
1468
1641
6
1468
1787
6
1468
1788
6
1468
205
6
1468
224
6
1468
249
6
1468
288
6
1468
316
6
1468
381
6
1468
398
6
1468
11
6
1468
404
6
1468
410
6
1468
463
6
1468
464
6
1468
483
6
1468
3184
6
1468
3184
6
1468
3188
6
1468
584
6
1468
600
6
1468
680
6
1468
691
6
1468
763
6
1468
799
6
1468
.i
1469
.t
the
next
700
programming
languages
.w
a
family
of
unimplemented
computing
languages
is
described
that
is
intended
to
span
differences
of
application
area
by
a
unified
framework.
this
framework
dictates
the
rules
about
the
uses
of
user-coined
names,
and
the
conventions
about
characterizing
functional
relationships.
within
this
framework
the
design
of
a
specific
language
splits
into
two
independent
parts.
one
is
the
choice
of
written
appearances
of
programs
(or
more
generally,
their
physical
representation).
the
other
is
the
choice
of
the
abstract
entities
(such
as
numbers,
character-strings,
lists
of
them,
functional
relations
among
them)
that
can
be
referred
to
in
the
language.
the
system
is
biased
towards
"expressions"
rather
than
"statements."
it
includes
a
nonprocedural(purely
functional)
subsystem
that
aims
to
expand
the
class
of
users'
needs
that
can
be
met
by
a
single
print-instruction,
without
sacrificing
the
important
properties
that
make
conventional
right-hand-side
expressions
easy
to
construct
and
understand.
.b
cacm
march,
1966
.a
landin,
p.
j.
.n
ca660303
jb
march
3,
1978
2:05
pm
.x
1469
4
1469
1486
4
1469
1491
4
1469
1781
4
1469
2178
4
1469
2326
4
1469
2470
4
1469
2684
4
1469
3044
4
1469
1303
5
1469
1469
5
1469
1469
5
1469
1469
5
1469
2060
5
1469
2294
5
1469
2470
5
1469
3124
5
1469
1303
6
1469
1380
6
1469
1421
6
1469
1469
6
1469
1469
6
1469
1469
6
1469
1469
6
1469
1477
6
1469
1491
6
1469
210
6
1469
1834
6
1469
1869
6
1469
2060
6
1469
2110
6
1469
2264
6
1469
.i
1470
.t
the
structure
of
programming
languages
.w
the
following
are
identified
as
major
components
of
every
programming
language:
(1)
the
elementary
program
statement,
(2)
mechanisms
for
linking
elementary
statements
together,
(3)
the
means
by
which
a
program
can
obtain
data
inputs.
several
alternative
forms
of
each
of
these
components
are
described,
compared
and
evaluated.
many
examples,
frequently
from
list
processing
languages,
illustrate
the
forms
described.
elementary
program
statements
usually
take
the
form
of
commands,
requirements,
or
implicit
specifications.
a
command
is
an
imperative
statement
that
commands
the
action
to
be
taken.
a
requirement
describes
the
effect
to
be
achieved
without
saying
anything
about
the
actions
to
be
taken.
an
implicit
specification
is
similar
to
a
requirement,
but
the
programmer
must
understand
what
actions
will
be
taken
to
achieve
the
desired
effect.
subroutines
may
be
entered
explicitly,
by
execute
call,
or
by
function
composition.
explicitly
called
subroutines
generally
require
special
linkage
conventions.
an
execute
subroutine
call
is
syntactically
indistinguishable
from
a
basic
instruction
of
the
programming
language.
function
composition
is
a
convenient
alternative
to
the
explicit
call.
the
three
principal
ways
of
getting
inputs
for
routines
are
(1)
by
referring
to
the
data
itself,
(2)
by
referring
to
the
data
by
a
"name",
and
(3)
by
referring
to
it
implicitly
by
means
of
variables
or
functions.
names
are
useful
entry
points
into
permanent
data
structures,
but
can
be
error-causing
distractions
in
other
contexts.
the
author
discusses
advantages,
disadvantages,
and
factors
influencing
the
choice
of
a
form
of
component
for
a
language.
he
concludes
by
suggesting
the
evolution
of
programming
languages
toward
one
which
will
permit
all
the
most
convenient
ways
of
structuring
programs,
organizing
systems,
and
referencing
data.
.b
cacm
march,
1966
.a
raphael,
b.
.n
ca660302
jb
march
3,
1978
2:20
pm
.x
1470
5
1470
1470
5
1470
1470
5
1470
.i
1471
.t
programming
semantics
for
multiprogrammed
computations
.w
the
semantics
are
defined
for
a
number
of
meta-instructions
which
perform
operation
essential
to
the
writing
of
programs
in
multiprogrammed
computer
systems.
these
meta-instructions
relate
to
parallel
processing,
protection
of
separate
computations,
program
debugging,
and
the
sharing
among
users
of
memory
segments
and
other
computing
objects,
the
names
of
which
are
hierarchically
structured.
the
language
sophistication
contemplated
is
midway
between
an
assembly
language
and
an
advanced
algebraic
language.
.b
cacm
march,
1966
.a
dennis,j.
b.
vanhorn,
e.
c.
.n
ca660301
jb
march
3,
1978
2:25
pm
.x
1471
4
1471
1471
4
1471
1774
4
1471
972
4
1471
276
5
1471
1458
5
1471
1471
5
1471
1471
5
1471
1471
5
1471
1523
5
1471
1603
5
1471
1698
5
1471
1747
5
1471
1748
5
1471
1854
5
1471
1877
5
1471
1960
5
1471
2377
5
1471
2378
5
1471
2497
5
1471
2558
5
1471
2625
5
1471
2632
5
1471
2840
5
1471
2941
5
1471
3105
5
1471
3144
5
1471
800
5
1471
1421
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1746
6
1471
1746
6
1471
1748
6
1471
1749
6
1471
1749
6
1471
1749
6
1471
1749
6
1471
1749
6
1471
1753
6
1471
1854
6
1471
2060
6
1471
2080
6
1471
2080
6
1471
2182
6
1471
2298
6
1471
2356
6
1471
2358
6
1471
2358
6
1471
2436
6
1471
2438
6
1471
2491
6
1471
2558
6
1471
2597
6
1471
2624
6
1471
2625
6
1471
2625
6
1471
2626
6
1471
2629
6
1471
2632
6
1471
2632
6
1471
2651
6
1471
2868
6
1471
2939
6
1471
3068
6
1471
.i
1472
.t
description
of
a
high
capacity,
fast
turnaround
university
computing
center
.w
the
operating
system
for
the
univac
1107
at
case
institute
is
reviewed.
the
system
is
of
interest
because
of
the
low
turnaround
times
achieved,
the
high
throughput
achieved
and
the
lack
of
an
operating
staff.
turnaround
times
below
5
minutes
and
job
volume
above
75,000
per
quarter
year
one
reported.
.b
cacm
february,
1966
.a
lynch,
w.c.
.n
ca660212
jb
march
3,
1978
2:28
pm
.x
1472
5
1472
1472
5
1472
1472
5
1472
1550
5
1472
1304
6
1472
1472
6
1472
.i
1473
.t
the
stability
of
the
fourth
order
runge-kutta
method
for
the
solution
of
systems
of
differential
equations
.w
the
problem
of
the
region
of
stability
of
the
fourth
order-runge-kutta
method
for
the
solution
of
systems
of
differential
equations
is
studied.
this
region
can
be
characterized
by
means
of
linear
transformation
but
can
not
be
given
in
a
closed
form.
in
the
paper,
this
region
is
determined
by
the
electronic
digital
computer
z22.
.b
cacm
february,
1966
.a
karim,
a.
i.
a.
.n
ca660211
jb
march
3,
1978
2:31
pm
.x
1473
5
1473
1473
5
1473
1473
5
1473
.i
1474
.t
tests
of
probabilistic
models
for
propagation
of
roundoff
errors
.w
in
any
prolonged
computation
it
is
generally
assumed
that
the
accumulated
effect
of
roundoff
errors
is
in
some
sense
statistical.
the
purpose
of
this
paper
is
to
give
precise
descriptions
of
certain
probabilistic
models
for
roundoff
error,
and
then
to
describe
a
series
of
experiments
for
testing
the
validity
of
these
models.
it
is
concluded
that
the
models
are
in
general
very
good.
discrepancies
are
both
rare
and
mild.
the
test
techniques
can
also
be
used
to
experiment
with
various
types
of
special
arithmetic.
.b
cacm
february,
1966
.a
hull,
t.
e.
swenson,
j.
r.
.n
ca660210
jb
march
3,
1978
2:37
pm
.x
1474
5
1474
1474
5
1474
1474
5
1474
2525
5
1474
1474
6
1474
.i
1475
.t
dribble
posting
a
master
file
.w
many
business
applications
employ
sequential
magnetic
tape
rather
than
random-access
storage
techniques
to
process
a
very
small
number
of
transactions
against
a
voluminous
master
file.
in
such
situations,
it
may
prove
economical
to
avoid
creating
a
new
master
file
during
each
updating
run
by
producing
instead
a
dribble
ledger
containing
only
those
master
file
accounts
which
have
experienced
activity.
.b
cacm
february,
1966
.a
head,
r.
v.
.n
ca660209
jb
march
3,
1978
2:41
pm
.x
1475
5
1475
1475
5
1475
1475
5
1475
.i
1476
.t
control
procedures
for
data
communication-an
asa
progress
report
.w
sectional
committee
x.3
of
the
american
standards
association,
has
charged
one
of
its
task
groups,
x3.3.4,
with
the
responsibility
to
"define
and
specify
functional
control
requirements
and
characteristics
governing
the
operation
of
digital
data
generating
and
receiving
systems
interconnected
by
communication
system."
this
effort
is
primarily
directed
toward
systems
employing
the
american
standard
code
for
information
interchange
(ascii).
this
paper
represents
a
progress
report
on
the
work
of
this
group
toward
a
proposal
for
national
and
international
standardization
in
the
field
of
control
procedures.
it
describes
both
the
old
and
new
work
of
the
task
group.
the
new
work
is
presented
in
detail,
while
the
work
that
has
been
presented
in
earlier
papers
["control
procedures
for
data
communication,"
task
group
document
x3.3.4/44,
may
1964:
"transparent-mode
control
procedures
for
data
communication,"
task
group
document
x3.3.4/58,
december,
1964:
comm.
acm
8
(apr.
1965),
203-206;
"control
procedures
for
data
communications,"
task
group
document
x3.3.4/60,
march,
1965]
is
retained
here
in
summary
form.
many
of
the
concepts
and
principles
described
herein
have
been
submitted
to
the
international
organization
for
standardization
via
earlier
papers
and
are
now
embodied
in
working
papers
of
that
organization.
.b
cacm
february,
1966
.n
ca660208jb
march
3,
1978
3:04
pm
.x
1476
5
1476
1476
5
1476
1476
5
1476
.i
1477
.t
euler:
a
generalization
of
algol,
and
its
formal
definition:
part
ii*
.b
cacm
february,
1966
.a
wirth,
n.
weber,
h.
.n
ca660207
jb
march
3,
1978
3:10
pm
.x
1379
5
1477
1477
5
1477
1477
5
1477
1477
5
1477
1693
5
1477
1781
5
1477
1836
5
1477
1945
5
1477
2015
5
1477
2060
5
1477
2061
5
1477
2091
5
1477
2179
5
1477
2546
5
1477
2698
5
1477
2708
5
1477
3045
5
1477
823
6
1477
123
6
1477
196
6
1477
914
6
1477
915
6
1477
917
6
1477
919
6
1477
984
6
1477
989
6
1477
990
6
1477
990
6
1477
1007
6
1477
1012
6
1477
1046
6
1477
1084
6
1477
1098
6
1477
1122
6
1477
1131
6
1477
1138
6
1477
1139
6
1477
1139
6
1477
1140
6
1477
1140
6
1477
1141
6
1477
1141
6
1477
1149
6
1477
1191
6
1477
1198
6
1477
1200
6
1477
1215
6
1477
1223
6
1477
1223
6
1477
1263
6
1477
1265
6
1477
1265
6
1477
1303
6
1477
1323
6
1477
1336
6
1477
1358
6
1477
1366
6
1477
1366
6
1477
1380
6
1477
1396
6
1477
1421
6
1477
1421
6
1477
1421
6
1477
1455
6
1477
1460
6
1477
1462
6
1477
1463
6
1477
1467
6
1477
1468
6
1477
1469
6
1477
1477
6
1477
1477
6
1477
1477
6
1477
1477
6
1477
1477
6
1477
1477
6
1477
1477
6
1477
1477
6
1477
1477
6
1477
1477
6
1477
1477
6
1477
1477
6
1477
1477
6
1477
1477
6
1477
1487
6
1477
1491
6
1477
1491
6
1477
1491
6
1477
1491
6
1477
1491
6
1477
1491
6
1477
1491
6
1477
1491
6
1477
1491
6
1477
1491
6
1477
1491
6
1477
1491
6
1477
1496
6
1477
1496
6
1477
1531
6
1477
1535
6
1477
1565
6
1477
1601
6
1477
1602
6
1477
1613
6
1477
1614
6
1477
1614
6
1477
1626
6
1477
1641
6
1477
1781
6
1477
1781
6
1477
1781
6
1477
1787
6
1477
1787
6
1477
1788
6
1477
205
6
1477
1825
6
1477
1825
6
1477
210
6
1477
224
6
1477
249
6
1477
1869
6
1477
288
6
1477
316
6
1477
381
6
1477
398
6
1477
2015
6
1477
2110
6
1477
2110
6
1477
2110
6
1477
2111
6
1477
11
6
1477
2126
6
1477
2534
6
1477
2534
6
1477
2556
6
1477
2556
6
1477
404
6
1477
404
6
1477
410
6
1477
463
6
1477
464
6
1477
483
6
1477
483
6
1477
3184
6
1477
3184
6
1477
3184
6
1477
3184
6
1477
3188
6
1477
577
6
1477
584
6
1477
584
6
1477
600
6
1477
669
6
1477
669
6
1477
680
6
1477
680
6
1477
680
6
1477
680
6
1477
691
6
1477
761
6
1477
763
6
1477
763
6
1477
773
6
1477
799
6
1477
799
6
1477
.i
1478
.t
exponential
curve
fit
(algorithm
275
[e2])
.b
cacm
february,
1966
.a
deily,
g.
r.
.n
ca660206a
jb
march
3,
1978
3:11
pm
.x
1478
5
1478
1478
5
1478
1478
5
1478
2694
5
1478
1478
6
1478
.i
1479
.t
constrained
exponential
curve
fit
(algorithm
276
[e2])
.b
cacm
february,
1966
.a
deily,
g.
r.
.n
ca660206b
jb
march
23,
1978
7:27
pm
.x
1479
5
1479
1479
5
1479
1479
5
1479
.i
1480
.t
computation
of
chebyshev
series
coefficients
(algorithm
277[c6])
.b
cacm
february,
1966
.a
smith,
l.
b.
.n
ca660206c
jb
march
23,
1978
7:28
pm
.x
1480
5
1480
1480
5
1480
1480
5
1480
1639
5
1480
1480
6
1480
.i
1481
.t
graph
plotter
(algorithm
278
[j6])
.b
cacm
february,
1966
.a
lloyd,
p.
.n
ca660206d
jb
march
23,
1978
7:30
pm
.x
1481
5
1481
1481
5
1481
1481
5
1481
.i
1482
.t
bugsys:
a
programming
system
for
picture
processing-not
for
debugging
.w
bugsys
is
a
picture
processing
and
measuring
system
that
depends
upon
a
pictorial
input
to
the
computer's
memory.
bugsys
can
be
used
for
many
types
of
applications.
in
particular,
the
authors
have
used
the
system
for
the
analysis
of
linear
graphs.
the
main
concept
of
the
system
is
the
use
of
a
collection
of
programmable
pointers,
which
are
visualized
as
a
family
of
"bugs."
.b
cacm
february,
1966
.a
ledley,
r.
s.
jacobsen,
j.
belson,
m.
.n
ca660205
jb
march
3,
1978
3:16
pm
.x
1482
5
1482
1482
5
1482
1482
5
1482
.i
1483
.t
a
comparison
of
the
fortran
language
implementation
for
several
computers
.w
a
feature-by-feature
comparison
is
made
of
five
different
implementations
of
fortran
iv
representing
three
different
manufacturers.
a
table
is
constructed
showing,
where
possible,
the
use
of
each
feature
in
each
implementation.
only
those
items
which
are
different
from,
or
have
been
added
to
fortran
ii
are
shown.
.b
cacm
february,
1966
.a
wright,
d.
l.
.n
ca660204
jb
march
3,
1978
3:19
pm
.x
1483
5
1483
1483
5
1483
1483
5
1483
.i
1484
.t
a
language
for
describing
the
functions
of
synchronous
systems*
.w
before
the
design
of
a
system
is
started,
the
exact
function
desired
of
it
should
be
specified.
it
is
suggested
that
a
computer-oriented
language
be
used
for
this
purpose.
the
inadequacies
of
the
standard
programming
languages
for
the
description
of
systems
are
discussed,
and
a
dialect
of
algol
which
is
suitable
for
describing
synchronous
systems
is
introduced.
these
descriptions
can
be
used
for
simulation
and
automatic
design
of
the
system
described,
in
addition
to
communicating
system
specifications.
.b
cacm
february,
1966
.a
parnas,
d.
l.
.n
ca660203
jb
march
3,
1978
3:23
pm
.x
1086
4
1484
1132
4
1484
1234
4
1484
1263
4
1484
1265
4
1484
1270
4
1484
1323
4
1484
1358
4
1484
1379
4
1484
1380
4
1484
1453
4
1484
1464
4
1484
1484
4
1484
1491
4
1484
1498
4
1484
1613
4
1484
1614
4
1484
1781
4
1484
1825
4
1484
1860
4
1484
2083
4
1484
2178
4
1484
2179
4
1484
2252
4
1484
2325
4
1484
2341
4
1484
2546
4
1484
2645
4
1484
2652
4
1484
2684
4
1484
2842
4
1484
2929
4
1484
2934
4
1484
3069
4
1484
669
4
1484
679
4
1484
691
4
1484
761
4
1484
949
4
1484
989
4
1484
1484
5
1484
1484
5
1484
1484
5
1484
1846
5
1484
3184
5
1484
1380
6
1484
1424
6
1484
1484
6
1484
1572
6
1484
576
6
1484
.i
1485
.t
the
structure
of
programming
languages
.w
in
this
paper
the
major
components
of
every
programming
language
are
identified
as:
(1)
the
elementary
program
statement,
(2)
mechanisms
for
linking
elementary
statements
together,
(3)
the
means
by
which
a
program
can
obtain
data
inputs.
several
alternative
forms
of
each
of
these
components
are
also
described,
compared
and
evaluated.
many
examples,
frequently
from
list
processing
languages,
illustrate
the
forms
described.
the
advantages,
disadvantages
and
factors
influencing
the
choice
of
a
form
of
component
for
a
language
are
discussed,
and
the
paper
concludes
with
the
suggestion
that
programming
languages
evolve
toward
one
which
will
permit
all
the
most
convenient
ways
of
structuring
programs,
organizing
systems
and
referencing
data.
.b
cacm
february,
1966
.a
raphael,
b.
.n
ca660202
jb
march
3,
1978
3:46
pm
.x
1024
4
1485
1051
4
1485
1098
4
1485
1214
4
1485
1380
4
1485
1388
4
1485
1393
4
1485
1485
4
1485
1487
4
1485
1549
4
1485
1570
4
1485
1878
4
1485
1946
4
1485
1957
4
1485
2168
4
1485
2723
4
1485
2857
4
1485
3112
4
1485
1485
5
1485
1485
5
1485
1485
5
1485
731
5
1485
.i
1486
.t
a
reprogramming
machine
.w
in
this
paper
a
description
is
given
of
a
model
programming
system
which
is
directed
by
a
programming
language
and
has
a
library
for
storing
the
user's
items.
rules
are
given
for
transforming
programs
written
in
the
language
and
for
rearranging
the
items
in
the
library
so
that
they
share
their
common
parts.
some
speculations
are
made
about
how
the
mechanical
detection
of
common
parts
or
patterns
of
library
items
could
help
a
user
to
solve
his
problems,
and
about
the
relationships
between
the
behavior
of
the
reprogramming
machine
and
human
intelligent
behavior.
.b
cacm
february,
1966
.a
burge,
w.
h.
.n
ca660201
jb
march
3,
1978
3:50
pm
.x
1024
4
1486
1051
4
1486
1102
4
1486
1132
4
1486
1390
4
1486
1469
4
1486
1486
4
1486
1486
4
1486
1491
4
1486
1549
4
1486
1706
4
1486
1781
4
1486
1826
4
1486
1878
4
1486
378
4
1486
2060
4
1486
2155
4
1486
2168
4
1486
2178
4
1486
2326
4
1486
2470
4
1486
2684
4
1486
2719
4
1486
2723
4
1486
2838
4
1486
2842
4
1486
2855
4
1486
2879
4
1486
3044
4
1486
3077
4
1486
3080
4
1486
3106
4
1486
627
4
1486
106
4
1486
1303
5
1486
210
5
1486
1486
5
1486
1486
5
1486
1486
5
1486
.i
1487
.t
eliza-a
computer
program
for
the
study
ofnatural
language
communication
between
man
and
machine
.w
eliza
is
a
program
operating
within
the
mac
time-sharing
system
at
mit
which
makes
certain
kinds
of
natural
language
conversation
between
man
and
computer
possible.
input
sentences
are
analyzed
on
the
basis
of
decomposition
rules
which
are
triggered
by
key
words
appearing
in
the
input
text.
responses
are
generated
by
reassembly
rules
associated
with
selected
decomposition
rules.
the
fundamental
technical
problems
with
which
eliza
is
concerned
are:
(1)the
identification
of
key
words,
(2)
the
discovery
of
minimal
context,
(3)
the
choice
of
appropriate
transformations,
(4)
generation
of
responses
in
the
absence
of
key
words,
and
(5)
the
provision
of
an
editing
capability
for
eliza
"scripts".
a
discussion
of
some
psychological
issues
relevant
to
the
eliza
approach
as
well
as
of
future
developments
concludes
the
paper.
.b
cacm
january,
1966
.a
weizenbaum,
j.
.n
ca660108
jb
march
3,
1978
4:00
pm
.x
1024
4
1487
1051
4
1487
1098
4
1487
1214
4
1487
1380
4
1487
1388
4
1487
1393
4
1487
1485
4
1487
1487
4
1487
1549
4
1487
1570
4
1487
1878
4
1487
1946
4
1487
1957
4
1487
2168
4
1487
2723
4
1487
2857
4
1487
3112
4
1487
1400
5
1487
1487
5
1487
1487
5
1487
1487
5
1487
1553
5
1487
1945
5
1487
2127
5
1487
2396
5
1487
2730
5
1487
731
5
1487
823
6
1487
914
6
1487
915
6
1487
917
6
1487
984
6
1487
989
6
1487
990
6
1487
1012
6
1487
1084
6
1487
1098
6
1487
1122
6
1487
1138
6
1487
1139
6
1487
1141
6
1487
1155
6
1487
1200
6
1487
1223
6
1487
1265
6
1487
1324
6
1487
1336
6
1487
1396
6
1487
1455
6
1487
1477
6
1487
1487
6
1487
1487
6
1487
1487
6
1487
1487
6
1487
1487
6
1487
1487
6
1487
1491
6
1487
1496
6
1487
1527
6
1487
1781
6
1487
1856
6
1487
1856
6
1487
2092
6
1487
2127
6
1487
483
6
1487
584
6
1487
669
6
1487
680
6
1487
763
6
1487
.i
1488
.t
programming
decision
tables
in
fortran,
cobol
or
algol
.w
a
simple
broad-based
approach
for
programming
decision
tables
in
fortran
or
cobol
is
developed
and
presented.
with
inputs
in
standard
form,
as
defined
in
the
paper,
the
programming
of
any
decision
table
can
be
done
with
one
or
two
fortran
statements,
or
with
two
cobol
statements,
if
the
compute
verb
is
available
in
the
cobol
processor.
it
is
shown
that
the
method
is
applicable
even
when
there
are
more
than
two
mutually
exclusive
states
of
one,
two
or
more
table
conditions.
it
is
further
shown
that
multi-state
conditions
in
decision
tables
can
often
simplify
the
programming.
the
method
outlined
has
the
further
advantage
that
all
possible
combinations
of
conditions
are
considered.
it
is
shown
that
the
suggested
procedure
is
easily
implemented
in
algol.
.b
cacm
january,
1966
.a
veinott,
c.
g.
.n
ca660107
jb
march
3,
1978
4:08
pm
.x
1354
4
1488
1354
4
1488
1488
4
1488
1488
4
1488
1994
4
1488
2053
4
1488
2053
4
1488
2220
4
1488
2220
4
1488
2273
4
1488
2273
4
1488
2726
4
1488
2856
4
1488
1237
5
1488
1327
5
1488
1488
5
1488
1488
5
1488
1488
5
1488
1548
5
1488
2726
5
1488
1172
6
1488
1327
6
1488
1354
6
1488
1488
6
1488
1488
6
1488
1489
6
1488
1489
6
1488
1548
6
1488
2220
6
1488
2221
6
1488
2263
6
1488
.i
1489
.t
data,
documentation
and
decision
tables
.w
in
business
data
processing
systems,
it
is
necessary
to
be
able
to
define
and
document
data,
files,
programs
and
decision
rules
in
a
way
that
adequately
represents
both
(1)
their
changing
information
content,
and
(2)
their
continuous
interaction.
tabular
description
makes
this
possible,
being
notably
objective,
through
and
economical
in
cost
and
time
when
systems
must
be
analyzed
and
programs
prepared
or
modified.
to
show
how
quickly
tabular
techniques
make
an
unfamiliar
system
manageable,
a
detailed
example
and
a
self-test
are
provided.
.b
cacm
january,
1966
.a
fisher,
d.
l.
.n
ca660106
jb
march
3,
1978
4:13
pm
.x
1489
5
1489
1489
5
1489
1489
5
1489
1548
5
1489
2220
5
1489
2726
5
1489
1172
6
1489
1172
6
1489
1237
6
1489
1327
6
1489
1327
6
1489
1354
6
1489
1354
6
1489
1488
6
1489
1488
6
1489
1489
6
1489
1489
6
1489
1489
6
1489
1548
6
1489
1548
6
1489
250
6
1489
2220
6
1489
2221
6
1489
2263
6
1489
.i
1490
.t
one
inch
perforated
paper
tape
for
information
interchange
(proposed
american
standard)
.b
cacm
january,
1966
.n
ca660105
jb
march
3,
1978
4:14
pm
.x
1490
5
1490
1490
5
1490
1490
5
1490
.i
1491
.t
euler:
a
generalization
algol,
and
its
formal
definition:
part
i*
.w
a
method
for
defining
programming
languages
is
developed
which
introduces
a
rigorous
relationship
between
structure
and
meaning.
the
structure
of
a
language
is
defined
by
a
phrase
structure
syntax,
the
meaning
in
terms
of
the
effects
which
the
execution
of
a
sequence
of
interpretation
rules
exerts
upon
a
fixed
set
of
variables,
called
the
environment.
there
exists
a
one-to-one
correspondence
between
syntactic
rules
and
interpretation
rules
is
determined
by
the
sequence
of
corresponding
syntactic
reductions
which
constitute
a
parse.
the
individual
interpretation
rules
are
explained
in
terms
of
an
elementary
an
d
obvious
algorithmic
notation.
a
constructive
method
for
evaluating
a
text
is
provided,
and
for
certain
decidable
classes
of
languages
their
unambiguity
is
proved.
as
an
example,
a
generalization
of
algol
is
described
in
full
detail
to
demonstrate
that
concepts
like
block-structure,
procedures,
parameters,
etc.
can
be
defined
adequately
and
precisely
by
this
method.
.b
cacm
january,
1966
.a
wirth,
n.
weber,
h.
.n
ca660104
jb
march
3,
1978
4:22
pm
.x
249
4
1491
254
4
1491
272
4
1491
1037
4
1491
1086
4
1491
1102
4
1491
1109
4
1491
1132
4
1491
1140
4
1491
1188
4
1491
1234
4
1491
1234
4
1491
1263
4
1491
1265
4
1491
1270
4
1491
1306
4
1491
1323
4
1491
1358
4
1491
1358
4
1491
1379
4
1491
1380
4
1491
1453
4
1491
1464
4
1491
1464
4
1491
1469
4
1491
1484
4
1491
1486
4
1491
1491
4
1491
1491
4
1491
1491
4
1491
1491
4
1491
1491
4
1491
1498
4
1491
1613
4
1491
1614
4
1491
1767
4
1491
1781
4
1491
1781
4
1491
1781
4
1491
1781
4
1491
1787
4
1491
1825
4
1491
1860
4
1491
1949
4
1491
321
4
1491
2059
4
1491
2061
4
1491
2083
4
1491
2126
4
1491
2178
4
1491
2178
4
1491
2179
4
1491
2252
4
1491
2325
4
1491
2326
4
1491
2341
4
1491
2470
4
1491
2546
4
1491
435
4
1491
437
4
1491
463
4
1491
483
4
1491
491
4
1491
2645
4
1491
2652
4
1491
2684
4
1491
2684
4
1491
2732
4
1491
2842
4
1491
2929
4
1491
2934
4
1491
560
4
1491
583
4
1491
3044
4
1491
3069
4
1491
3073
4
1491
627
4
1491
631
4
1491
632
4
1491
642
4
1491
644
4
1491
653
4
1491
669
4
1491
679
4
1491
680
4
1491
691
4
1491
761
4
1491
761
4
1491
762
4
1491
763
4
1491
123
4
1491
140
4
1491
919
4
1491
949
4
1491
989
4
1491
989
4
1491
196
5
1491
1140
5
1491
1303
5
1491
1491
5
1491
1491
5
1491
1491
5
1491
1542
5
1491
1683
5
1491
1693
5
1491
1781
5
1491
1787
5
1491
1836
5
1491
1945
5
1491
2060
5
1491
2061
5
1491
2082
5
1491
2091
5
1491
2152
5
1491
2179
5
1491
2340
5
1491
2356
5
1491
2546
5
1491
2603
5
1491
2698
5
1491
2708
5
1491
2824
5
1491
2982
5
1491
2986
5
1491
3045
5
1491
3093
5
1491
3184
5
1491
729
5
1491
823
6
1491
123
6
1491
196
6
1491
196
6
1491
914
6
1491
915
6
1491
917
6
1491
919
6
1491
970
6
1491
984
6
1491
989
6
1491
990
6
1491
990
6
1491
1007
6
1491
1012
6
1491
1046
6
1491
1084
6
1491
1098
6
1491
1122
6
1491
1131
6
1491
1138
6
1491
1139
6
1491
1139
6
1491
1140
6
1491
1140
6
1491
1141
6
1491
1141
6
1491
1141
6
1491
1141
6
1491
1149
6
1491
1191
6
1491
1191
6
1491
1198
6
1491
1200
6
1491
1215
6
1491
1215
6
1491
1223
6
1491
1223
6
1491
1265
6
1491
1265
6
1491
1303
6
1491
1323
6
1491
1336
6
1491
1358
6
1491
1366
6
1491
1366
6
1491
1380
6
1491
1396
6
1491
1421
6
1491
1421
6
1491
1421
6
1491
1455
6
1491
1460
6
1491
1462
6
1491
1463
6
1491
1467
6
1491
1468
6
1491
1469
6
1491
1477
6
1491
1477
6
1491
1477
6
1491
1477
6
1491
1477
6
1491
1477
6
1491
1477
6
1491
1477
6
1491
1477
6
1491
1477
6
1491
1477
6
1491
1477
6
1491
1487
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1496
6
1491
1496
6
1491
1496
6
1491
1531
6
1491
1535
6
1491
1565
6
1491
1601
6
1491
1602
6
1491
1613
6
1491
1614
6
1491
1614
6
1491
1626
6
1491
1641
6
1491
1683
6
1491
1683
6
1491
1683
6
1491
1767
6
1491
1781
6
1491
1781
6
1491
1781
6
1491
1787
6
1491
1787
6
1491
1788
6
1491
205
6
1491
1825
6
1491
1825
6
1491
210
6
1491
1836
6
1491
1836
6
1491
1836
6
1491
224
6
1491
224
6
1491
249
6
1491
1869
6
1491
288
6
1491
316
6
1491
381
6
1491
398
6
1491
2015
6
1491
2110
6
1491
2110
6
1491
2110
6
1491
2111
6
1491
11
6
1491
2126
6
1491
2179
6
1491
2179
6
1491
2227
6
1491
2340
6
1491
2340
6
1491
2340
6
1491
2534
6
1491
2534
6
1491
2556
6
1491
2556
6
1491
2708
6
1491
404
6
1491
404
6
1491
410
6
1491
463
6
1491
464
6
1491
483
6
1491
483
6
1491
3184
6
1491
3184
6
1491
3184
6
1491
3188
6
1491
3198
6
1491
518
6
1491
577
6
1491
584
6
1491
584
6
1491
600
6
1491
669
6
1491
680
6
1491
680
6
1491
680
6
1491
680
6
1491
680
6
1491
691
6
1491
763
6
1491
763
6
1491
763
6
1491
763
6
1491
773
6
1491
799
6
1491
799
6
1491
799
6
1491
.i
1492
.t
serrev
(algorithm
273
[c1])
.b
cacm
january,
1966
.a
thacher
jr.,
h.
c.
.n
ca660103a
jb
march
3,
1978
4:23
pm
.x
1492
5
1492
1492
5
1492
1492
5
1492
.i
1493
.t
generation
of
hilbert
derived
test
matrix
(algorithm
274
[f1])
.b
cacm
january,
1966
.a
boothroyd,
j.
.n
ca660103b
jb
march
23,
1978
7:32
pm
.x
1493
5
1493
1493
5
1493
1493
5
1493
.i
1494
.t
complete
elliptic
integral
of
the
second
kind
(algorithm
56
[s21])
.b
cacm
january,
1966
.a
larssen,
g.
m.
.n
ca660103c
jb
march
23,
1978
7:33
pm
.x
1494
4
1494
1494
5
1494
1494
5
1494
1494
5
1494
1495
5
1494
1494
6
1494
.i
1495
.t
solution
of
transcendental
equations
by
series
reversion
.w
an
algorithm
is
developed
for
expressing
the
solution
y,
of
the
equation
f(y)
=
g(x)
as
a
power
series
in
(x
-
x0)
when
f
and
g
are
given
as
power
series,and
the
root
y0,
is
known
at
y=x0.
the
algorithm
is
illustrated
for
the
equation
y^y
=
x,
i.e.,
(1+y)*ln(1+y)
=
ln(1+x).
.b
cacm
january,
1966
.a
thacher
jr.,
h.
c.
.n
ca660102
jb
march
3,
1978
4:27
pm
.x
1495
4
1495
1494
5
1495
1495
5
1495
1495
5
1495
1495
5
1495
1495
6
1495
.i
1496
.t
a
formal
semantics
for
computer
languages
and
its
application
in
a
compiler-compiler
.w
a
semantic
meta-language
has
been
developed
for
representing
the
meanings
of
statements
in
a
large
class
of
computer
languages.
this
meta-language
has
been
the
basis
for
construction
of
an
efficient,
functioning
compiler-compiler.
an
informal
discussion
of
the
meta-language
based
on
the
example
of
a
complete
translator
for
a
small
language
is
presented.
.b
cacm
january,
1966
.a
feldman,
j.
a.
.n
ca660101
jb
march
3,
1978
4:31
pm
.x
1046
4
1496
1086
4
1496
1105
4
1496
1139
4
1496
1140
4
1496
1234
4
1496
1263
4
1496
1265
4
1496
1496
4
1496
1496
4
1496
1496
4
1496
1683
4
1496
1768
4
1496
1781
4
1496
1787
4
1496
1824
4
1496
1945
4
1496
2061
4
1496
2126
4
1496
2546
4
1496
464
4
1496
584
4
1496
631
4
1496
653
4
1496
680
4
1496
763
4
1496
795
4
1496
799
4
1496
945
4
1496
1137
5
1496
1141
5
1496
1396
5
1496
1496
5
1496
1496
5
1496
1496
5
1496
1767
5
1496
1781
5
1496
1787
5
1496
1860
5
1496
1945
5
1496
1988
5
1496
2252
5
1496
404
5
1496
823
6
1496
123
6
1496
196
6
1496
196
6
1496
196
6
1496
914
6
1496
915
6
1496
917
6
1496
919
6
1496
964
6
1496
984
6
1496
989
6
1496
990
6
1496
990
6
1496
1007
6
1496
1012
6
1496
1028
6
1496
1029
6
1496
1046
6
1496
1083
6
1496
1084
6
1496
1098
6
1496
1122
6
1496
1131
6
1496
1132
6
1496
1138
6
1496
1139
6
1496
1139
6
1496
1140
6
1496
1141
6
1496
1141
6
1496
1149
6
1496
1198
6
1496
1200
6
1496
1214
6
1496
1215
6
1496
1215
6
1496
1223
6
1496
1223
6
1496
1265
6
1496
1265
6
1496
1278
6
1496
1303
6
1496
1323
6
1496
1334
6
1496
1336
6
1496
1358
6
1496
1358
6
1496
1365
6
1496
1366
6
1496
1366
6
1496
1386
6
1496
1387
6
1496
1388
6
1496
1389
6
1496
1392
6
1496
1393
6
1496
1394
6
1496
1395
6
1496
1396
6
1496
1396
6
1496
1397
6
1496
1421
6
1496
1421
6
1496
1455
6
1496
1460
6
1496
1462
6
1496
1463
6
1496
1467
6
1496
1467
6
1496
1468
6
1496
1468
6
1496
1477
6
1496
1477
6
1496
1487
6
1496
1491
6
1496
1491
6
1496
1491
6
1496
1496
6
1496
1496
6
1496
1496
6
1496
1496
6
1496
1496
6
1496
1496
6
1496
1496
6
1496
1496
6
1496
1531
6
1496
1535
6
1496
1565
6
1496
1601
6
1496
1602
6
1496
1613
6
1496
1614
6
1496
1626
6
1496
1626
6
1496
1641
6
1496
1641
6
1496
1781
6
1496
1785
6
1496
1786
6
1496
1787
6
1496
1788
6
1496
205
6
1496
224
6
1496
224
6
1496
249
6
1496
284
6
1496
288
6
1496
316
6
1496
378
6
1496
381
6
1496
381
6
1496
398
6
1496
11
6
1496
11
6
1496
14
6
1496
2155
6
1496
404
6
1496
407
6
1496
410
6
1496
463
6
1496
464
6
1496
483
6
1496
483
6
1496
3184
6
1496
3184
6
1496
3184
6
1496
3188
6
1496
3199
6
1496
3200
6
1496
3201
6
1496
3202
6
1496
3203
6
1496
3204
6
1496
561
6
1496
584
6
1496
584
6
1496
600
6
1496
669
6
1496
680
6
1496
680
6
1496
691
6
1496
730
6
1496
763
6
1496
763
6
1496
763
6
1496
799
6
1496
799
6
1496
.i
1497
.t
on
the
normalization
requirement
of
divisor
in
divide-
and-
correct
methods
.w
this
paper
presents
an
analysis
on
the
normalization
requirement
of
the
divisor
in
a
divide-and-correct
method.
this
analysis
is
made
subject
to
the
condition
that
not
more
than
one
correction
is
required
to
obtain
the
true
quotient
character,
from
the
trial
estimate
got
from
the
division
of
a
two-precision
segment
of
every
partial
remainder
by
a
suitably
rounded
single-precision
divisor.
(this
segmented
division
is
denoted
here
as
a
(2,
1)
precision
basic
division.)
it
is
found
that
the
normalization
requirement
could
be
narrowed
down
to
a
smaller
range
of
divisors,
provided
the
magnitude
of
the
character
next
to
the
leading
character
of
the
divisor
is
known.
if,
however,
the
normalization
is
to
be
eliminated
one
has
to
choose
proper
higher
precision
segments
of
operands
for
the
basic
division.
also
considered
is
the
possibility
of
eliminating
the
normalization
by
an
increase
on
the
number
of
corrections
on
the
quotient
estimate
got
from
a
(2,
1)
precision
basic
division.
it
is
shown
that
such
a
scheme
is
economical
only
for
small
radices.
.b
cacm
december,
1967
.a
krishnamurthy,
e.
v.
nandi,
s.
k.
.n
ca671210
jb
february
26,
1978
2:15
pm
.x
1026
4
1497
1258
4
1497
1258
4
1497
1292
4
1497
1292
4
1497
1497
4
1497
1497
4
1497
1497
4
1497
1497
4
1497
1593
4
1497
1975
4
1497
1975
4
1497
2605
4
1497
107
5
1497
1026
5
1497
1292
5
1497
1497
5
1497
1497
5
1497
1497
5
1497
1593
5
1497
1975
5
1497
1026
6
1497
1292
6
1497
1497
6
1497
.i
1498
.t
the
alcor
illinois
7090/7094
post
mortem
dump
.w
a
dump
technique
for
programs
written
in
algol
60
is
described.
this
technique
provides
an
intelligible
analysis
of
an
unsuccessful
computation
process
in
terms
of
the
original
source
program.
.b
cacm
december,
1967
.a
bayer,
r.
gries,
d.
paul,
m.
wiehle,
h.
r.
.n
ca671209
jb
february
26,
1978
2:18
pm
.x
1086
4
1498
1132
4
1498
1234
4
1498
1263
4
1498
1265
4
1498
1270
4
1498
1323
4
1498
1358
4
1498
1379
4
1498
1380
4
1498
1453
4
1498
1464
4
1498
1484
4
1498
1491
4
1498
1498
4
1498
1498
4
1498
1613
4
1498
1614
4
1498
1781
4
1498
1781
4
1498
1787
4
1498
1825
4
1498
1860
4
1498
2083
4
1498
2178
4
1498
2179
4
1498
2252
4
1498
2325
4
1498
2341
4
1498
2546
4
1498
2645
4
1498
2652
4
1498
2684
4
1498
2842
4
1498
2929
4
1498
2934
4
1498
3069
4
1498
669
4
1498
679
4
1498
691
4
1498
761
4
1498
949
4
1498
989
4
1498
1215
5
1498
1498
5
1498
1498
5
1498
1498
5
1498
3184
5
1498
.i
1499
.t
chebyschev
curve-fit
(revised)
(algorithm
318
[e2])
.b
cacm
december,
1967
.a
boothroyd,
j.
.n
ca671208a
jb
february
26,
1978
2:20
pm
.x
1499
5
1499
1499
5
1499
1499
5
1499
.i
1500
.t
chebyschev
curve-fit
(algorithm
91
[e2])
.b
cacm
december,
1967
.a
boothroyd,
j.
.n
ca671208b
jb
march
23,
1978
2:11
pm
.x
1500
5
1500
1500
5
1500
1500
5
1500
.i
1501
.t
eigenvectors
of
a
2n
x
2n
matrix
.w
it
has
been
known
that
the
eigenvalues
of
a
certain
2n
x
2n
matrix
can
be
obtained
by
use
of
two
smaller
matrices
of
order
n
which
can
be
easily
constructed.
an
algorithm
is
given
to
obtain
the
eigenvectors
of
the
2n
x
2n
matrix
by
use
of
the
eigenvectors
of
the
smaller
matrices.
.b
cacm
december,
1967
.a
charmonman,
s.
.n
ca671207
jb
february
26,
1978
2:22
pm
.x
1501
5
1501
1501
5
1501
1501
5
1501
.i
1502
.t
an
online
editor
.w
an
online,
interactive
system
for
test
editing
is
described
in
detail,
with
remarks
on
the
theoretical
and
experimental
justification
for
its
form.
emphasis
throughout
the
system
is
on
providing
maximum
convenience
and
power
for
the
user.
notable
features
are
its
ability
to
handle
any
piece
of
text,
the
content-searching
facility,
and
the
character-by-character
editing
operations.
the
editor
can
be
programmed
to
a
limited
extent.
.b
cacm
december,
1967
.a
deutsch,
l.
p.
lampson,
b.
w.
.n
ca671206
jb
february
26,
1978
2:25
pm
.x
1502
5
1502
1502
5
1502
1502
5
1502
2299
5
1502
2501
5
1502
2629
5
1502
2915
5
1502
3114
5
1502
1502
6
1502
1502
6
1502
1502
6
1502
1502
6
1502
1502
6
1502
1641
6
1502
1751
6
1502
1900
6
1502
2380
6
1502
2499
6
1502
2745
6
1502
.i
1503
.t
a
simscript-fortran
case
study
.w
two
programs
for
a
vehicle
dispatching
model,
one
written
in
7040
simscript
and
the
other
in
7040
fortran
iv
are
compared.
the
comparison
is
made
in
terms
of
basic
program
design
decisions,
storage
requirements,
computer
time
used,
and
the
ease
of
making
changes.
in
the
simscript
program,
the
primary
design
considerations
center
around
the
choice
of
model
variables,
model
changing
events,
and
model
testing.
in
the
fortran
program,
basic
design
problems
relate
to
the
representation
of
the
passage
of
time,
the
allocation
of
storage,
and
the
organization
of
input
data.
the
comparison
of
these
differently
designed
programs
shows
that
the
simscript
program
uses
more
computer
storage
and
more
computer
time,
but
requires
fewer
program
changes
to
introduce
model
revisions.
.b
cacm
december,
1967
.a
weinert,
a.
e.
.n
ca671205
jb
february
26,
1978
2:30
pm
.x
1503
4
1503
1781
4
1503
1860
4
1503
2091
4
1503
1366
5
1503
1503
5
1503
1503
5
1503
1503
5
1503
.i
1504
.t
algorithms
for
finding
a
fundamental
set
of
cycles
for
an
undirected
linear
graph
.w
given
the
adjacency
matrix
of
the
graph,
the
algorithm
presented
in
this
paper
finds
a
spanning
tree
and
then
constructs
the
set
of
fundamental
cycles.
our
algorithm
is
slower
than
an
algorithm
presented
by
welch
by
a
ratio
of
n/3
(n
is
the
number
of
nodes)
but
requires
less
storage.
for
graphs
with
a
large
number
of
nodes
and
edges,
when
storage
is
limited
our
algorithm
is
superior
to
welch's;
however,
when
the
graphs
are
small,
or
machine
storage
is
very
large,
welch's
algorithm
is
superior.
timing
estimates
and
storage
requirements
for
both
methods
are
presented.
.b
cacm
december,
1967
.a
gotlieb,
c.
c.
corneil,
d.
g.
.n
ca671204
jb
february
26,
19782:35
pm
.x
1504
4
1504
3040
4
1504
1145
5
1504
1504
5
1504
1504
5
1504
1504
5
1504
1847
5
1504
1961
5
1504
2052
5
1504
1008
6
1504
1013
6
1504
1369
6
1504
1504
6
1504
1504
6
1504
1504
6
1504
1540
6
1504
1847
6
1504
.i
1505
.t
a
system
organization
for
resource
allocation
.w
this
paper
introduces
a
system
for
resource
management
using
the
concepts
of
"process,"
facility,"
and
"event."
except
for
the
processor
no
attempt
has
been
made
to
give
serious
suggestions
for
the
policy
to
be
followed
for
resource
allocation.
however,
a
basic
framework
is
provided
in
which
a
system
analyst
can
express
solutions
to
resource
management
problems.
the
paper
is
divided
into
a
tutorial
presentation,
a
description
of
the
system
primitives,
and
a
small
collection
of
examples
of
the
use
of
the
primitives.
.b
cacm
december,
1967
.a
dahm,
d.
m.
gerbstadt,
f.
h.
pacelli,
m.
m.
.n
ca671203
jb
february
26,
1978
2:40
pm
.x
1505
5
1505
1505
5
1505
1505
5
1505
.i
1506
.t
the
laconiq
monitor:
time
sharing
for
online
dialogues
.w
the
laconiq
(laboratory
computer
online
inquiry)
monitor
was
developed
primarily
to
support
non-numerical
applications
such
as
retrieval
from
very
large
files
by
means
of
a
"dialogue"
between
a
system
user
and
a
retrieval
application.
the
monitor
was
designed
so
that
it
could
work
with
a
small
computer
(an
ibm
system
360/30).
therefore
techniques
for
resource
allocation
were
important.
for
this
reason
the
use
of
core
storage,
computational
facilities,
and
input-output
were
all
scheduled.
an
unusual
feature
of
the
system
is
that
it
is
event-driven
rather
than
clock-driven.
the
program
segments
called
into
execution
by
the
remote
crt
consoles
are
invariably
run
to
completion
rather
than
"rolled-out"
to
be
brought
back
at
a
later
time.
.b
cacm
december,
1967
.a
drew,
d.
l.
.n
ca671202
jb
february
26,
1978
2:45
pm
.x
1506
5
1506
1506
5
1506
1506
5
1506
.i
1507
.t
a
multiprogramming
environment
for
online
data
acquis
ition
and
analysis
.w
an
experimental
system
for
acquis
ition
and
analysis
of
large
bodies
of
data
derived
from
scientific
experiments
is
described.
its
architecture
and
implementation
is
largely
based
on
certain
objectives
and
characteristics
of
a
general
data
analysis
scheme.
early
applications
have
been
oriented
towards
the
investigation
of
data
obtained
in
biological
research.
some
of
the
problems
encountered
by
the
chosen
approach
are
discussed.
.b
cacm
december,
1967
.a
lockemann,
p.
c.
knutsen,
w.
d.
.n
ca671201
jb
february
26,
1978
2:48
pm
.x
1507
5
1507
1507
5
1507
1507
5
1507
1712
5
1507
1507
6
1507
.i
1508
.t
magnetic
tape
labels
for
information
interchange
(proposed
usa
standard)
.b
cacm
november,
1967
.n
ca671109
jb
february
26,
1978
2:49
pm
.x
1508
5
1508
1508
5
1508
1508
5
1508
.i
1509
.t
recorded
magnetic
tape
for
information
interchange
(200
cpi,
nrzi)
(proposed
usa
standard)
.b
cacm
november,
1967
.n
ca671108
jb
february
26,
1978
2:52
pm
.x
1509
5
1509
1509
5
1509
1509
5
1509
.i
1510
.t
finding
a
solution
of
n
functional
equations
in
n
unknown
(algorithm
314
[c5])
.b
cacm
november,
1967
.a
dulley,
d.b.
pitteway,
l.
v.
.n
ca671107a
jb
february
26,
1978
2:54
pm
.x
1510
5
1510
1510
5
1510
1510
5
1510
.i
1511
.t
the
damped
taylor's
series
method
for
minimizing
a
sum
of
squares
and
for
solving
systems
of
nonlinear
equations
.b
cacm
november,
1967
.a
spath,
h.
.n
ca671107b
jb
march
23,
1978
2:17
pm
.x
1511
5
1511
1511
5
1511
1511
5
1511
1820
5
1511
1511
6
1511
.i
1512
.t
solution
of
simultaneous
non-linear
equations
(algorithm
316[c5])
.b
cacm
november,
1967
.a
brown,
k.
m.
.n
ca671107c
jb
march
23,
1978
2:19
pm
.x
1512
5
1512
1512
5
1512
1512
5
1512
.i
1513
.t
permutation
(algorithm
317
[g6])
.b
cacm
november,
1967
.a
robinson,
c.
l.
.n
ca671107d
jb
march
23,
1978
2:21
pm
.x
1513
5
1513
1513
5
1513
1513
5
1513
.i
1514
.t
on
the
expected
gain
from
adjust
ing
matched
term
retrieval
systems
.w
a
file
adjustment
procedure
based
on
maximizing
the
bayes
expected
gain
proposed
for
matched
term
retrieval
systems.
the
expected
gain
and
its
probability
distribution
are
derived
as
a
function
of:
(1)
the
prior
proportion
of
omitted
terms,
and
(2)
the
coefficient
of
separation
between
two
distributions
corresponding
to
values
of
an
adjustment
statistic.
an
example
evaluates
the
gain
parameters
for
a
typical
information
retrieval
system.
.b
cacm
november,
1967
.a
shumway,
r.
h.
.n
ca671106
jb
february
26,
1978
2:59
pm
.x
1514
5
1514
1514
5
1514
1514
5
1514
.i
1515
.t
a
computer
system
for
inference
execution
and
data
retrieval
.w
this
paper
presents
a
rand
project
concerned
with
the
use
of
computers
as
assistants
in
the
logical
analysis
of
large
collections
of
factual
data.
a
system
called
relational
data
file
was
developed
for
this
purpose.
the
relational
data
file
is
briefly
detailed
and
problems
arising
from
its
implementation
are
discussed.
.b
cacm
november,
1967
.a
levien,
r.
e.
.n
ca671105
jb
february
26,
1978
3:02
pm
.x
1155
4
1515
1456
4
1515
1468
4
1515
1515
4
1515
1515
4
1515
1699
4
1515
1856
4
1515
2096
4
1515
2127
4
1515
2127
4
1515
2210
4
1515
1155
5
1515
1324
5
1515
1515
5
1515
1515
5
1515
1515
5
1515
2046
5
1515
2710
5
1515
1515
6
1515
1515
6
1515
2046
6
1515
2715
6
1515
616
6
1515
.i
1516
.t
automatic
data
compression
.w
the
"information
explosion"
noted
in
recent
years
makes
it
essential
that
storage
requirements
for
all
information
be
kept
to
a
minimum.
a
fully
automatic
and
rapid
three-part
compressor
which
can
be
used
with
"any"
body
of
information
to
greatly
reduce
slow
external
storage
requirements
and
to
increase
the
rate
of
information
transmission
through
a
computer
is
described
in
this
paper.
the
system
will
also
automatically
decode
the
compressed
information
on
an
item-by-item
basis
when
it
is
required.
the
three
component
compressors,
which
can
be
used
separately
to
accomplish
their
specific
tasks,
are
discussed:
nupak
for
the
automatic
compression
of
numerical
data,
anpak
for
the
automatic
compression
of
"any"
information,
and
iopak
for
further
compression
of
information
to
be
stored
on
tape
or
cards.
.b
cacm
november,
1967
.a
marron,
b.
a.
demaine,
p.
a.
d.
.n
ca671104
jb
february
26,
1978
3:08
pm
.x
1516
5
1516
1516
5
1516
1516
5
1516
.i
1517
.t
methods
for
analyzing
data
from
computer
simulation
experiments
.w
this
paper
addresses
itself
to
the
problem
of
analyzing
data
generated
by
computer
simulations
of
economic
systems.
we
first
turn
to
a
hypothetical
firm,
whose
operation
is
represented
by
single-channel,
multistation
queueing
model.
the
firm
seeks
to
maximize
total
expected
profit
for
the
coming
period
by
selecting
one
of
five
operating
plans,
where
each
plan
incorporates
a
certain
marketing
strategy,
an
allocation
of
productive
inputs,
and
a
total
cost.
the
results
of
the
simulated
activity
under
each
plan
are
subjected
to
an
f-test,
two
multiple
comparison
methods,
and
a
multiple
ranking
method.
we
illustrate,
compare,
and
evaluate
these
techniques.
the
paper
adopts
the
position
that
the
particular
technique
of
analysis
(possibly
not
any
one
of
the
above)
chosen
by
the
experimenter
should
be
an
expression
of
his
experimental
objective:
the
f-test
tests
the
homogeneity
of
the
plans;
multiple
comparison
methods
quantify
their
differences;
and
multiple
ranking
methods
directly
identify
the
one
best
plan
or
best
plans.
.b
cacm
november,
1967
.a
naylor,
t.
h.
wertz,
k.
wonnacott,
t.
h.
.n
ca671103
jb
february
26,
1978
3:15
pm
.x
1517
4
1517
1435
5
1517
1517
5
1517
1517
5
1517
1517
5
1517
.i
1518
.t
an
experimental
model
of
system/360
.w
the
problem
of
predicting
the
performance
of
modern
computer
systems
is
formidable.
one
general
technique
which
can
ease
this
problem
is
macroscopic
simulation.
this
paper
reports
on
the
applicability
of
that
technique
to
system/360.
the
paper
describes
an
experimental
model
of
system/360-its
hardware,
software,
and
its
environment.
the
measures
of
system
performance
produced
by
the
model
consist
of
statistics
relating
to
turnaround
time,
throughput,
hardware
utilization,
software
utilization,
and
queueing
processes.
the
model
is
mechanized
in
simscript
and
consists
of
some
1750
statements.
an
auxiliary
programs,
the
job
generator,
creates
automatically
the
properties
of
system/360
jobs
that
get
simulated.
.b
cacm
november,
1967
.a
katz,
j.
h.
.n
ca671102
jb
february
26,1978
3:20
pm
.x
1518
5
1518
1518
5
1518
1518
5
1518
1805
5
1518
1912
5
1518
1518
6
1518
1518
6
1518
1572
6
1518
1748
6
1518
.i
1519
.t
george
3-a
general
purpose
time
sharing
and
operating
system
.w
an
operating
system
is
described
which
will
run
on
a
wide
variety
of
configurations
of
the
i.c.t.
1900,
and
can
handle
a
large
number
of
online
console
users
while
at
the
same
time
running
several
off
line
(background)
jobs.
the
system
is
not
oriented
towards
either
mode
and
can
be
either
a
batch
processing
system
(such
as
the
atlas
supervisor,
ibsys,
or
gecos),
or
a
multiaccess
system
(resembling,
to
the
user,
ctss
or
multics),
or
both
simultaneously,
depending
on
the
installation,
which
can
adjust
the
schedulers.
both
online
users
and
off
line
jobs
use
a
common
command
language.
the
system
includes
a
multilevel
device-independent
file
store.
.b
cacm
november,
1967
.a
oestreicher,
m.
d.
bailey,
m.
j.
strauss,
j.
i.
.n
ca671101
jb
february
27,
1978
1:47
pm
.x
1519
5
1519
1519
5
1519
1519
5
1519
.i
1520
.t
absolute
value
and
square
root
of
a
complex
number
(algorithm
312
[a2])
.b
cacm
october,
1967
.a
friedland,
p.
.n
ca671012a
jb
february
27,
1978
1:49
pm
.x
1520
5
1520
1520
5
1520
1520
5
1520
.i
1521
.t
multi-dimensional
partition
generator
(algorithm
313
[a1])
.b
cacm
october,
1967
.a
bratley,
p.
mckay,
j.
k.
s.
.n
ca671012b
jb
march
23,
1978
2:26
pm
.x
1521
5
1521
1521
5
1521
1521
5
1521
2354
5
1521
2355
5
1521
1418
6
1521
1418
6
1521
1521
6
1521
1521
6
1521
1597
6
1521
1597
6
1521
1679
6
1521
1883
6
1521
2040
6
1521
2350
6
1521
2350
6
1521
2354
6
1521
2355
6
1521
.i
1522
.t
chebyschev
quadrature
(algorithm
279
[d1])
.b
cacm
october,
1967
.a
hillstrom,
k.
.n
ca671012c
jb
march
23,
1978
2:31
pm
.x
1522
5
1522
1522
5
1522
1522
5
1522
.i
1523
.t
sharer,
a
time
sharing
system
for
the
cdc
6600
.w
a
time
sharing
system
embedded
within
the
standard
batch
processing
system
for
the
cdc
6600
is
described.
the
system
is
general
purpose
and
file-based,
providing
facilities
for
file
input,
manipulation,
editing,
compilation,
and
conversational
execution.
it
uses
a
simple
scheme
for
system
extension
for
a
machine
with
only
one
relocation
and
memory
bound
register.
no
attempt
was
made
to
use
reentrant
code,
or
to
simulate
segmentation
or
paging.
implementation
time
was
approximately
six
man-years,
with
the
majority
of
the
code
being
written
in
fortran.
.b
cacm
october,
1967
.a
harrison,
m.
c.
schwartz,
j.
t.
.n
ca671011
jb
february
27,
1978
1:53
pm
.x
1458
4
1523
1523
4
1523
1603
4
1523
1698
4
1523
1747
4
1523
1748
4
1523
1854
4
1523
1877
4
1523
1960
4
1523
2377
4
1523
2378
4
1523
2497
4
1523
2558
4
1523
2625
4
1523
2632
4
1523
2840
4
1523
2941
4
1523
3105
4
1523
3144
4
1523
1471
5
1523
1523
5
1523
1523
5
1523
1523
5
1523
1657
5
1523
2080
5
1523
2357
5
1523
2536
5
1523
1523
6
1523
1523
6
1523
1523
6
1523
1523
6
1523
1829
6
1523
2035
6
1523
.i
1524
.t
a
stopping
criterion
for
polynomial
root
finding
.w
when
searching
for
the
root
of
a
polynomial,
it
is
generally
difficult
to
know
just
when
to
accept
a
number
as
an
adequate
approximation
to
the
root.
in
this
paper
an
algorithm
is
presented
which
allows
one
to
terminate
the
iteration
process
on
the
basis
of
calculated
bounds
for
the
roundoff
error
which
occurs
in
evaluating
the
polynomial.
this
stopping
criterion
has
been
tested
on
numerous
examples
and
has
been
found
to
serve
as
a
satisfactory
means
for
accepting
a
complex
number
as
a
zero
of
a
real
polynomial.
.b
cacm
october,
1967
.a
adams,
d.
a.
.n
ca671009
jb
february
27,
1978
1:56
pm
.x
1524
4
1524
1524
4
1524
1524
4
1524
1931
4
1524
2214
4
1524
2544
4
1524
1197
5
1524
1524
5
1524
1524
5
1524
1524
5
1524
311
5
1524
2544
5
1524
879
5
1524
1524
6
1524
311
6
1524
2214
6
1524
.i
1525
.t
on
computing
the
fast
fourier
transform
.w
cooley
and
tukey
have
proposed
a
fast
algorithm
for
computing
complex
fourier
transform
and
have
shown
major
time
savings
in
using
it
to
compute
large
transforms
on
a
digital
computer.
with
n
a
power
of
two,
computing
time
for
this
algorithm
is
proportional
to
n
log2
n,
a
major
improvement
over
other
methods
with
computing
time
proportional
to
n^2.
in
this
paper,
the
fast
fourier
transform
algorithm
is
briefly
reviewed
and
fast
difference
equation
methods
for
accurately
computing
the
needed
trigonometric
function
values
are
given.
the
problem
of
computing
a
large
fourier
transform
on
a
system
with
virtual
memory
is
considered,
and
a
solution
is
proposed.
this
method
has
been
used
to
compute
complex
fourier
transforms
of
size
n
=
2^16
on
a
computer
with
2^15
words
of
core
storage;
this
exceeds
by
a
factor
of
eight
the
maximum
radix
two
transform
size
with
fixed
allocation
of
this
amount
of
core
storage.
the
method
has
also
been
used
to
compute
large
mixed
radix
transforms.
a
scaling
plan
for
computing
the
fast
fourier
transform
with
fixed-point
arithmetic
is
also
given.
.b
cacm
october,
1967
.a
singleton,
r.
c.
.n
ca671008
jb
february
27,
1978
2:03
pm
.x
1525
5
1525
1525
5
1525
1525
5
1525
1668
5
1525
1669
5
1525
1679
5
1525
1728
5
1525
2859
5
1525
1525
6
1525
1525
6
1525
1525
6
1525
1525
6
1525
1525
6
1525
1647
6
1525
1669
6
1525
1676
6
1525
1785
6
1525
.i
1526
.t
multiprogramming
under
a
page
on
demand
strategy
.w
a
model
of
multiprogramming
for
a
particular
computer
system
using
a
page
on
demand
strategy
is
developed.
analysis
of
this
model
is
used
to
predict
performance
(measured
by
the
average
usage
of
the
cpu)
when
user
programs
are
typical
of
those
arising
from
an
interactive
time
sharing
environment.
the
effect
of
several
hardware
modifications
is
also
analyzed.
a
parameter,
readily
calculated
from
the
hardware
characteristics
and
the
program
statistics,
is
proposed
for
gauging
the
effect
of
multiprogramming.
.b
cacm
october,
1967
.a
smith,
j.
l.
.n
ca671007
jb
february
27,
1978
2:07
pm
.x
1526
5
1526
1526
5
1526
1526
5
1526
1892
5
1526
2068
5
1526
2741
5
1526
1526
6
1526
1526
6
1526
1526
6
1526
1572
6
1526
1728
6
1526
1749
6
1526
1751
6
1526
1752
6
1526
2454
6
1526
.i
1527
.t
a
grammar
base
question
answering
procedure
.w
the
subject
of
this
paper
is
a
procedure
for
the
automatic
retrieval
of
certain
segments
of
stored
information,
either
explicitly
or
implicitly
represented,
through
questions
posed
in
natural
language
sentences.
this
procedure
makes
use
of
a
sentence
recognition
device
for
the
class
of
grammars
which
will
correctly
decide
between
the
grammatical
and
ungrammatical
sentences
of
a
natural
language.
it
is
possible
to
make
use
of
a
recognition
device
of
this
sort
for
the
following
reason:
much
data
is
fully
expressible
as
a
set
of
sentences
in
a
natural
language,
a
set
which
can
be
exhaustively
and
exclusively
generated
by
a
grammar.
based
upon
the
rules
of
this
grammar,
a
sentence
recognizer
will
evaluate
sentences,
questions
in
the
normal
situation.
since
the
recognition
function
succeeds
just
in
case
the
posed
question
is
drawn
from
the
set
of
sentences
expressing
the
data,
or,
more
correctly,
is
grammatical
in
terms
of
the
grammar
for
this
set
of
sentences,
sentence
recognition
itself
is
a
procedure
for
retrieving
information.
when
the
recognition
function
succeeds,
its
value
represents
the
requested
information.
.b
cacm
october,
1967
.a
rosenbaum,
p.
.n
ca671006
jb
february
27,
1978
2:14
pm
.x
1527
5
1527
1527
5
1527
1527
5
1527
2092
5
1527
2127
5
1527
1155
6
1527
1324
6
1527
1487
6
1527
1527
6
1527
1527
6
1527
1781
6
1527
1856
6
1527
.i
1528
.t
three
fonts
of
computer
drawn
letters
.w
detailed
descriptions
are
given
for
three
fonts
of
letters.
letter
shapes
are
entirely
described
by
numbers.
the
basic
vectors
are
in
a
general
form
so
the
fonts
may
be
easily
drawn
on
a
variety
of
computers
and
cathode-ray
tubes.
the
fonts
include
both
upper
and
lower
case
roman
letters,
mathematical
signs,
and
upper
and
lower
case
greek
letters.
design
of
the
fonts
is
described.
however,
the
principal
contribution
of
this
paper
concerns
the
fonts
themselves.
.b
cacm
october,
1967
.a
mathews,
m.
v.
lochbaum,
c.
moss,
j.
a.
.n
ca671005
jb
february
27,
1978
2:24
pm
.x
1528
5
1528
1528
5
1528
1528
5
1528
1697
5
1528
1528
6
1528
.i
1529
.t
decomposition
programming
an
analysis
of
matrix
substructure
.w
a
petroleum
blending
problem
was
analyzed
in
order
to
compare
the
primal
and
primal-dual
decomposition
algorithms.
in
the
course
of
the
analysis,
a
substructure
was
discovered
which
has
relevance
to
the
relative
performance
of
the
two
algorithms
and
to
their
absolute
performance
as
compared
with
a
standard
primal-simplex
solution
without
decomposition.
.b
cacm
october,
1967
.a
bell,
e.
j.
.n
ca671004
jb
february
27,
1978
2:33
pm
.x
1529
5
1529
1529
5
1529
1529
5
1529
.i
1530
.t
the
ml/i
macro
processor
.w
a
general
purpose
macro
processor
called
ml/i
is
described.
ml/i
has
been
implemented
on
the
pdp-7
and
i.c.t.
atlas
2
computers
and
is
intended
as
a
tool
to
allow
users
to
extend
any
existing
programming
language
by
incorporating
new
statements
and
other
syntactic
forms
of
their
own
choosing
and
in
their
own
notation.
this
allows
a
complete
user-oriented
language
to
be
built
up
with
relative
ease.
.b
cacm
october,
1967
.a
brown,
p.
j.
.n
ca671003
jb
february
27,
1978
2:38
pm
.x
1530
4
1530
1530
4
1530
1531
4
1530
1565
4
1530
1703
4
1530
1781
4
1530
1852
4
1530
1945
4
1530
2034
4
1530
2036
4
1530
1455
5
1530
1530
5
1530
1530
5
1530
1530
5
1530
1565
5
1530
.i
1531
the
remaining
trouble
spots
in
algol
60
.w
this
paper
lists
the
ambiguities
remaining
in
the
language
algol
60,
which
have
been
noticed
since
the
publication
of
the
revised
algol
60
report
in
1963.
.b
cacm
october,
1967
.a
knuth,
d.
e.
.n
ca671002
jb
february
27,
1978
2:40
pm
.x
1530
4
1531
1531
4
1531
1531
4
1531
1565
4
1531
1703
4
1531
1945
4
1531
2036
4
1531
2707
4
1531
2753
4
1531
1185
5
1531
1455
5
1531
1531
5
1531
1531
5
1531
1531
5
1531
1781
5
1531
123
6
1531
196
6
1531
919
6
1531
990
6
1531
1007
6
1531
1046
6
1531
1131
6
1531
1139
6
1531
1140
6
1531
1149
6
1531
1198
6
1531
1215
6
1531
1223
6
1531
1265
6
1531
1303
6
1531
1323
6
1531
1358
6
1531
1366
6
1531
1421
6
1531
1460
6
1531
1462
6
1531
1463
6
1531
1467
6
1531
1468
6
1531
1477
6
1531
1491
6
1531
1496
6
1531
1531
6
1531
1535
6
1531
1565
6
1531
1601
6
1531
1602
6
1531
1613
6
1531
1614
6
1531
1626
6
1531
1641
6
1531
1787
6
1531
1788
6
1531
205
6
1531
224
6
1531
249
6
1531
288
6
1531
316
6
1531
381
6
1531
398
6
1531
11
6
1531
404
6
1531
410
6
1531
463
6
1531
464
6
1531
483
6
1531
3184
6
1531
3188
6
1531
584
6
1531
600
6
1531
680
6
1531
691
6
1531
763
6
1531
799
6
1531
.i
1532
.t
the
hardware-software
complementarity
.b
cacm
october,
1967
.a
oettinger,
a.
g.
.n
ca671001
jb
february
27,
1978
2:42
pm
.x
1532
5
1532
1532
5
1532
1532
5
1532
.i
1533
.t
a
marovian
model
of
the
university
of
michigan
executive
system
.w
a
mathematical
model
of
a
computer's
executive
system
is
postulated
and
its
parameters
estimated
with
the
aid
of
extensive
data
on
the
system's
operation.
although
simplifying
assumptions
are
made,
the
results
predicted
by
the
model
agree
reasonable
well
with
actual
results.
the
model
is
used
to
study
the
effects
of
changes
in
the
executive
system
and
in
one
of
its
compilers.
further
applications
of
the
model
are
discussed.
.b
cacm
september,
1967
.a
foley,
j.
d.
.n
ca670911
jb
february
27,
1978
2:50
pm
.x
1533
4
1533
1533
4
1533
1604
4
1533
1951
4
1533
2667
4
1533
2668
4
1533
1224
5
1533
1533
5
1533
1533
5
1533
1533
5
1533
1604
5
1533
1916
5
1533
1533
6
1533
666
6
1533
.i
1534
.t
dad,
the
c.s.i.r.o.
operating
system
.w
the
design
and
implementation
of
the
c.s.i.r.o.
operating
system,
dad,
is
described
in
detail.
this
system
is
designed
for
the
control
data
3600
using
a
large
drum
backing
store
and
is
intended
to
allow
the
integration
of
a
remote
console
(display)
subsystem
into
a
conventional
job
stack
environment.
the
use
of
the
drums,
the
buffering
of
input
and
output
on
slow
peripherals,
and
the
execution
of
normal
job
stack
work
are
described.
the
display
subsystem
is
described
only
as
it
integrates
into
the
rest
of
the
system.
the
techniques
found
useful
in
the
development
of
dad
are
given,
and
an
assessment
is
made
of
the
validity
of
various
design
decisions.
performance
figures
based
on
several
months
of
operation
are
tabulated.
.b
cacm
september,
1967
.a
austin,
b.
j.
holden,
t.
s.
hudson,
r.
h.
.n
ca670910
jb
february
27,
1978
2:58
pm
.x
1534
5
1534
1534
5
1534
1534
5
1534
.i
1535
.t
a
comment
on
index
register
allocation
.w
a
technique
is
presented
to
reduce
the
enumeration
required
by
a
known
procedure
for
optimal
index
register
allocation
in
straight-line
programs.
this
technique
is
based
on
the
construction
of
a
link
diagram,
which
shows
at
any
step
the
future
occurrences
of
indexes
which
must
be
loaded
into
index
registers.
this
diagram
determines
in
advance
the
required
register
configuration
at
certain
steps
of
the
program,
so
that
the
program
is
subdivided
into
separate
portions
to
which
the
allocation
procedure
may
be
applied
independently.
.b
cacm
september,
1967
.a
luccio,
f.
.n
ca670909
jb
february
27,
1978
3:06
pm
.x
1535
5
1535
1535
5
1535
1535
5
1535
1781
5
1535
2579
5
1535
123
6
1535
196
6
1535
919
6
1535
990
6
1535
1007
6
1535
1046
6
1535
1131
6
1535
1139
6
1535
1140
6
1535
1149
6
1535
1198
6
1535
1215
6
1535
1223
6
1535
1265
6
1535
1303
6
1535
1323
6
1535
1358
6
1535
1366
6
1535
1421
6
1535
1460
6
1535
1462
6
1535
1463
6
1535
1467
6
1535
1468
6
1535
1477
6
1535
1491
6
1535
1496
6
1535
1531
6
1535
1535
6
1535
1535
6
1535
1565
6
1535
1601
6
1535
1602
6
1535
1613
6
1535
1614
6
1535
1626
6
1535
1641
6
1535
1787
6
1535
1788
6
1535
1807
6
1535
205
6
1535
224
6
1535
249
6
1535
288
6
1535
1947
6
1535
316
6
1535
381
6
1535
398
6
1535
11
6
1535
404
6
1535
410
6
1535
463
6
1535
464
6
1535
483
6
1535
3184
6
1535
3188
6
1535
584
6
1535
600
6
1535
680
6
1535
691
6
1535
763
6
1535
799
6
1535
.i
1536
.t
dynamic
computation
of
derivatives
.w
it
is
shown
how
wengert's
procedure
for
computation
of
derivatives
can
be
implemented
conveniently
by
use
of
compiler-generated
complex
addition,
subtraction,
and
linkage
to
complex
arithmetic
subroutines.
evaluation
of
a
function
and
derivative
proceed
in
parallel,
as
in
wengert's
procedure,
but
with
the
"imaginary"
parts
of
variables
declared
complex
bearing
the
values
of
the
derivatives
of
the
real
parts.
this
technique
provides
a
simple
way
to
compute
the
derivatives
of
a
function,
without
the
need
for
deriving
and
programming
the
evaluation
of
explicit
formulas
for
the
derivatives.
.b
cacm
september,
1967
.a
lesk,
a.
m.
.n
ca670908
jb
february
27,
1978
3:11
pm
.x
1028
4
1536
1216
4
1536
1278
4
1536
1347
4
1536
1396
4
1536
1536
4
1536
1029
5
1536
1536
5
1536
1536
5
1536
1536
5
1536
.i
1537
.t
prime
number
generator
1
(algorithm
310
[a1])
.b
cacm
september,
1967
.a
chartres,
b.
a.
.n
ca670907a
jb
february
27,
1978
3:12
pm
.x
1537
5
1537
1537
5
1537
1537
5
1537
2120
5
1537
2927
5
1537
1537
6
1537
1537
6
1537
1539
6
1537
1539
6
1537
1538
6
1537
1840
6
1537
1841
6
1537
377
6
1537
.i
1538
.t
prime
number
generator
2
(algorithm
311
[a1])
.b
cacm
september,
1967
.a
chartres,
b.
a.
.n
ca670907b
jb
march
23,
1978
2:34
pm
.x
1538
5
1538
1538
5
1538
1538
5
1538
2927
5
1538
1537
6
1538
1539
6
1538
1538
6
1538
1840
6
1538
1841
6
1538
.i
1539
.t
prime
number
generator
1;
prime
number
generator
2
(algorithm
35[a1];
algorithm
310[a1];
algorithm
311[a1])
.b
cacm
september,
1967
.a
chartres,
b.
a.
.n
ca670907c
jb
march
23,
1978
2:37
pm
.x
1539
5
1539
1539
5
1539
1539
5
1539
1841
5
1539
1967
5
1539
2120
5
1539
2927
5
1539
1537
6
1539
1537
6
1539
1539
6
1539
1539
6
1539
1539
6
1539
1539
6
1539
1538
6
1539
1840
6
1539
1841
6
1539
1841
6
1539
377
6
1539
377
6
1539
2120
6
1539
.i
1540
.t
an
algorithm
for
class
scheduling
with
section
preference
.w
an
algorithm
for
assignment
of
students
to
classes
in
a
fixed
time
schedule
that
allows
students
to
give
a
preference
for
sections
within
courses
is
given.
if
consistent
with
the
objective
of
balanced
sections,
these
preferences
will
be
honored.
the
algorithm
is
more
stochastic
than
monte
carlo
in
nature.
results
are
given
that
compare
it
to
a
nonpreference
assignment
algorithm.
.b
cacm
september,
1967
.a
busam,
v.
a.
.n
ca670906
jb
february
27,
1978
3:15
pm
.x
1540
4
1540
2209
4
1540
1434
5
1540
1540
5
1540
1540
5
1540
1540
5
1540
2052
5
1540
2209
5
1540
1008
6
1540
1013
6
1540
1434
6
1540
1504
6
1540
1540
6
1540
1540
6
1540
.i
1541
.t
a
language
for
modeling
and
simulating
dynamic
systems
.w
the
general
objective
of
this
language
is
to
facilitate
both
the
modeling
and
experimental
aspects
of
simulation
studies.
the
ability
to
represent
systems
containing
highly
interactive
processes
is
an
essential
feature.
the
nature
of
the
language,
and
the
role
of
the
process
concept,
is
presented
by
means
of
an
extended
example.
.b
cacm
september,
1967
.a
parente,
r.
j.
krasnow,
h.
s.
.n
ca670905
jb
february
27,
1978
3:18
pm
.x
1541
4
1541
1541
4
1541
1565
4
1541
1781
4
1541
1824
4
1541
1846
4
1541
2060
4
1541
2218
4
1541
2252
4
1541
3112
4
1541
1358
5
1541
1380
5
1541
1541
5
1541
1541
5
1541
1541
5
1541
.i
1542
.t
a
microprogrammed
implementation
of
euler
on
ibm
system/360
model
30
.w
an
experimental
processing
system
for
the
algorithmic
language
euler
has
been
implemented
in
microprogramming
on
an
ibm
system/360
model
30
using
a
second
read-only
storage
unit.
the
system
consists
of
a
microprogrammed
compiler
and
a
microprogrammed
string
language
interpreter,
and
of
an
i/o
control
program
written
in
360
machine
language.
the
system
is
described
and
results
are
given
in
terms
of
microprogram
and
main
storage
space
required
and
compiler
and
interpreter
performance
obtained.
the
role
of
microprogramming
is
stressed,
which
opens
a
new
dimension
in
the
processing
of
interpretive
code.
the
structure
and
content
of
a
higher
level
language
can
be
matched
by
an
appropriate
interpretive
language
which
can
be
executed
efficiently
by
microprograms
on
existing
computer
hardware.
.b
cacm
september,
1967
.a
weber,
h.
.n
ca670904
jb
february
27,
1978
3:44
pm
.x
1542
4
1542
1542
4
1542
1683
4
1542
1693
4
1542
1781
4
1542
1787
4
1542
1836
4
1542
1945
4
1542
2060
4
1542
2061
4
1542
2082
4
1542
2091
4
1542
2152
4
1542
2179
4
1542
2340
4
1542
2356
4
1542
2546
4
1542
2603
4
1542
2698
4
1542
2708
4
1542
2824
4
1542
2982
4
1542
2986
4
1542
3045
4
1542
3093
4
1542
1491
5
1542
1542
5
1542
1542
5
1542
1542
5
1542
2202
5
1542
2527
5
1542
3198
5
1542
1542
6
1542
1542
6
1542
.i
1543
.t
computer
formulation
of
the
equations
of
motion
using
tensor
notation
.w
a
means
is
described
for
extending
the
area
of
application
of
digital
computers
beyond
the
numerical
data
processing
stage
and
reducing
the
need
for
human
participation
in
the
formulation
of
certain
types
of
computer
problems.
by
the
use
of
tensor
calculus
and
a
computer
language
designed
to
facilitate
symbolic
mathematical
computation,
a
method
has
been
devised
whereby
a
digital
computer
can
be
used
to
do
non-numeric
work,
that
is,
symbolic
algebraic
manipulation
and
differentiation.
to
illustrate
the
techniques
involved,
a
digital
computer
has
been
used
to
derive
the
equations
of
motion
of
a
point
mass
in
a
general
orthogonal
curvilinear
coordinate
system.
since
this
operation
involves
a
formulation
in
terms
of
first-
and
second-order
differential
coefficients,
it
provides
a
good
demonstration
of
a
computer's
capability
to
do
non-numeric
work
and
to
assist
in
the
formulation
process
which
normally
precedes
the
numerical
data
processing
stage.
moreover,
this
particular
problem
serves
to
illustrate
the
advantages
of
the
mathematical
techniques
employed.
with
the
program
prepared
for
this
purpose
the
computer
will
derive
the
equations
of
motion
in
any
coordinate
system
requested
by
the
user.
results
are
presented
for
the
following
coordinate
systems:
cylindrical
polar,
spherical
polar,
and
prolate
spheroidal.
.b
cacm
september,
1967
.a
howard,
j.
c.
.n
ca670903
jb
february
27,
1978
3:58
pm
.x
1543
4
1543
1543
4
1543
1664
4
1543
1664
4
1543
1345
5
1543
1543
5
1543
1543
5
1543
1543
5
1543
1616
5
1543
1664
5
1543
1345
6
1543
1543
6
1543
1616
6
1543
.i
1544
.t
tele-cupl:
a
telephone
time
sharing
system
.w
a
general
purpose,
remote
access,
computing
system
is
described,
that
employs
twelve-key
keyboard
telephones
as
terminals.
audio
output
is
provided
directly
to
the
telephone
terminals,
but
the
system
will
normally
be
used
in
conjunction
with
remotely
located
high
speed
printing
devices.
the
system
is
a
compatible
extension
of
an
existing
batch
processing
system.
a
significant
element
of
the
system
is
a
scheme
for
transmitting
alphanumeric
information
by
single
strokes
on
a
numeric
keyboard.
the
programmed
scanner
uses
context
to
eliminate
the
ambiguity
in
transmission.
.b
cacm
september,
1967
.a
conway,
r.
w.
morgan,
h.
l.
.n
ca670902
jb
february
27,
1978
4:04
pm
.x
1179
4
1544
1288
4
1544
1544
4
1544
1646
4
1544
2111
4
1544
2534
4
1544
2556
4
1544
2650
4
1544
1544
5
1544
1544
5
1544
1544
5
1544
2054
5
1544
830
5
1544
1544
6
1544
.i
1545
.t
legal
safeguards
to
insure
privacy
in
a
computer
society
.b
cacm
september,1967
.a
westin,
a.
f.
.n
ca670901
jb
february
27,
1978
4:06
pm
.x
1545
5
1545
1545
5
1545
1545
5
1545
.i
1546
.t
toward
standards
for
handwritten
zero
and
oh
.b
cacm
august,
1967
.a
bemer,
r.
w.
.n
ca670809
jb
february
27,
1978
4:08
pm
.x
1546
5
1546
1546
5
1546
1546
5
1546
.i
1547
.t
gamma
function
with
arbitrary
precision
(algorithm
309
[s14])
.b
cacm
august,
1967
.a
filho,
a.
m.s.
schwachheim,
g.
.n
ca670808
jb
february
27,
1978
4:10
pm
.x
1547
5
1547
1547
5
1547
1547
5
1547
2224
5
1547
1547
6
1547
.i
1548
.t
parsing
of
decision
tables
.w
reduction
in
the
size
of
decision
tables
can
be
accomplished
by
several
techniques.
the
techniques
considered
in
this
paper
are
on
the
parsing
of
decision
tables
with
regard
to
horizontal
and
vertical
data
structures,
job
identity,
hardware
and
job
priorities,
and
context
relationships.
such
parsing
rests
upon
some
conventions
for
the
linkage
of
decision
tables.
.b
cacm
august,
1967
.a
chapin,
n.
.n
ca670807
jb
february
27,
1978
4:14
pm
.x
1548
4
1548
1548
4
1548
2220
4
1548
2726
4
1548
2726
4
1548
1488
5
1548
1489
5
1548
1548
5
1548
1548
5
1548
1548
5
1548
2220
5
1548
2492
5
1548
2518
5
1548
2598
5
1548
2616
5
1548
2726
5
1548
931
6
1548
1172
6
1548
1172
6
1548
1172
6
1548
1237
6
1548
1327
6
1548
1327
6
1548
1354
6
1548
1354
6
1548
1488
6
1548
1489
6
1548
1489
6
1548
1548
6
1548
1548
6
1548
1548
6
1548
1548
6
1548
1548
6
1548
1548
6
1548
1684
6
1548
1684
6
1548
250
6
1548
2220
6
1548
2220
6
1548
2221
6
1548
2263
6
1548
2263
6
1548
2453
6
1548
2517
6
1548
2691
6
1548
.i
1549
.t
an
efficient
machine-independent
procedure
for
garbage
collection
in
various
list
structures
.w
a
method
for
returning
registers
to
the
free
list
is
an
essential
part
of
any
list
processing
system.
in
this
paper,
past
solutions
of
the
recovery
problem
are
reviewed
and
compared.
a
new
algorithm
is
presented
which
offers
significant
advantages
of
speed
and
storage
utilization.
the
routine
for
implementing
this
algorithm
can
be
written
in
the
list
language
with
which
it
is
to
be
used,
thus
insuring
a
degree
of
machine
independence.
finally,
the
application
of
the
algorithm
to
a
number
of
different
list
structures
appearing
in
the
literature
is
indicated.
.b
cacm
august,
1967
.a
schorr,
h.
waite,
w.
m.
.n
ca670806
jb
february
27,
1978
4:28
pm
.x
1024
4
1549
1024
4
1549
1050
4
1549
1050
4
1549
1051
4
1549
1051
4
1549
1051
4
1549
1098
4
1549
1102
4
1549
1102
4
1549
1132
4
1549
1211
4
1549
1214
4
1549
1237
4
1549
1380
4
1549
1388
4
1549
1390
4
1549
1393
4
1549
1393
4
1549
1485
4
1549
1486
4
1549
1487
4
1549
1549
4
1549
1549
4
1549
1549
4
1549
1549
4
1549
1549
4
1549
1549
4
1549
1549
4
1549
1564
4
1549
1570
4
1549
1706
4
1549
1826
4
1549
1878
4
1549
1878
4
1549
1906
4
1549
1946
4
1549
1957
4
1549
378
4
1549
2023
4
1549
2060
4
1549
2155
4
1549
2168
4
1549
2168
4
1549
2453
4
1549
2719
4
1549
2723
4
1549
2723
4
1549
2723
4
1549
2838
4
1549
2842
4
1549
2855
4
1549
2857
4
1549
2879
4
1549
2882
4
1549
2902
4
1549
3077
4
1549
3080
4
1549
3106
4
1549
3112
4
1549
3112
4
1549
627
4
1549
627
4
1549
731
4
1549
793
4
1549
106
4
1549
106
5
1549
1051
5
1549
210
5
1549
1549
5
1549
1549
5
1549
1549
5
1549
1869
5
1549
2513
5
1549
2665
5
1549
2723
5
1549
2855
5
1549
406
5
1549
3106
5
1549
627
5
1549
731
5
1549
753
5
1549
1383
6
1549
1549
6
1549
1549
6
1549
1549
6
1549
1549
6
1549
1549
6
1549
1549
6
1549
1570
6
1549
1749
6
1549
1826
6
1549
1826
6
1549
210
6
1549
210
6
1549
210
6
1549
1972
6
1549
1972
6
1549
1972
6
1549
2513
6
1549
2651
6
1549
2665
6
1549
2766
6
1549
2766
6
1549
2833
6
1549
2855
6
1549
2954
6
1549
2998
6
1549
2998
6
1549
627
6
1549
731
6
1549
.i
1550
.t
a
comparison
of
batch
processing
and
instant
turnaround
.w
a
study
of
the
programming
efforts
of
students
in
an
introductory
programming
course
is
presented
and
the
effects
of
having
instant
turnaround
(a
few
minutes)
as
opposed
to
conventional
batch
processing
with
turnaround
times
of
a
few
hours
are
examined.
among
the
items
compared
are
the
number
of
computer
runs
per
trip
to
the
computation
center,
program
preparation
time,
keypunching
time,
debugging
time,
number
of
runs,
and
elapsed
time
from
the
first
run
to
the
last
run
on
each
problem.
even
though
the
results
are
influenced
by
the
fact
that
"bonus
points"
were
given
for
completion
of
a
programming
problem
in
less
than
a
specified
number
of
runs,
there
is
evidence
to
support
"instant"
over
"batch".
.b
cacm
august,
1967
.a
smith,
l.
b.
.n
ca670805
jb
february
27,
1978
4:32
pm
.x
1550
4
1550
1550
4
1550
1304
5
1550
1472
5
1550
1550
5
1550
1550
5
1550
1550
5
1550
1908
5
1550
1550
6
1550
1605
6
1550
.i
1551
.t
on
compiling
algorithms
for
arithmetic
expressions
.w
this
paper
deals
with
algorithms
concerning
arithmetic
expressions
used
in
a
fortran
iv
compiler
for
a
hitac-5020
computer
having
n
accumulators.
the
algorithms
generate
an
object
code
which
minimizes
the
frequency
of
storing
and
recovering
the
partial
results
of
the
arithmetic
expressions
in
cases
where
there
are
several
accumulators.
.b
cacm
august,
1967
.a
nakata,
i.
.n
ca670804
jb
february
27,
1978
4:35
pm
.x
1551
4
1551
1945
4
1551
1122
5
1551
1551
5
1551
1551
5
1551
1551
5
1551
1807
5
1551
1934
5
1551
2175
5
1551
1223
6
1551
1248
6
1551
1551
6
1551
1551
6
1551
1551
6
1551
1613
6
1551
1886
6
1551
1947
6
1551
.i
1552
.t
the
aed
free
storage
package
.w
the
most
fundamental
underlying
problem
in
sophisticated
software
systems
involving
elaborate,
changing
data
structure
is
dynamic
storage
allocation
for
flexible
problem
modeling.
the
free
storage
package
of
the
aed-1
compiler
systems
allows
blocks
of
available
storage
to
be
obtained
and
returned
for
reuse.
the
total
available
space
is
partitioned
into
a
hierarchy
of
free
storage
zones,
each
of
which
has
its
own
characteristics.
blocks
may
be
of
any
size,
and
special
provisions
allow
efficient
handling
of
selected
sizes,
control
of
shattering
and
garbage
collection,
and
sharing
of
physical
space
between
zones.
the
routines
of
the
package
perform
high
level
functions
automatically,
but
also
allow
access
and
control
of
fine
internal
details
as
well.
.b
cacm
august,
1967
.a
ross,
d.
t.
.n
ca670803
jb
february
27,
1978
4:40
pm
.x
1051
4
1552
1380
4
1552
1389
4
1552
1552
4
1552
1552
4
1552
1552
4
1552
1665
4
1552
1693
4
1552
1781
4
1552
1854
4
1552
1860
4
1552
1860
4
1552
2060
4
1552
2155
4
1552
2162
4
1552
2435
4
1552
2596
4
1552
2768
4
1552
2845
4
1552
2902
4
1552
2955
4
1552
557
4
1552
1184
5
1552
1421
5
1552
1552
5
1552
1552
5
1552
1552
5
1552
378
5
1552
2704
5
1552
2902
5
1552
1051
6
1552
1062
6
1552
1184
6
1552
1211
6
1552
1247
6
1552
1552
6
1552
1552
6
1552
1749
6
1552
1879
6
1552
2356
6
1552
2379
6
1552
2435
6
1552
2596
6
1552
2673
6
1552
2734
6
1552
2747
6
1552
2768
6
1552
.i
1553
.t
contextual
understanding
by
computers
.w
a
further
development
of
a
computer
program
(eliza)
capable
of
conversing
in
natural
language
is
discussed.
the
importance
of
context
to
both
human
and
machine
understanding
is
stressed.
it
is
argued
that
the
adequacy
of
the
level
of
understanding
achieved
in
a
particular
conversation
depends
on
the
purpose
of
that
conversation,
and
that
absolute
understanding
on
the
part
of
either
humans
or
machines
is
impossible.
.b
cacm
august,
1967
.a
weizenbaum,
j.
.n
ca670802
jb
february
27,
19784:44
pm
.x
1400
4
1553
1553
4
1553
1945
4
1553
2127
4
1553
2396
4
1553
2730
4
1553
1487
5
1553
1553
5
1553
1553
5
1553
1553
5
1553
1856
5
1553
1225
6
1553
1324
6
1553
1553
6
1553
.i
1554
.t
a
computer
technique
for
displaying
n-dimensional
hyperobjects
.w
a
digital
computer
and
automatic
plotter
have
been
used
to
generate
three-dimensional
stereoscopic
movies
of
the
three-dimensional
parallel
and
perspective
projections
of
four-dimensional
hyperobjects
rotating
in
four-dimensional
space.
the
observed
projections
and
their
motions
were
a
direct
extension
of
three-dimensional
experience,
but
no
profound
"feeling"
or
insight
into
the
fourth
spatial
dimension
was
obtained.
the
technique
can
be
generalized
to
n-dimensions
and
applied
to
any
n-dimensional
hyperobject
or
hypersurface.
.b
cacm
august,
1967
.a
noll,
a.
m.
.n
ca670801
jb
february
27,
1978
4:48
pm
.x
1554
5
1554
1554
5
1554
1554
5
1554
2211
5
1554
1554
6
1554
1741
6
1554
.i
1555
.t
symmetric
polynomials
(algorithm
305
[c1])
.b
cacm
july,
1967
.a
bratley,
p.
mckay,
j.
k.
s.
.n
ca670711a
jb
february
28,
1978
8:26
am
.x
1555
5
1555
1555
5
1555
1555
5
1555
.i
1556
.t
permutations
with
repetitions
(algorithm
306
[g6])
.b
cacm
july,
1967
.a
bratley,
p.
.n
ca670711b
jb
march
23,
1978
3:14
pm
.x
1556
5
1556
1556
5
1556
1556
5
1556
.i
1557
.t
symmetric
group
characters
(algorithm
307
[a1])
.b
cacm
july,
1967
.a
mckay,
j.
k.
s.
.n
ca670711c
jb
march
23,
1978
3:15
pm
.x
1557
5
1557
1557
5
1557
1557
5
1557
.i
1558
.t
generation
of
permutations
in
pseudo-lexicographic
order
(algorithm
[g6])
.b
cacm
july,
1967
.a
ord-smith,
r.
j.
.n
ca670711d
jb
march
23,
1978
3:16
pm
.x
1558
5
1558
1558
5
1558
1558
5
1558
2044
5
1558
996
6
1558
1558
6
1558
2230
6
1558
521
6
1558
.i
1559
.t
permutation
generator;
permutation
in
lexicographical
order;
permute;
generation
of
permutations
in
lexicographical
order
(algorithm
87[g6];
algorithm
102[g6];
algorithm
130[g6];
algorithm
202[g6])
.b
cacm
july,
1967
.a
ord-smith,
r.
j.
.n
ca670711e
jb
march
23,
1978
3:19
pm
.x
1559
5
1559
1559
5
1559
1559
5
1559
1567
5
1559
1948
5
1559
1391
6
1559
1559
6
1559
1559
6
1559
.i
1560
.t
transport;
transportation
problem
(algorithm
258[h];
algorithm
293[h])
.b
cacm
july,
1967
.a
sims,
l.
s.
.n
ca670711f
jb
march
23,
1978
3:20
pm
.x
1560
5
1560
1560
5
1560
1560
5
1560
.i
1561
.t
the
mutual
primal-dual
method
(algorithm
285
[h])
.b
cacm
july,
1967
.a
spath,
h.
.n
ca670711g
jb
march
23,
1978
3:21
pm
.x
1561
5
1561
1561
5
1561
1561
5
1561
1987
5
1561
1561
6
1561
1581
6
1561
1779
6
1561
1944
6
1561
714
6
1561
.i
1562
.t
airy
function
(algorithm
301
[s20])
.b
cacm
july,
1967
.a
pitteway,
m.
l.
v.
.n
ca670711h
jb
march
23,
1978
3:22
pm
.x
1562
5
1562
1562
5
1562
1562
5
1562
.i
1563
.t
a
method
for
finding
hamilton
paths
and
knight's
tours
.w
the
use
of
warnsdorff's
rule
for
finding
a
knight's
tour
is
generalized
and
applied
to
the
problem
of
finding
a
hamilton
path
in
a
graph.
a
graph-theoretic
justification
for
the
method
is
given.
.b
cacm
july,
1967
.a
pohl,
i.
.n
ca670710
jb
february
28,
1978
8:28
am
.x
1563
5
1563
1563
5
1563
1563
5
1563
.i
1564
.t
description
of
basic
algorithm
in
detab/65
preprocessor
.w
the
basic
algorithm
for
the
conversion
of
decision
tables
into
cobol
code
is
contained
in
the
generator
portion
of
the
detab/65
preprocessor.
the
generator
analyzes
a
decision
table
and
produces
simple
cobol
conditional
statements.
core
storage
is
saved
by
using
queueing
techniques
and
extensive
indexing
and
also
by
outputting
the
code
as
it
is
generated,
a
line
at
a
time.
the
only
optimization
attempted
is
the
elimination
of
obviously
unnecessary
tests
on
certain
conditions
in
the
decision
table.
since
the
preprocessor
and
this
language
associated
with
it
were
developed
for
cobol
users,
the
preprocessor
was
written
in
a
modular
form
in
required
cobol-61.
.b
cacm
july,
1967
.a
callahan,
m.
d.
chapman,
a.
e.
.n
ca670709
jb
february
28,
1978
8:33
am
.x
1237
4
1564
1549
4
1564
1564
4
1564
2453
4
1564
1564
5
1564
1564
5
1564
1564
5
1564
1684
5
1564
753
5
1564
1354
6
1564
1564
6
1564
.i
1565
.t
a
language-independent
macro
processor
.w
a
macro
processor
is
described
which
can
be
used
with
almost
any
source
language.
it
provides
all
features
normally
associated
with
a
macro
facility,
plus
the
ability
to
make
arbitrary
transformations
of
the
argument
strings.
the
program
is
used
at
the
basser
computing
department,
university
of
sydney,
sydney,
australia,
to
process
text
for
eight
different
compilers.
.b
cacm
july,
1967
.a
waite,
w.
m.
.n
ca670708
jb
february
28,
1978
8:35
am
.x
1358
4
1565
1530
4
1565
1531
4
1565
1541
4
1565
1565
4
1565
1565
4
1565
1565
4
1565
1565
4
1565
1703
4
1565
1781
4
1565
1781
4
1565
1788
4
1565
1824
4
1565
1945
4
1565
2036
4
1565
2252
4
1565
1162
5
1565
205
5
1565
1358
5
1565
1455
5
1565
1530
5
1565
1565
5
1565
1565
5
1565
1565
5
1565
1781
5
1565
1852
5
1565
2034
5
1565
123
6
1565
196
6
1565
919
6
1565
984
6
1565
990
6
1565
1007
6
1565
1046
6
1565
1131
6
1565
1139
6
1565
1140
6
1565
1149
6
1565
1198
6
1565
1215
6
1565
1223
6
1565
1231
6
1565
1265
6
1565
1303
6
1565
1323
6
1565
1358
6
1565
1366
6
1565
1421
6
1565
1455
6
1565
1460
6
1565
1462
6
1565
1463
6
1565
1467
6
1565
1468
6
1565
1477
6
1565
1491
6
1565
1496
6
1565
1531
6
1565
1535
6
1565
1565
6
1565
1565
6
1565
1565
6
1565
1565
6
1565
1601
6
1565
1602
6
1565
1613
6
1565
1614
6
1565
1626
6
1565
1641
6
1565
1787
6
1565
1788
6
1565
205
6
1565
224
6
1565
1852
6
1565
249
6
1565
288
6
1565
1926
6
1565
1947
6
1565
316
6
1565
381
6
1565
398
6
1565
11
6
1565
404
6
1565
410
6
1565
463
6
1565
464
6
1565
483
6
1565
3184
6
1565
3188
6
1565
584
6
1565
600
6
1565
680
6
1565
691
6
1565
763
6
1565
799
6
1565
.i
1566
.t
optimal
starting
values
for
newton-raphson
calculation
of
sqrt(x)
.w
the
problem
of
obtaining
starting
values
for
the
newton-raphson
calculation
of
sqrt(x)
on
a
digital
computer
is
considered.
it
is
shown
that
the
conventionally
used
best
uniform
approximations
to
sqrt(x)
do
not
provide
optimal
starting
values.
the
problem
of
obtaining
optimal
starting
values.
the
problem
of
obtaining
optimal
starting
values
is
stated,
and
several
basic
results
are
proved.
a
table
of
optimal
polynomial
starting
values
is
given.
.b
cacm
july,
1967
.a
moursund,
d.
g.
.n
ca670707
jb
february
28,
1978
8:53
am
.x
1566
4
1566
1440
5
1566
1566
5
1566
1566
5
1566
1566
5
1566
1932
5
1566
2094
5
1566
962
6
1566
1566
6
1566
1566
6
1566
.i
1567
.t
on
the
representation
of
symmetric
polynomials
.w
relations
are
given
between
certain
symmetric
polynomials
in
the
light
of
the
theory
of
the
symmetric
group.
such
an
approach
unifies
earlier
work
and
lends
insight
to
previously
published
work
by
aaron
booker.
a
generalization
of
graeffe's
root-squaring
technique
for
the
determination
of
the
roots
of
a
polynomial
is
suggested.
.b
cacm
july,
1967
.a
mckay,
j.
k.
s.
.n
ca670706
jb
february
28,
1978
8:56
am
.x
1567
4
1567
1948
4
1567
1559
5
1567
1567
5
1567
1567
5
1567
1567
5
1567
.i
1568
.t
plotting
a
function
of
three
independent
variables
.w
a
method
is
developed
for
constructing
an
approximate
plot
of
a
function
of
three
independent
variables.
the
plot
is
similar
to
a
conventional
contour
map
except
that
there
are
three
scales
to
represent
the
independent
variables.
scale
values
of
the
three
independent
variables
are
added
vectorially,
and
the
value
of
the
function
is
then
read
from
the
values
associated
with
nearby
contours.
.b
cacm
july,1967
.a
stineman,
r.
w.
.n
ca670705
jb
february
28,
1978
8:59
am
.x
1568
5
1568
1568
5
1568
1568
5
1568
.i
1569
.t
implementing
phrase-structure
productions
in
pl/i
.w
a
method
is
described
for
implementing
the
productions
of
a
context-free
phrase
structure
grammar
in
a
pl/i
procedure
whose
structure
and
statements
parallel
the
structure
and
notation
of
the
grammar.
.b
cacm
july,
1967
.a
irwin,
l.
.n
ca670704
jb
february
28,
1978
9:01
am
.x
1569
5
1569
1569
5
1569
1569
5
1569
.i
1570
.t
string
processing
techniques
.w
the
internal
organization
of
string
processing
systems
is
discussed.
six
techniques
for
data
structures
are
presented
and
evaluated
on
the
basis
of:
(1)
creation
of
strings;
(2)
examination
of
strings;
and
(3)
alteration
of
strings.
speed
of
operation,
storage
requirements,
effect
on
paging,
and
programmer
convenience
are
also
considered.
one
of
the
techniques,
single-word
linked
blocks,
is
used
in
an
example
demonstrating
an
implementation
of
a
snobol
string
processing
language
on
an
ibm
system/360.
.b
cacm
july,
1967
.a
madnick,
s.
e.
.n
ca670703
jb
february
28,
1978
9:04
am
.x
1024
4
1570
1051
4
1570
1098
4
1570
1214
4
1570
1380
4
1570
1388
4
1570
1393
4
1570
1485
4
1570
1487
4
1570
1549
4
1570
1570
4
1570
1570
4
1570
1878
4
1570
1945
4
1570
1946
4
1570
1957
4
1570
2168
4
1570
2314
4
1570
2723
4
1570
2857
4
1570
3112
4
1570
1098
5
1570
1570
5
1570
1570
5
1570
1570
5
1570
1869
5
1570
731
5
1570
1549
6
1570
1570
6
1570
.i
1571
.t
a
user-oriented
time-shared
online
system
.w
an
existing
system
and
planned
additions
within
the
data
processing
laboratory
of
the
brain
research
institute
at
ucla
is
described.
the
system
represents
an
attempt
to
provide
research
workers
of
the
institute
with
the
ability
to
interact
directly
with
a
highly
sophisticated
digital
computing
complex
in
the
most
direct
and
simple
fashion
possible.
it
is
anticipated
that,
with
the
accumulation
of
experience
using
the
present
system,
significant
advances
will
be
possible
in
the
system
design
through
determination
of
interface
parameters
between
the
biological
scientist
and
the
digital
computer.
.b
cacm
july,
1967
.a
betyar,
l.
.n
ca670702
jb
february
28,
1978
9:08
am
.x
1571
5
1571
1571
5
1571
1571
5
1571
.i
1572
.t
the
simulation
of
time
sharing
systems
.w
the
development
of
new
large
scale
time-sharing
systems
has
raised
a
number
of
problems
for
computation
center
management.
not
only
is
it
necessary
to
develop
an
appropriate
hardware
configuration
for
these
systems,
but
appropriate
software
adjustments
must
be
made.
unfortunately,
these
systems
often
do
not
respond
to
changes
in
the
manner
that
intuition
would
suggest,
and
there
are
few
guides
to
assist
in
the
analysis
of
performance
characteristics.
the
development
of
a
comprehensive
simulation
model
to
assist
in
the
investigation
of
these
questions
is
described
in
this
paper.
the
resulting
model
has
a
general
purpose
design
and
can
be
used
to
study
a
variety
of
time-sharing
systems.
it
can
also
be
used
to
assist
in
the
design
and
development
of
new
time-sharing
algorithms
or
techniques.
for
the
sake
of
efficiency
and
greater
applicability,
the
model
was
implemented
in
a
limited
fortran
subset
that
is
compatible
with
most
fortran
iv
compilers.
the
use
of
the
simulation
is
demonstrated
by
a
study
of
the
ibm
360/67
time-sharing
system.
.b
cacm
july,
1967
.a
nielsen,
n.
r.
.n
ca670701
jb
february
28,
1978
9:15
am
.x
1572
5
1572
1572
5
1572
1572
5
1572
1805
5
1572
1846
5
1572
1892
5
1572
2188
5
1572
2218
5
1572
2317
5
1572
1198
6
1572
1380
6
1572
1380
6
1572
1424
6
1572
1484
6
1572
1518
6
1572
1526
6
1572
1572
6
1572
1572
6
1572
1572
6
1572
1572
6
1572
1572
6
1572
1572
6
1572
1693
6
1572
1728
6
1572
1728
6
1572
1748
6
1572
1749
6
1572
1751
6
1572
1751
6
1572
1753
6
1572
1752
6
1572
1752
6
1572
1781
6
1572
1810
6
1572
1879
6
1572
2095
6
1572
2126
6
1572
2148
6
1572
576
6
1572
.i
1573
.t
an
adaptive
quadrature
procedure
with
random
panel
sizes
(algorithm
[d1])
.b
cacm
june,
1967
.a
gallaher,
l.
j.
.n
ca670607a
jb
february
28,
1978
9:17
am
.x
1573
5
1573
1573
5
1573
1573
5
1573
2093
5
1573
2550
5
1573
834
6
1573
872
6
1573
1092
6
1573
1298
6
1573
1573
6
1573
1573
6
1573
2074
6
1573
429
6
1573
429
6
1573
.i
1574
.t
normal
curve
integral
(algorithm
304
[s15])
.b
cacm
june,
1967
.a
hill,
i.
d.
joyce,
s.
a.
.n
ca670607b
jb
march
23,
1978
3:27
pm
.x
1574
5
1574
1574
5
1574
1574
5
1574
.i
1575
.t
incomplete
beta
ratio
(algorithm
179
[s14])
.b
cacm
june,
1967
.a
pike,
m.
c.
hill,
i.
d.
.n
ca670607c
jb
march
23,
1978
3:29
pm
.x
1575
5
1575
1575
5
1575
1575
5
1575
.i
1576
.t
eigenvalues
of
a
real
symmetric
matrix
by
the
qr
method
(algorithm
253
[f2])
.b
cacm
june,
1967
.a
welsch,
j.
h.
.n
ca670607d
jb
march
23,
1978
3:30
pm
.x
1576
5
1576
1576
5
1576
1576
5
1576
.i
1577
.t
eigenvalues
and
eigenvectors
of
a
real
symmetric
matrix
by
the
qr
method
(algorithm
254
[f2])
.b
cacm
june,
1967
.a
welsch,
j.
h.
.n
ca670607e
jb
march
23,
1978
3:31
pm
.x
1577
5
1577
1577
5
1577
1577
5
1577
.i
1578
.t
generalized
least
squares
fit
by
orthogonal
polynomials
(algorithm
296
[e2])
.b
cacm
june,
1967
.a
makinson,
g.
j.
.n
ca670607f
jb
march
23,
1978
3:33
pm
.x
1578
5
1578
1578
5
1578
1578
5
1578
.i
1579
.t
real
error
function,
erf(x)
(algorithm
123
[s15])
.b
cacm
june,
1967
.a
hill,
i.
d.
joyce,
s.
a.
.n
ca670607g
jb
march
23,
1978
3:34
pm
.x
1579
5
1579
1579
5
1579
1579
5
1579
.i
1580
.t
error
function-large
x
(algorithm
180
[s15])
.b
cacm
june,
1967
.a
hill,
i.
d.
joyce,
s.
a.
.n
ca670607h
jb
march
23,
1978
3:35
pm
.x
1580
5
1580
1580
5
1580
1580
5
1580
2334
5
1580
1580
6
1580
.i
1581
.t
complementary
error
function-large
x
(algorithm
181
[s15])
.b
cacm
june,
1967
.a
hill,
i.
d.
joyce,
s.
a.
.n
ca670607i
jb
march
23,
1978
3:37
pm
.x
1581
5
1581
1581
5
1581
1581
5
1581
1987
5
1581
2427
5
1581
1561
6
1581
1581
6
1581
1581
6
1581
1636
6
1581
1779
6
1581
1944
6
1581
714
6
1581
.i
1582
.t
gauss
(algorithm
209
[s15])
.b
cacm
june,
1967
.a
hill,
i.
d.
joyce,
s.
a.
.n
ca670607j
jb
march
23,
1978
3:38
pm
.x
1582
5
1582
1582
5
1582
1582
5
1582
.i
1583
.t
normal
distribution
function
(algorithm
226
[s15])
.b
cacm
june,
1967
.a
hill,
i.
d.
joyce,
s.
a.
.n
ca670607k
jb
march
23,
1978
3:39
pm
.x
1583
4
1583
1583
4
1583
1583
4
1583
1583
4
1583
967
5
1583
1126
5
1583
1583
5
1583
1583
5
1583
1583
5
1583
707
5
1583
831
5
1583
.i
1584
.t
procedure
for
the
normal
distribution
functions
(algorithm
272
[s15])
.b
cacm
june,
1967
.a
hill,
i.
d.
joyce,
s.
a.
.n
ca670607l
jb
march
23,
1978
3:40
pm
.x
1584
5
1584
1584
5
1584
1584
5
1584
.i
1585
.t
normal
curve
integral
(algorithm
304
[s15])
.b
cacm
june,
1967
.a
hill,
i.
d.
joyce,
s.
a.
.n
ca670607m
jb
march
23,
1978
3:41
pm
.x
1585
5
1585
1585
5
1585
1585
5
1585
1714
5
1585
1585
6
1585
.i
1586
.t
a
generalized
bairstow
algorithm
.w
the
bairstow
algorithm
is
generalized
to
the
case
of
a
polynomial
which
is
itself
a
linear
combination
of
polynomials
satisfying
a
three-term
recursion.
convergence
properties
of
the
method
are
derived.
.b
cacm
june,
1967
.a
golub,
g.
h.
robertson,
t.
n.
.n
ca670606
jb
february
28,
1978
9:21
am
.x
1586
5
1586
1586
5
1586
1586
5
1586
.i
1587
.t
storage
allocation
in
a
certain
iterative
process
.w
a
method
of
core
storage
allocation
in
a
certain
iterative
process
is
described
and
estimates
of
the
machine
time
required
are
given.
the
method
is
applicable
to
iterative
processes
in
which
input
data
items
once
chosen
are
never
again
needed.
in
this
method
the
input
data
is
continuously
relocated
and
the
space
made
available
apportioned
to
the
output
tables
when
an
overflow
occurs.
some
important
special
cases
are
considered
in
which
considerable
simplification
occurs.
.b
cacm
june,
1967
.a
abramowich,
j.
.n
ca670605
jb
february
28,
1978
9:25
am
.x
1587
5
1587
1587
5
1587
1587
5
1587
.i
1588
.t
pl/i
list
processing
.w
the
concepts
of
list
processing
have
been
introduced
into
the
pl/i
language.
with
these
new
facilities,
it
is
possible
to
write
pl/i
procedures
that
operate
on
simple
and
complex
data
list
organizations.
most
list-processing
languages
have
suffered
from
their
inability
to
deal
directly
with
complex
data
structures
and/or
from
their
inability
to
perform
the
complete
range
of
programming
language
operations
upon
the
data
list
structures.
these
two
problems
have
been
eliminated
in
the
list-processing
facilities
of
pl/i.
the
basic
concepts
of
list
processing
and
the
philosophy
of
the
pl/i
language
extensions
are
discussed.
in
addition,
several
detailed
list-processing
examples
are
provided.
.b
cacm
june,
1967
.a
lawson
jr.,
h.
w.
.n
ca670604
jb
february
28,
1978
9:30
am
.x
1588
5
1588
1588
5
1588
1588
5
1588
.i
1589
.t
dialog:
a
conversational
programming
system
with
a
graphical
orientation
.w
dialog
is
an
algebraic
language
for
online
use
with
a
graphical
input-output
console
device.
it
is
a
computational
aid
for
the
casual
user,
which
provides
basic
facilities
for
graphical
and
numeric
input
and
display,
online
and
off
line
program
preparation
and
storage,
and
hard
copy
presentation
of
results.
use
of
the
system
requires
a
minimum
of
experience
or
instruction,
since
the
growth
of
an
overlaying
system
control
language
has
been
prevented,
and
there
are
no
processor-oriented
statements,
like
variable
type
or
dimension
declarations.
moreover,
in
the
online
situation
the
processor
interacts
with
the
graphical
keyboard
on
a
character-by-character
basis
so
as
to
restrict
the
programmer's
choice
of
input
symbols
to
those
which
are
syntactically
correct.
dialog
has
been
in
daily
operation
at
the
iit
research
institute
since
february,
1966.
.b
cacm
june,
1967
.a
cameron,
s.
h.
ewing,
d.
liveright,
m.
.n
ca670603
jb
february
28,
1978
9:36
am
.x
1589
5
1589
1589
5
1589
1589
5
1589
1978
5
1589
1307
6
1589
1589
6
1589
1813
6
1589
.i
1590
.t
pitch
period
determination
of
speech
sounds
.w
a
computer
procedure
which
determines
pitch
periods
by
the
recognition
of
the
peak
structure
of
the
speech
waveform
is
described.
speech
sounds
were
sampled
by
a
microphone
and
an
analog-to-digital
converter
attached
to
an
interconnected
ibm
7090-pdp-1
system.
these
utterances
were
recorded
at
the
normal
noise
level
of
the
computer
room
but
were
not
band-compressed
or
phase-distorted
in
any
manner.
a
sequence
of
operations
defined
on
the
speech
wave
selects
a
list
of
points
along
the
waveform
as
candidates
for
pitch
markers.
these
markers
are
validated
by
an
error
detection
and
correction
procedure.about
95
percent
of
the
pitch
periods
were
recognized
correctly
within
1
to
2
times
real-time
on
the
ibm
7090.
.b
cacm
june,1967
.a
reddy,
d.
r.
.n
ca670602
jb
february
28,
1978
9:42
am
.x
1590
5
1590
1590
5
1590
1590
5
1590
.i
1591
.t
a
model
for
a
multifunctional
teaching
system
.w
a
teaching
system
model
that
was
incorporated
into
an
operating
system
of
a
large
computer
is
described.
the
model
transferred
control
to
the
operating
system
to
execute
functions
other
than
teaching,
and
then
recovered
control
in
order
to
resume
teaching.
the
teaching
system
(abac-ii)
was
written
to
run
under
the
operating
system
(ibsys)
for
the
ibm
7044
graphic
system.
because
the
teaching
system
automatically
terminated
and
rescheduled
itself,
a
student
studying
a
course
presented
at
a
cathode-ray
display
terminal
could
switch
readily
between
student
mode
and
programmer
mode.
during
the
latter,
the
full
resources
of
the
operating
system
(language
processors,
compilers,
library
and
user's
programs)
were
at
his
disposal.
he
could
for
example,
write,
assemble,
debug,
and
execute
at
the
terminal
a
program
written
in
any
language
processed
by
the
operating
system.
a
course
could
therefore
include
text
material
interleaved
with
programming
problems
which
the
student
could
solve
without
leaving
the
terminal.
exercises
in
simulation
and
gaming
could
also
be
provided.
the
implications
of
a
teaching
system
with
this
degree
of
flexibility
for
industrial
and
executive
training
as
well
as
academic
education
are
discussed.
in
addition,
the
advantages
of
this
type
of
system
for
computer
programming
and
operation
are
also
considered.
.b
cacm
june,
1967
.a
engvold,
k.
j.
hughes,
j.
l.
.n
ca670601
jb
february
28,
1978
10:24
am
.x
1591
5
1591
1591
5
1591
1591
5
1591
1680
5
1591
1591
6
1591
.i
1592
.t
string
similarity
and
misspellings
.w
the
problem
of
programming
a
computer
to
determine
whether
or
not
a
string
of
characters
is
a
misspelling
of
a
given
word
was
considered.
a
numberof
algorithms
were
evaluated-some
proposed
by
other
writers,
some
by
the
author.
these
techniques
were
tested
on
a
collection
of
misspellings
made
by
students
at
various
grade
levels.
while
many
of
the
methods
were
clearly
unsatisfactory,
some
gave
as
few
as
2.1
percent
incorrect
determinations.
.b
cacm
june,
1967
.a
alberga,
c.
n.
.n
ca670510
jb
february
28,
1978
10:28
am
.x
1112
4
1592
1592
4
1592
1592
4
1592
1592
4
1592
2111
4
1592
2111
4
1592
2339
4
1592
2339
4
1592
440
4
1592
982
5
1592
1112
5
1592
1592
5
1592
1592
5
1592
1592
5
1592
2111
5
1592
2339
5
1592
619
5
1592
830
6
1592
1112
6
1592
1112
6
1592
1592
6
1592
1592
6
1592
440
6
1592
619
6
1592
619
6
1592
.i
1593
.t
a
simple
technique
for
digital
division
.w
a
simple
and
economical
method
for
digital
division
is
described.
the
method
is
suitable
for
divisors
whose
leading
character
is
either
radix
less
one
or
is
unity
with
the
next
character
equal
to
zero;
also
the
method
is
direct
and
needs
only
half
the
number
of
arithmetic
operations
needed
by
a
variant
of
the
harvard
iterative
method,
described
by
gilman,
which
is
suitable
for
similar
divisors.
.b
cacm
june,
1967
.a
nandi,
s.
k.
krishnamurthy,
e.
v.
.n
ca670509
jb
february
28,
1978
10:30
am
.x
214
4
1593
1497
4
1593
1593
4
1593
1593
4
1593
1975
4
1593
1292
5
1593
1497
5
1593
1593
5
1593
1593
5
1593
1593
5
1593
91
5
1593
107
6
1593
1026
6
1593
1292
6
1593
1593
6
1593
.i
1594
.t
an
algorithm
for
generating
permutations
.w
an
algorithm
is
described
which
under
repeated
application
generates
all
permutations
of
k
elements.
only
the
previously
generated
permutation,
the
constant
k,
and
a
temporary
index
are
needed.
starting
with
a
particular
ordering
of
k
elements
(abcd),
repeated
application
of
the
algorithm
will
generate
k-1
additional
permutations
by
k-1
successive
rotations.
from
the
initial
circular
ordering
of
k
objects,
another
circular
ordering
can
be
obtained
by
rotating
the
k-1
lowest
elements.
for
each
new
k-1
circular
ordering,
another
k-2
can
be
obtained
by
rotating
the
k-2
lowest
elements.
by
continuing
in
this
manner,
applications
of
the
algorithm
will
generate
all
(k-1)!
circular
orderings,
or
since
each
circular
ordering
yields
k
permutations
the
algorithm
generates
all
k!
permutations.
.b
cacm
may,
1967
.a
langdon
jr.,
g.
g.
.n
ca670508
jb
february
28,
197810:35
am
.x
1594
5
1594
1594
5
1594
1594
5
1594
2087
5
1594
2189
5
1594
3188
5
1594
1594
6
1594
1594
6
1594
1594
6
1594
2087
6
1594
3191
6
1594
521
6
1594
612
6
1594
.i
1595
.t
on
the
computer
enumeration
of
finite
topologies
.w
the
problem
of
enumerating
the
number
of
topologies
which
can
be
formed
from
a
finite
point
set
is
considered
both
theoretically
and
computationally.
certain
fundamental
results
are
established,
leading
to
an
algorithm
for
enumerating
finite
topologies,
and
computed
results
are
given
for
n
<=
7.
an
interesting
side
result
of
the
computational
work
was
the
unearthing
of
a
theoretical
error
which
had
been
induced
into
the
literature;
the
use
of
the
computer
in
combinatorics
represents,
chronologically,
an
early
application,
and
this
side
result
underscores
its
continuing
usefulness
in
this
area.
.b
cacm
may,
1967
.a
evans,
j.
w.
harary,
f.
lynn,
m.
s.
.n
ca670507
jb
february
28,
1978
10:37
am
.x
1595
5
1595
1595
5
1595
1595
5
1595
.i
1596
.t
airy
function
(algorithm
301
[s20])
.b
cacm
may,
1967
.a
bond,
g.
pitteway,
m.
l.
v.
.n
ca670506a
jb
february
28,
1978
10:38
am
.x
1596
5
1596
1596
5
1596
1596
5
1596
.i
1597
.t
transpose
vector
stored
array
(algorithm
302
[k2])
.b
cacm
may,
1967
.a
boothroyd,
j.
.n
ca670506b
jb
march
23,
1978
4:00
pm
.x
1597
5
1597
1597
5
1597
1597
5
1597
2354
5
1597
2355
5
1597
1418
6
1597
1418
6
1597
1521
6
1597
1521
6
1597
1597
6
1597
1597
6
1597
1679
6
1597
1883
6
1597
2040
6
1597
2350
6
1597
2350
6
1597
2354
6
1597
2355
6
1597
.i
1598
.t
least
squares
fit
by
orthogonal
polynomials
(algorithm
28
[e2])
.b
cacm
may,
1967
.a
makinson,
g.
j.
.n
ca670506c
jb
march
23,
1978
4:02
pm
.x
1598
5
1598
1598
5
1598
1598
5
1598
.i
1599
.t
numerical
solution
of
the
polynomial
equation
(algorithm
300
[c2])
.b
cacm
may,
1967
.a
kohfeld,
j.
j.
.n
ca670506d
jb
march
23,
1978
4:03
pm
.x
1599
5
1599
1599
5
1599
1599
5
1599
.i
1600
.t
chebyshev
quadrature
(algorithm
279
[d1])
.b
cacm
may,
1967
.a
hillstrom,
k.
.n
ca670506e
jb
march
23,
1978
4:04
pm
.x
1600
5
1600
1600
5
1600
1600
5
1600
2057
5
1600
2058
5
1600
2392
5
1600
2416
5
1600
1600
6
1600
1600
6
1600
1600
6
1600
1600
6
1600
1894
6
1600
2055
6
1600
2055
6
1600
2058
6
1600
.i
1601
.t
parallel
numerical
methods
for
the
solution
of
equations
.w
classical
iterative
procedures
for
the
numerical
solution
of
equations
provide
at
each
stage
a
single
new
approximation
to
the
root
in
question.
a
technique
is
given
for
the
development
of
numerical
procedures
which
provide,
at
each
stage,
several
approximations
to
a
solution
of
an
equation.
the
s8everal
approximations
obtained
in
any
iteration
are
computationally
independent,
making
the
methods
of
interest
in
a
parallel
processing
environment.
convergence
is
insured
by
extracting
the
"best
information"
at
each
iteration.
several
families
of
numerical
procedures
which
use
the
technique
of
the
procedures
in
a
parallel
processing
environment
are
developed
and
measurements
of
these
statistics
are
reported.
these
measurements
are
interpreted
in
a
parallel
processing
environment.
in
such
an
environment
the
procedures
obtained
are
superior
to
standard
algorithms.
.b
cacm
may,
1967
.a
shedler,
g.
s.
.n
ca670505
jb
february
28,
1978
10:44
am
.x
1601
5
1601
1601
5
1601
1601
5
1601
1781
5
1601
123
6
1601
196
6
1601
919
6
1601
990
6
1601
1007
6
1601
1046
6
1601
1131
6
1601
1139
6
1601
1140
6
1601
1149
6
1601
1198
6
1601
1215
6
1601
1223
6
1601
1265
6
1601
1303
6
1601
1323
6
1601
1358
6
1601
1366
6
1601
1421
6
1601
1460
6
1601
1462
6
1601
1463
6
1601
1467
6
1601
1468
6
1601
1477
6
1601
1491
6
1601
1496
6
1601
1531
6
1601
1535
6
1601
1565
6
1601
1601
6
1601
1602
6
1601
1613
6
1601
1614
6
1601
1626
6
1601
1641
6
1601
1787
6
1601
1788
6
1601
205
6
1601
224
6
1601
249
6
1601
288
6
1601
316
6
1601
381
6
1601
398
6
1601
11
6
1601
404
6
1601
410
6
1601
463
6
1601
464
6
1601
483
6
1601
3184
6
1601
3188
6
1601
584
6
1601
600
6
1601
680
6
1601
691
6
1601
763
6
1601
799
6
1601
.i
1602
.t
pose:
a
language
for
posing
problems
to
a
computer
.w
a
language,
pose,
is
described
which
is
a
drastic
departure
from
the
fortran/algol
type,
though
it
does
utilize
fortran
formula
and
logic
representations
(and
actually
contains
fortran
vi
as
a
subset).
with
the
new
language,
the
user
need
only
describe
his
problem
in
"equation-like"
form.
the
method
of
solution
is
automatically
provided
in
conjunction
with
the
translation
from
equation
form
to
computer
instruction.
in
this
way
the
pose
language
user
can
solve
difficult
computational
problems
(like
the
solution
of
differential
equation)
without
requiring
a
knowledge
of
numerical
methods
or
the
intricacies
of
computer
subroutine
logic.
essentially
all
clerical
operations
now
required
for
fortran
programming
have
been
automated
so
that
the
pose
programmer
need
not
be
concerned
with
these
details.
.b
cacm
may,
1967
.a
schlesinger,
s.
sashkin,
l.
.n
ca670504
jb
february
28,
1978
10:53
am
.x
1602
5
1602
1602
5
1602
1602
5
1602
1781
5
1602
123
6
1602
196
6
1602
919
6
1602
990
6
1602
1007
6
1602
1046
6
1602
1131
6
1602
1139
6
1602
1140
6
1602
1149
6
1602
1198
6
1602
1215
6
1602
1223
6
1602
1265
6
1602
1303
6
1602
1323
6
1602
1358
6
1602
1366
6
1602
1421
6
1602
1460
6
1602
1462
6
1602
1463
6
1602
1467
6
1602
1468
6
1602
1477
6
1602
1491
6
1602
1496
6
1602
1531
6
1602
1535
6
1602
1565
6
1602
1601
6
1602
1602
6
1602
1613
6
1602
1614
6
1602
1626
6
1602
1641
6
1602
1787
6
1602
1788
6
1602
205
6
1602
224
6
1602
249
6
1602
288
6
1602
316
6
1602
381
6
1602
398
6
1602
11
6
1602
404
6
1602
410
6
1602
463
6
1602
464
6
1602
483
6
1602
3184
6
1602
3188
6
1602
584
6
1602
600
6
1602
680
6
1602
691
6
1602
763
6
1602
799
6
1602
.i
1603
.t
a
multiprogramming
monitor
for
small
machines
.w
int,
a
combination
hardware/software
monitor
designed
to
control
a
wide
variety
of
real-time
input/output
devices,
is
described.
the
simple
hardware
additions
provide
a
uniform
device
to
machine
interface
for
such
elements
as
keyboards
graphic
input
devices,
and
interval
timers.
the
software
relieves
the
user
program
from
the
details
of
input/output
timing,
buffering,
and
task
scheduling
and
provides
parallel
processing
capability.
user
programs
communicate
with
the
monitor
through
a
small
set
of
meta-instruction
which
consists
mostly
of
machine-language
subroutine
calls.
.b
cacm
may,
1967
.a
hornbuckle,
g.
d.
.n
ca670503
jb
february
28,
1978
10:57
am
.x
1458
4
1603
1523
4
1603
1603
4
1603
1698
4
1603
1747
4
1603
1748
4
1603
1854
4
1603
1877
4
1603
1960
4
1603
2377
4
1603
2378
4
1603
2497
4
1603
2558
4
1603
2625
4
1603
2632
4
1603
2840
4
1603
2941
4
1603
3105
4
1603
3144
4
1603
1471
5
1603
1603
5
1603
1603
5
1603
1603
5
1603
.i
1604
.t
further
analysis
of
a
computing
center
environment
.w
empirical
distributions
of
program
lengths,
execution
times,
processing
times,
and
loading
times
of
over
10,000
jobs
serviced
in
a
university
computing
center
environment
are
presented.
the
data
are
subdivided
according
to
certain
characteristics
of
users
and
jobs
to
obtain
selected
empirical
conditional
distributions
of
those
time
properties
as
well
as
statistical
measures
of
other
interesting
properties.
the
results
are
interpreted
in
terms
of
the
properties
of
the
system
studied.
.b
cacm
may,
1967
.a
walter,
e.
s.
wallace,
v.
l.
.n
ca670502
jb
february
28,
1978
11:02
am
.x
1533
4
1604
1604
4
1604
1604
4
1604
1951
4
1604
2373
4
1604
1224
5
1604
1410
5
1604
1533
5
1604
1604
5
1604
1604
5
1604
1604
5
1604
1951
5
1604
2667
5
1604
2668
5
1604
1224
6
1604
1410
6
1604
1604
6
1604
1604
6
1604
1604
6
1604
1604
6
1604
1728
6
1604
1728
6
1604
1761
6
1604
1827
6
1604
1827
6
1604
2677
6
1604
.i
1605
.t
an
experimental
comparison
of
time
sharing
and
batch
processing
.w
the
effectiveness
for
program
development
of
the
mit
compatible
time-sharing
system
(ctss)
was
compared
with
that
of
the
ibm
ibsys
batch-processing
system
by
means
of
a
statistically
designed
experiment.
an
identical
set
of
four
programming
problems
was
assigned
to
each
of
a
group
of
four
programming
subjects.
influences
external
to
the
systems,
such
as
the
sequence
of
problem
solution,
and
programmer
and
problem
characteristics,
were
specified
as
design
factors
in
the
experiment.
data
was
obtained
for
six
variables
(e.g.,
programmer
time,
computer
time,
elapsed
time,
etc.)
which
were
considered
to
be
definitive
of
"system
effectiveness,"
and
analysis
of
variance
techniques
were
employed
to
estimate
system
differences
in
these
variables
after
differences
due
to
the
design
factors
had
been
eliminated.
statistical
analysis
of
the
experimental
results
provided
strong
evidence
of
important
system
differences,
as
well
as
a
critique
of
the
experimental
design
itself
with
implications
for
further
experimentation.
.b
cacm
may,
1967
.a
schatzoff,
m.
tsao,
r.
wiig,
r.
.n
ca670501
jb
february
28,
1978
11:09
am
.x
1605
5
1605
1605
5
1605
1605
5
1605
1792
5
1605
1908
5
1605
1550
6
1605
1605
6
1605
1605
6
1605
224
6
1605
.i
1606
.t
chi-squared
integral
(algorithm
299
[s15])
.b
cacm
april,
1967
.a
hill,
i.
d.
pike,
m.
c.
.n
ca670408a
jb
february
28,
1978
11:10
am
.x
1606
5
1606
1606
5
1606
1606
5
1606
2467
5
1606
2793
5
1606
1606
6
1606
1606
6
1606
.i
1607
.t
coulomb
wave
functions
(algorithm
300
[s22])
.b
cacm
april,
1967
.a
gunn,
j.
h.
.n
ca670408b
jb
march
23,
1978
4:06
pm
.x
1607
5
1607
1607
5
1607
1607
5
1607
.i
1608
.t
numerical
integration
of
function
that
has
a
pole
.w
it
is
common
to
need
to
integrate
numerically
functions
that
diverge
somewhere
outside
the
range
of
integration.
even
if
the
divergence
occurs
quite
far
away,
integration
formulas
like
simpson's,
that
depend
on
fitting
a
polynomial,
usually
will
be
inaccurate:
near
a
pole
they
will
be
very
bad.
a
method
is
described
that
gives
formulas
that
will
integrate
functions
of
this
kind
accurately
if
the
orders
and
positions
of
the
poles
are
known.
explicit
formulas
are
given
that
are
easy
to
use
on
an
automatic
computer.
it
is
shown
that
they
can
be
used
for
some
other
singularities
as
well
as
poles.
if
the
integral
converges,
integration
can
be
carried
to
the
singularity.
the
accuracy
of
the
integration
with
a
pole
of
second
order
is
discussed,
and,
as
an
example,
the
new
formula
is
compared
with
simpson's.
the
new
formulas
are
useful
even
far
from
the
pole,
while
near
the
pole
their
advantage
is
overwhelming.
.b
cacm
april,
1967
.a
eisner,
e.
.n
ca670407
jb
february
28,
1978
11:20
am
.x
1608
5
1608
1608
5
1608
1608
5
1608
.i
1609
.t
scheduling
university
course
examinations
by
computer
.w
a
new
approach
to
the
problem
of
scheduling
course
examinations
is
presented.
in
principle,
an
examination
schedule
which
requires
a
minimum
number
of
examination
periods
and
satisfies
the
constraint
that
no
student
be
required
to
take
two
examinations
simultaneously
can
be
found
in
two
steps.
first,
course
which
may
have
their
examinations
scheduled
at
the
same
period
are
grouped
together
in
all
possible
ways.
then
a
minimum
number
of
these
groups,
such
that
each
course
is
included
at
least
once,
are
selected.
by
removing
multiple
occurrences
of
courses
and
then
scheduling
each
group
at
a
different
period
a
minimal
schedule
can
be
obtained.
known
algorithms
for
carrying
out
these
procedures
are
prohibitively
expensive.
approximations
to
the
ideal
procedure
outlined
above
are
given
which
yield
nonminimal
but
feasible
schedules
with
a
very
small
expenditure
of
time.
results
of
experiments
using
these
techniques
are
given.
these
are
encouraging
and
indicate
that
further
experimentation
would
be
worthwhile.
.b
cacm
april,
1967
.a
hall
jr.,
a.
d.
acton,
f.
s.
.n
ca670406
jb
february
28,
1978
11:22
am
.x
1609
4
1609
2052
4
1609
1013
5
1609
1609
5
1609
1609
5
1609
1609
5
1609
.i
1610
.t
a
method
for
the
solution
of
transportation
problems
with
tall
matrices
.w
a
method
is
presented
for
the
solution
of
the
transportation
problem
having
a
cost
matrix
with
few
columns.
the
computer
implementation
of
this
method
shows
it
to
be
very
fast
and
efficient.
application
are
indicted
for
the
personnel
classification
problem
as
well
as
the
classical
transportation
problem.
an
example
is
worked
out
in
detail.
.b
cacm
april,
1967
.a
dwyer,
p.
s.
galler,
b.
a.
.n
ca670405
jb
february
28,
1978
11:25
am
.x
1610
5
1610
1610
5
1610
1610
5
1610
.i
1611
.t
scheduling
project
networks
.w
some
of
the
basic
concepts
and
terminology
of
project
networking
are
developed.
the
critical
path
algorithm
incorporated
in
the
c-e-i-r
proprietary
scheduling
system
ramps
(resource
allocation
and
multi-project
scheduling)
is
described.
the
error
detection
and
network
analysis
features
of
the
algorithm
are
also
described.
.b
cacm
april,
1967
.a
klein,
m.
m.
.n
ca670404
jb
february
28,
1978
11:31
am
.x
1611
4
1611
1611
4
1611
1295
5
1611
1611
5
1611
1611
5
1611
1611
5
1611
340
5
1611
.i
1612
.t
top-to-bottom
parsing
rehabilitated?
.w
this
note
is
concerned
with
the
efficiency
of
the
top-to-bottom
parsing
algorithm
as
used
in
connection
with
programming
language
grammars.
it
is
shown,
for
instance,
that
retracing
of
unprofitable
paths
can
often
be
eliminated
by
a
suitable
rearrangement
of
the
productions
defining
the
grammar.
the
essential
weakness
of
the
method
is
in
dealing
with
complicated
syntactic
structures
which
are
in
practice
only
sparsely
occupied,
e.g.,
arithmetic
expressions.
.b
cacm
april,
1967
.a
brooker,
r.
a.
.n
ca670403
jb
february
28,
1978
11:32
am
.x
1612
4
1612
1781
4
1612
1945
4
1612
1139
5
1612
1612
5
1612
1612
5
1612
1612
5
1612
.i
1613
.t
one-pass
compilation
of
arithmetic
expressions
for
a
parallel
processor
.w
under
the
assumption
that
a
processor
may
have
a
multiplicity
of
arithmetic
units,
a
compiler
for
such
a
processor
should
produce
object
code
to
take
advantage
of
possible
parallelism
of
operation.
most
of
the
presently
known
compilation
techniques
are
inadequate
for
such
a
processor
because
they
produce
expression
structures
that
must
be
evaluated
serially.
a
technique
is
presented
here
for
compiling
arithmetic
expressions
into
structures
that
can
be
evaluated
with
a
high
degree
of
parallelism.
the
algorithm
is
a
variant
of
the
so-called
"top-down"
analysis
technique,
and
requires
only
one
pass
of
the
input
text.
.b
cacm
april,
1967
.a
stone,
h.
s.
.n
ca670402
jb
february
28,
1978
11:36
am
.x
1086
4
1613
1132
4
1613
1234
4
1613
1263
4
1613
1265
4
1613
1270
4
1613
1323
4
1613
1358
4
1613
1379
4
1613
1380
4
1613
1453
4
1613
1464
4
1613
1484
4
1613
1491
4
1613
1498
4
1613
1613
4
1613
1613
4
1613
1613
4
1613
1613
4
1613
1613
4
1613
1614
4
1613
1646
4
1613
1781
4
1613
1825
4
1613
1860
4
1613
1900
4
1613
1947
4
1613
1955
4
1613
2025
4
1613
2083
4
1613
2154
4
1613
2178
4
1613
2179
4
1613
2252
4
1613
2325
4
1613
2341
4
1613
2365
4
1613
2506
4
1613
2546
4
1613
2645
4
1613
2652
4
1613
2684
4
1613
2842
4
1613
2929
4
1613
2934
4
1613
3060
4
1613
3069
4
1613
669
4
1613
679
4
1613
691
4
1613
761
4
1613
949
4
1613
989
4
1613
987
5
1613
1086
5
1613
1134
5
1613
1453
5
1613
1613
5
1613
1613
5
1613
1613
5
1613
1781
5
1613
2175
5
1613
3184
5
1613
123
6
1613
196
6
1613
919
6
1613
990
6
1613
1007
6
1613
1046
6
1613
1131
6
1613
1139
6
1613
1140
6
1613
1149
6
1613
1198
6
1613
1215
6
1613
1223
6
1613
1265
6
1613
1303
6
1613
1323
6
1613
1358
6
1613
1366
6
1613
1421
6
1613
1460
6
1613
1462
6
1613
1463
6
1613
1467
6
1613
1468
6
1613
1477
6
1613
1491
6
1613
1496
6
1613
1531
6
1613
1535
6
1613
1551
6
1613
1565
6
1613
1601
6
1613
1602
6
1613
1613
6
1613
1613
6
1613
1614
6
1613
1626
6
1613
1641
6
1613
1787
6
1613
1788
6
1613
205
6
1613
224
6
1613
249
6
1613
1886
6
1613
288
6
1613
316
6
1613
381
6
1613
398
6
1613
11
6
1613
404
6
1613
410
6
1613
463
6
1613
464
6
1613
483
6
1613
3184
6
1613
3188
6
1613
584
6
1613
600
6
1613
680
6
1613
691
6
1613
763
6
1613
799
6
1613
.i
1614
.t
a
proposal
for
definitions
in
algol
.w
an
extension
to
algol
is
proposed
for
adding
new
data
types
and
operators
to
the
language.
definitions
may
occur
in
any
block
heading
and
terminate
with
the
block.
they
are
an
integral
part
of
the
program
and
are
not
fixed
in
the
language.
even
the
behavior
of
existing
operators
may
be
redefined.
the
processing
of
text
containing
defined
contexts
features
a
"replacement
rule"
that
eliminates
unnecessary
iterations
and
temporary
storage.
examples
of
definition
sets
are
given
for
real
and
complex
matrices,
complex
numbers,
file
processing,
and
list
manipulation.
.b
cacm
april,
1967
.a
galler,
b.
a.
perlis,
a.
j.
.n
ca670401
jb
february
28,
1978
11:43
am
.x
1086
4
1614
1132
4
1614
1234
4
1614
1263
4
1614
1265
4
1614
1270
4
1614
1323
4
1614
1358
4
1614
1379
4
1614
1380
4
1614
1453
4
1614
1464
4
1614
1484
4
1614
1491
4
1614
1498
4
1614
1613
4
1614
1614
4
1614
1614
4
1614
1781
4
1614
1825
4
1614
1860
4
1614
2083
4
1614
2178
4
1614
2179
4
1614
2252
4
1614
2253
4
1614
2325
4
1614
2341
4
1614
2546
4
1614
2557
4
1614
2645
4
1614
2652
4
1614
2684
4
1614
2842
4
1614
2929
4
1614
2934
4
1614
3069
4
1614
669
4
1614
679
4
1614
691
4
1614
761
4
1614
949
4
1614
989
4
1614
1614
5
1614
1614
5
1614
1614
5
1614
1693
5
1614
1781
5
1614
1824
5
1614
1861
5
1614
2126
5
1614
437
5
1614
3184
5
1614
823
6
1614
123
6
1614
196
6
1614
196
6
1614
919
6
1614
990
6
1614
1007
6
1614
1046
6
1614
1131
6
1614
1139
6
1614
1140
6
1614
1149
6
1614
1198
6
1614
1215
6
1614
1223
6
1614
1265
6
1614
1303
6
1614
1323
6
1614
1358
6
1614
1358
6
1614
1366
6
1614
1421
6
1614
1421
6
1614
1460
6
1614
1462
6
1614
1463
6
1614
1467
6
1614
1468
6
1614
1477
6
1614
1477
6
1614
1491
6
1614
1491
6
1614
1496
6
1614
1531
6
1614
1535
6
1614
1565
6
1614
1601
6
1614
1602
6
1614
1613
6
1614
1614
6
1614
1614
6
1614
1614
6
1614
1614
6
1614
1614
6
1614
1626
6
1614
1641
6
1614
1693
6
1614
1781
6
1614
1781
6
1614
1787
6
1614
1788
6
1614
205
6
1614
224
6
1614
249
6
1614
288
6
1614
316
6
1614
381
6
1614
398
6
1614
11
6
1614
404
6
1614
404
6
1614
404
6
1614
408
6
1614
410
6
1614
463
6
1614
464
6
1614
483
6
1614
3184
6
1614
3188
6
1614
584
6
1614
600
6
1614
680
6
1614
691
6
1614
763
6
1614
799
6
1614
.i
1615
.t
an
algorithm
for
generating
root
locus
diagrams
.w
a
technique
for
using
a
digital
computer
to
draw
both
ordinary
and
time-lag
root
locus
diagrams
is
described.
ordinary
diagrams
are
drawn
much
faster
and
more
accurately
than
ever
before.
time-lag
diagrams,
which
had
been
impossible
to
obtain,
are
drawn
with
the
same
speed
and
accuracy
as
ordinary
diagrams.
.b
cacm
march,
1967
.a
krall,
a.
m.
fornaro,
r.
.n
ca670313
jb
february
28,
1978
12:57
pm
.x
1615
5
1615
1615
5
1615
1615
5
1615
.i
1616
.t
tensor
calculations
on
computer:
appendix
.w
in
the
main
text
of
the
paper
[comm.
acm
9,
12
(dec.
196),
864],
a
formac
program
was
discussed
which
is
capable
of
calculating
various
quantities
of
interest
in
tensor
calculus.
this
appendix
is
intended
as
an
example
of
the
program
output.
chrisoffel
symbols
calculated
for
12
basic
orthogonal
coordinate
systems
are
listed.
.b
cacm
march,
1967
.a
walton,
j.
j.
.n
ca670312
jb
february
28,
1978
12:58
pm
.x
1543
5
1616
1616
5
1616
1616
5
1616
1616
5
1616
1664
5
1616
1345
6
1616
1345
6
1616
1543
6
1616
1616
6
1616
1616
6
1616
.i
1617
.t
eigenvalues
and
eigenvectors
of
the
symmetric
system
(algorithm
297
[f2])
.b
cacm
march,
1967
.a
boothroyd,
j.
.n
ca670311a
jb
february
28,
1978
12:59
pm
.x
1617
5
1617
1617
5
1617
1617
5
1617
.i
1618
.t
determination
of
the
square-root
of
a
positive
definite
matrix
(algorithm
298
[f1])
.b
cacm
march,
1967
.a
spath,
h.
.n
ca670311b
jb
march
23,
1978
4:09
pm
.x
1618
5
1618
1618
5
1618
1618
5
1618
.i
1619
.t
error-free
methods
for
statistical
computations
.w
neely
has
discussed
computational
error
generated
by
some
algorithms
used
to
compute
various
statistics.
in
the
present
paper
methods
are
described
which
are
error-free,
simple
in
concept,
and
usually
less
costly
in
machine
time
than
those
mentioned
by
neely.
.b
cacm
march,
1967
.a
rodden,
b.
e.
.n
ca670310
jb
february
28,
1978
1:02
pm
.x
1619
4
1619
3166
4
1619
1411
5
1619
1619
5
1619
1619
5
1619
1619
5
1619
.i
1620
.t
methods
of
evaluating
polynomial
approximations
in
function
evaluation
routines
.w
the
method
of
nested
multiplication
is
commonly
used
in
function
evaluation
routines
to
evaluate
approximation
polynomials.
new
polynomial
evaluation
methods
have
been
developed
in
recent
years
which
require
fewer
multiplications
than
nested
multiplication
and
may
therefore
be
preferable
for
use
in
function
evaluation
routines.
although
some
of
these
methods
do
not
appear
to
be
practically
useful
because
of
rounding-error
difficulties,
several
methods
of
evaluating
low-degree
polynomials
have
been
found
to
be
satisfactory.
three
such
methods
are
described
and
illustrated.
.b
cacm
march,
1967
.a
file,
c.
t.
.n
ca670309
jb
february
28,
1978
1:08
pm
.x
1620
4
1620
1620
4
1620
819
4
1620
1620
5
1620
1620
5
1620
1620
5
1620
436
5
1620
819
5
1620
.i
1621
.t
computer
typesetting
of
algol
.w
an
application
of
computer-aided
typesetting
is
introduced.
a
working
method
is
described
for
publishing
algol
by
computerized
translation
from
hardware
into
reference
representation,
computerized
planning
of
typographical
lay-out
and
computerized
control
of
a
typesetting
machine.
the
point
is
made
that
experts
in
science,
technology,
and
programming
are
guaranteed
a
correct
algol
documentation
without
spending
valuable
time
and
power
on
typographic
considerations
and
proofreading.
.b
cacm
march,
1967
.a
sydow,
l.
v.
.n
ca670308
jb
february
28,
1978
1:12
pmb
.x
1621
5
1621
1621
5
1621
1621
5
1621
.i
1622
.t
an
efficient
procedure
for
the
generation
of
closed
subsets
.w
an
efficient
algorithm
is
described
for
generating
subsets
of
a
set
s
which
satisfy
constraints
of
the
form:
"if
s(i)
is
a
member
of
the
subset,
then
s(j)
must
also
be
a
member
of
the
subset."
the
algorithm
has
been
programmed
in
the
wisp
language
and
successfully
run
on
the
ibm
7094
in
connection
with
a
routine
to
detect
feedback
in
multidimensional
iterative
networks.
.b
cacm
march,
1967
.a
waite,
w.
m.
.n
ca670307
jb
february
28,
1978
1:18
pm
.x
1622
5
1622
1622
5
1622
1622
5
1622
.i
1623
.t
an
application
of
formac
.w
a
nonlinear
circuit
analysis
problem
is
stated
and
the
way
in
which
it
was
solved
using
formac
is
indicated.
the
solution
of
the
problem
using
formac
was
notable
since
several
other
methods
that
were
tried
failed.
the
problem
is
straightforward
(although
untenable
by
hand)
but
nevertheless
involved
an
elaborate
use
of
the
formac
language.
the
program
was
fairly
large
and
utilized
practically
every
command.
in
particular,
it
made
extensive
use
of
the
part
command.
several
tricks
were
necessary
in
order
to
circumvent
some
of
the
shortcomings
of
the
formac
system.
this
paper
is
more
concerned
with
the
use
of
programming
techniques
in
formac
than
with
the
actual
engineering
problem,
although
readers
may
be
interested
in
the
problem
because
it
is
stated
in
a
general
(mathematical)
sense
and
could
be
of
interest
in
areas
other
than
circuit
analysis.
.b
cacm
march,
1967
.a
neidleman,
l.
d.
.n
ca670306
jb
february
28,
1978
1:27
pm
.x
1623
5
1623
1623
5
1623
1623
5
1623
.i
1624
.t
automatic
dimensioning
.w
examples
of
algorithm
that
will
accomplish
automatic
storage
reservation
without
the
need
for
explicit
array
declarations
are
described.
.b
cacm
march,
1967
.a
klerer,
m.
may,
j.
.n
ca670305
jb
february
28,
1978
1:28
pm
.x
1396
4
1624
1624
4
1624
1083
5
1624
1624
5
1624
1624
5
1624
1624
5
1624
.i
1625
.t
on
the
automatic
simplification
of
source-language
programs
.w
methods
of
simplification
that
can
be
applied
automatically
to
programs
written
in
an
algol-like
language
are
discussed.
the
simplifications
are
based
on
the
form
of
the
program
and
the
knowledge
obtained
by
a
processor,
without
any
understanding
of
what
the
program
is
supposed
to
do.
these
methods
have
been
implemented
in
a
processor
called
sure
that
accepts
a
program
written
in
jovial
and
outputs
an
equivalent
jovial
program
that
may
be
shorter
and
may
be
executed
faster
than
the
original.
sure
is
described,
some
of
the
problems
encountered
in
automatic
improvement
at
the
source-language
level
are
discussed,
and
further
types
of
automatic
program
improvement
are
suggested.
.b
cacm
march,
1967
.a
clark,
e.
r.
.n
ca670304
jb
february
28,
1978
1:33
pm
.x
1084
4
1625
1379
4
1625
1625
4
1625
1625
4
1625
1807
4
1625
1945
4
1625
1947
4
1625
1248
5
1625
1625
5
1625
1625
5
1625
1625
5
1625
669
5
1625
.i
1626
.t
structure
of
a
lisp
system
using
two-level
storage
.w
in
an
ideal
list-processing
system
there
would
be
enough
core
memory
to
contain
all
the
data
and
programs.
described
in
this
paper
are
a
number
of
techniques
that
have
been
used
to
build
a
lisp
system
utilizing
a
drum
for
its
principal
storage
medium,
with
a
surprisingly
low
time
penalty
for
use
of
this
slow
storage
device.
the
techniques
include
careful
segmentation
of
system
programs,
allocation
of
virtual
memory
to
allow
address
arithmetic
for
type
determination,
and
a
special
algorithm
for
building
reasonably
linearized
lists.
a
scheme
for
binding
variables
is
described
which
is
good
in
this
environment
and
allows
for
complete
compatibility
between
compiled
and
interpreted
programs
with
no
special
declarations.
.b
cacm
march,
1967
.a
bobrow,
d.
g.
murphy,
d.
l.
.n
ca670303
jb
february
28,
1978
1:39
pm
.x
1626
4
1626
1708
4
1626
1781
4
1626
1860
4
1626
2299
4
1626
1626
5
1626
1626
5
1626
1626
5
1626
1641
5
1626
1708
5
1626
1781
5
1626
1826
5
1626
1860
5
1626
2156
5
1626
2168
5
1626
2249
5
1626
2314
5
1626
2719
5
1626
2736
5
1626
2833
5
1626
123
6
1626
196
6
1626
919
6
1626
990
6
1626
1007
6
1626
1046
6
1626
1098
6
1626
1131
6
1626
1139
6
1626
1140
6
1626
1149
6
1626
1198
6
1626
1215
6
1626
1223
6
1626
1265
6
1626
1303
6
1626
1323
6
1626
1358
6
1626
1366
6
1626
1366
6
1626
1389
6
1626
1421
6
1626
1421
6
1626
1460
6
1626
1462
6
1626
1463
6
1626
1467
6
1626
1468
6
1626
1477
6
1626
1491
6
1626
1496
6
1626
1496
6
1626
1531
6
1626
1535
6
1626
1565
6
1626
1601
6
1626
1602
6
1626
1613
6
1626
1614
6
1626
1626
6
1626
1626
6
1626
1626
6
1626
1626
6
1626
1626
6
1626
1626
6
1626
1626
6
1626
1626
6
1626
1626
6
1626
1626
6
1626
1626
6
1626
1641
6
1626
1641
6
1626
1641
6
1626
1708
6
1626
1785
6
1626
1786
6
1626
1787
6
1626
1788
6
1626
205
6
1626
1826
6
1626
1826
6
1626
1826
6
1626
1826
6
1626
210
6
1626
210
6
1626
210
6
1626
224
6
1626
1853
6
1626
1853
6
1626
249
6
1626
1878
6
1626
288
6
1626
1972
6
1626
1972
6
1626
316
6
1626
378
6
1626
381
6
1626
398
6
1626
2082
6
1626
11
6
1626
2148
6
1626
2151
6
1626
2167
6
1626
2210
6
1626
2645
6
1626
2657
6
1626
2736
6
1626
404
6
1626
410
6
1626
463
6
1626
464
6
1626
483
6
1626
3184
6
1626
3184
6
1626
3188
6
1626
584
6
1626
600
6
1626
680
6
1626
691
6
1626
731
6
1626
763
6
1626
799
6
1626
.i
1627
.t
application
of
level
changing
to
a
multilevel
storage
organization
.w
a
technique
for
organizing
the
devices
of
a
computer
storage
system
is
described.
this
technique,
called
the
multilevel
store,
provides
a
means
for
economically
satisfying
the
requirements
for
very
large
storage
capacities
of
certain
data
management
and
information
retrieval
systems.
the
concept
of
level
changing
is
introduced
and
its
application
to
the
multilevel
store
is
discussed.
a
possible
means
for
physically
organizing
the
information
for
efficient
use
of
the
multilevel
store
is
presented.
.b
cacm
march,
1967
.a
morenoff,
e.
mclean,
j.
b.
.n
ca670302
jb
february
28,
1978
1:43
pm
.x
1627
5
1627
1627
5
1627
1627
5
1627
.i
1628
.t
the
emergence
of
a
profession
.w
computer
programming
deals
with
an
enormous
variety
of
activities
and
is
carried
on
by
people
with
a
great
variety
of
backgrounds.
it
seems
clear
that
part
but
not
all
of
this
activity
is
evolving
toward
a
distinct
professional
field,
but
that
the
scope
of
this
emerging
profession,
and
some
of
its
economic,
social,
and
educational
characteristics
are
as
yet
by
no
means
well
defined.
in
this
paper,
these
issues
are
examined
and
some
opinions
about
them
are
expressed.
.b
cacm
march,
1967
.a
orden,
a.
.n
ca670301
jb
february
28,
1978
1:47
pm
.x
1628
5
1628
1628
5
1628
1628
5
1628
1770
5
1628
1628
6
1628
.i
1629
.t
stat-pack:
a
biostatistical
programming
package
.w
a
package
of
fortran
statistical
programs
for
use
on
almost
any
small
to
medium
size
(40k
characters
or
8k
words)
for
which
a
fortran
ii
compiler
exists
is
described
and
its
availability
is
announced.
the
major
design
criteria
of
ease
of
use,
ease
of
modification,
flexibility
of
input
and
detail
of
output
are
described.
.b
cacm
february,
1967
.a
shannon,
s.
henschke,
c.
.n
ca670213
jb
february
28,1978
1:57
pm
.x
1629
5
1629
1629
5
1629
1629
5
1629
.i
1630
.t
computer
representation
of
planar
regions
by
their
skeletons
.w
any
region
can
be
regarded
as
a
union
of
maximal
neighborhoods
of
its
points,
and
can
be
specified
by
the
centers
and
radii
of
these
neighborhoods;
this
set
is
a
sort
of"skeleton"
of
the
region.
the
storage
required
to
represent
a
region
in
this
way
is
comparable
to
that
required
when
it
is
represented
by
encoding
its
boundary.
moreover,
the
skeleton
representation
seems
to
have
advantages
when
it
is
necessary
to
determine
repeatedly
whether
points
are
inside
or
outside
the
region,
or
to
perform
set-theoretic
operations
on
regions.
.b
cacm
february,
1967
.a
pfaltz,
j.
l.
rosenfeld,
a.
.n
ca670212
jb
february
28,
1978
2:07
pm
.x
1630
4
1630
2547
4
1630
2987
4
1630
3165
4
1630
1326
5
1630
1630
5
1630
1630
5
1630
1630
5
1630
2987
5
1630
1326
6
1630
1630
6
1630
2125
6
1630
2547
6
1630
2633
6
1630
421
6
1630
524
6
1630
.i
1631
.t
testing
a
random
number
generator
.w
the
first
1,000,000
numbers
produced
by
the
random
number
generator
used
in
the
general
purpose
systems
simulator
(gpss)
were
subjected
to
statistical
tests.
the
tests
are
described
and
the
results
of
the
tests
are
presented.
these
particular
tests
indicate
that
the
numbers
are
satisfactory.
it
is
recommended
that
suitable
tests
be
applied
to
all
random
numbers
used
in
computer
simulations.
.b
cacm
february,
1967
.a
gorenstein,
s.
.n
ca670211
jb
february
28,
1978
2:10
pm
.x
1631
5
1631
1631
5
1631
1631
5
1631
1691
5
1631
1293
6
1631
1420
6
1631
1631
6
1631
.i
1632
.t
programming
the
tabular
method
of
analysis
of
variance
for
factorial
experiments
.w
the
ease
of
programming
the
tabular
method
of
analysis
of
variance
for
complete
factorial
experiments
in
a
fortran
language
is
demonstrated.
in
this
method,
the
total
sum
of
squares
is
partitioned
into
orthogonal
single
degree
of
freedom
sums
of
squares;
main
effect
and
interaction
sums
of
squares
are
then
obtained
by
appropriate
pooling
of
the
single
degree
of
freedom
sums
of
squares.
program
segments
to
accomplish
the
procedure
are
presented.
modifications
to
handle
hierarchical
designs
and
replicated
experiments
are
mentioned.
a
fortran
ii
program
for
an
ibm
7094
is
described
briefly.
.b
cacm
february,
1967
.a
carmer,
s.
g.
.n
ca670210
jb
february
28,
1978
2:33
pm
.x
1632
5
1632
1632
5
1632
1632
5
1632
.i
1633
.t
a
modified
newton
method
for
polynomials
.w
a
modified
newton
method
for
polynomials
is
discussed.
it
is
assumed
one
has
approximations
for
all
the
roots
of
the
polynomial.
three
variations
are
described.
if
the
roots
are
simple,
it
is
shown
that
under
appropriate
conditions,
two
of
the
variations
are
cubically
convergent.
.b
cacm
february,
1967
.a
ehrlich,
l.
w.
.n
ca670209
jb
february
28,
1978
2:33
pm
.x
1633
4
1633
1452
5
1633
1633
5
1633
1633
5
1633
1633
5
1633
.i
1634
.t
27
bits
are
not
enough
for
8-digit
accuracy
.w
from
the
inequality
10^8
<
2^27,
we
are
likely
to
conclude
that
we
can
represent
8-digit
decimal
floating-point
numbers
accurately
by
27-bit
floating-point
numbers.
however,
we
need
28
significant
bits
to
represent
some
8-digit
numbers
accurately.
in
general,
we
can
show
that
if
10^p
<
2^q-1,
then
q
significant
bits
are
always
enough
for
p-digit
decimal
accuracy.
finally,
we
can
define
a
compact
27-bit
floating-point
representation
that
will
give
28
significant
bits,
for
numbers
of
practical
importance.
.b
cacm
february,
1967
.a
goldberg,
i.
b.
.n
ca670208
jb
february
28,
1978
2:38
pm
.x
1634
5
1634
1634
5
1634
1634
5
1634
1783
5
1634
1843
5
1634
1634
6
1634
1634
6
1634
1783
6
1634
.i
1635
.t
parameters
for
pseudo
runge-kutta
methods
.w
the
object
of
this
note
is
to
present
a
choice
of
the
free
parameters
in
the
third-
and
fourth-order
pseudo
runge-kutta
methods
involving
two
points.
this
choice
of
parameters
causes
a
bound
on
the
principal
part
of
the
truncation
error
term
to
be
near
the
minimum
for
the
fourth-order
method
and
at
the
minimum
for
the
third-order
method.
.b
cacm
february,
1967
.a
byrne,
g.
d.
.n
ca670207
jb
february
28,
1978
3:20
pm
.x
1635
5
1635
1635
5
1635
1635
5
1635
.i
1636
.t
invariant
imbeding
and
the
numerical
integration
of
boundary-value
problems
for
unstable
linear
systems
of
ordinary
differential
equations
.w
in
such
diverse
areas
as
radiative
transfer
in
planetary
atmospheres
and
optimal
guidance
and
control,
two-point
boundary-value
problems
for
unstable
systems
arise,
greatly
complicating
the
numerical
solution.
an
invariant
imbeding
technique
is
presented
which
is
useful
in
overcoming
these
frequently
encountered
instabilities,
and
the
results
of
some
numerical
experiments
are
given.
.b
cacm
february,
1967
.a
belman,
r.
e.
kagiwada,
h.
h.
kalaba,
r.
e.
.n
ca670206
jb
february
28,
1978
3:28
pm
.x
1636
5
1636
1636
5
1636
1636
5
1636
2427
5
1636
1581
6
1636
1636
6
1636
.i
1637
.t
problems
in
the
statistical
analysis
of
simulation
experiments:
the
comparison
of
means
and
the
length
of
sample
records
.w
research
is
continued
into
statistical
analysis
of
simulation
experiments
containing
autocorrelated
time
series.
it
is
shown
how
to
estimate
the
lengths
of
sample
records
needed
to
use
certain
large
sample
results
in
measuring
stability.
analogies
between
autocorrelated
data
and
independent
observations
are
described.
a
way
to
test
the
difference
of
the
mean
of
two
experiments
is
suggested.
it
is
shown
how
the
variance
of
the
sample
mean
relates
to
the
spectrum
of
the
generating
process,
and
estimation
of
the
quantities
of
interest
is
described.
the
results
expand
the
possibilities
of
statistical
spectral
analysis
as
applied
to
simulation
experiments.
.b
cacm
february,
1967
.a
fishman,
g.
s.
.n
ca670205
jb
february
28,
1978
3:34
pm
.x
1637
5
1637
1637
5
1637
1637
5
1637
.i
1638
.t
sorting
by
replacement
selecting
.w
in
sorting
by
replacement
selecting,
the
expected
length
of
a
sequence
beginning
with
the
i-th
element
(i>1)
is
proved
to
be
2f,
in
accordance
with
a
conjecture
of
e.
h.
friend,
where
f
is
the
number
of
memory
cells
used.
the
expected
length
of
the
j-th
sequence
is
determined
to
be
f
times
a
j-th
degree
polynomial
in
e,
such
that
the
value
of
this
polynomial
approaches
2
as
j
approaches
infinity.
recursive
formulas
are
obtained
for
both
the
mean
and
the
standard
deviation
of
the
length
of
the
j-th
sequence.
the
mathematical
proofs
of
these
results
are
based
upon
the
assumption
that
n,
the
number
of
items
to
be
sorted,
is
infinite,
but
it
is
shown
that
the
error
due
to
the
finiteness
of
n
approaches
zero
rapidly
as
n
increases.
.b
cacm
february,
1967
.a
gasner,
b.
j.
.n
ca670204
jb
february
28,
1978
3:56
pm
.x
1638
4
1638
2176
4
1638
2272
4
1638
1638
5
1638
1638
5
1638
1638
5
1638
1867
5
1638
2272
5
1638
677
5
1638
1638
6
1638
1638
6
1638
677
6
1638
.i
1639
.t
exponential
curve
fit
(algorithm
295
[e2])
.b
cacm
february,
1967
.a
spath,
h.
.n
ca670203a
jb
february
28,
1978
3:57
pm
.x
1639
4
1639
1480
5
1639
1639
5
1639
1639
5
1639
1639
5
1639
2101
5
1639
2102
5
1639
1639
6
1639
1639
6
1639
.i
1640
.t
generalized
least
squared
fit
by
orthogonal
polynomials
(algorithm
296
[e2])
.b
cacm
february,
1967
.a
makinson,
g.
j.
.n
ca670203b
jb
march
23,
1978
4:13
pm
.x
1640
5
1640
1640
5
1640
1640
5
1640
.i
1641
.t
a
use
of
fast
and
slow
memories
in
list-processing
languages
.w
a
scheme
is
described
which
permitting
a
substantial
increase
in
memory
space
utilized
to
store
list-structured
data.
it
consists
in
reducing
to
one
level
a
nonhomogeneous
store
composed
of
fast
(core)
and
slow
(disk
or
drum)
memories.
the
space
available
in
slow
memory
is
divided
into
pages
each
containing
a
given
number
of
machine
words.
the
reduction
to
a
one-level
memory
is
performed
by
a
program
which
leaves
the
most
often
called
pages
in
the
fast
memory.
when
a
new
page
from
slow
store
is
requested,
the
page
in
core
having
the
longest
period
of
inactivity
is
transferred
back
to
the
slow
store.
the
complete
scheme
has
been
implemented
in
connection
with
a
lisp
embedding
into
algol,
using
an
ibm
7044
with
32k
of
core
memory
and
disks.
gains
in
memory
space
were
about
100-fold.
as
often
happens
in
programming
applications
the
price
of
the
additional
space
is
computer
time.
although
the
disks
have
an
access
time
10^4
times
slower
than
core,
tests
indicate
that
the
actual
slow
down
varied
from
3
to
10,
depending
on
the
number
of
pages
available
in
the
fast
store.
.b
cacm
february,
1967
.a
cohen,
j.
.n
ca670202
jb
february
28,
1978
4:06
pm
.x
1626
5
1641
1641
5
1641
1641
5
1641
1641
5
1641
1708
5
1641
1781
5
1641
1860
5
1641
2299
5
1641
123
6
1641
196
6
1641
919
6
1641
990
6
1641
1007
6
1641
1046
6
1641
1131
6
1641
1139
6
1641
1140
6
1641
1149
6
1641
1198
6
1641
1215
6
1641
1223
6
1641
1265
6
1641
1303
6
1641
1323
6
1641
1358
6
1641
1366
6
1641
1366
6
1641
1389
6
1641
1421
6
1641
1421
6
1641
1460
6
1641
1462
6
1641
1463
6
1641
1467
6
1641
1468
6
1641
1477
6
1641
1491
6
1641
1496
6
1641
1496
6
1641
1502
6
1641
1531
6
1641
1535
6
1641
1565
6
1641
1601
6
1641
1602
6
1641
1613
6
1641
1614
6
1641
1626
6
1641
1626
6
1641
1626
6
1641
1641
6
1641
1641
6
1641
1641
6
1641
1641
6
1641
1641
6
1641
1785
6
1641
1786
6
1641
1787
6
1641
1788
6
1641
205
6
1641
224
6
1641
249
6
1641
288
6
1641
316
6
1641
378
6
1641
381
6
1641
398
6
1641
11
6
1641
404
6
1641
410
6
1641
463
6
1641
464
6
1641
483
6
1641
3184
6
1641
3184
6
1641
3188
6
1641
584
6
1641
600
6
1641
680
6
1641
691
6
1641
763
6
1641
799
6
1641
.i
1642
.t
time
sharing
on
a
computer
with
a
small
memory
.w
techniques
to
make
time
sharing
attractive
on
a
computer
with
a
small
central
memory
are
presented.
"small"
is
taken
to
mean
that
only
one
user
program
plus
a
monitor
will
fit
into
the
memory
at
any
time.
the
techniques
depend
on
having
two
levels
of
secondary
storage:
level
1,
several
times
larger
than
the
main
memory
and
quite
fast;
and
level
2,
many
times
larger
and
slower
than
level
1.
.b
cacm
february,
1967
.a
fisher,
r.
o.
shepard,
c.
d.
.n
ca670201
jb
february
28,
1978
4:10
pm
.x
1642
5
1642
1642
5
1642
1642
5
1642
.i
1643
.t
an
improvement
to
iterative
methods
of
polynomial
factorization
.w
methods
of
polynomial
factorization
which
find
the
zeros
one
at
a
time
require
the
division
of
the
polynomial
by
the
accepted
factor.
it
is
shown
how
the
accuracy
of
this
division
may
be
increased
by
dividing
in
order
of
both
ascending
and
descending
powers
of
the
variable
and
choosing
a
crossover
point
which
minimizes
a
very
simply
calculated
error
criterion.
.b
cacm
january,
1967
.a
bingham,
j.
a.
c.
.n
ca670112
jb
february
28,
1978
4:20
pm
.x
1643
5
1643
1643
5
1643
1643
5
1643
.i
1644
.t
on
the
computation
of
least
squares
polynomials
.w
rounding
error
accumulated
during
digital
computation
of
a
least
squares
polynomial
makes
the
computed
polynomial
only
an
approximation
to
the
true
least
square
polynomial.
a
simple
method
for
adjust
ing
the
constant
term
of
the
computed
polynomial
to
get
a
better
approximation
to
the
true
least
squares
polynomial
is
described.
.b
cacm
january,
1967
.a
goldberg,
m.
.n
ca670111
jb
february
28,
1978
4:24
pm
.x
1644
5
1644
1644
5
1644
1644
5
1644
.i
1645
.t
a
note
on
computing
approximations
to
the
exponential
function
.w
two
methods
are
discussed
which
result
in
near
minimax
rational
approximations
to
the
exponential
function
and
at
the
same
time
retain
the
desirable
property
that
the
approximation
for
negative
values
of
the
argument
is
the
reciprocal
of
the
approximation
for
corresponding
positive
values.
these
methods
lead
to
approximations
which
are
much
superior
to
the
commonly
used
convergents
of
the
gaussian
continued
fraction
for
the
exponential.
coefficients
and
errors
are
given
for
the
intervals
[-.5*ln
2,
.5*ln
2]
and
[-ln
2,
ln
2].
.b
cacm
january,
1967
.a
cody,
w.
j.
ralston,
a.
.n
ca670110jb
february
28,
1978
4:25
pm
.x
1015
4
1645
1346
4
1645
1440
4
1645
1645
4
1645
951
4
1645
1645
5
1645
1645
5
1645
1645
5
1645
532
5
1645
.i
1646
.t
ditran-a
compiler
emphasizing
diagnostics
.w
ditran
(diagnostic
fortran)
is
an
implementation
of
asa
basic
fortran
with
rather
extensive
error
checking
capabilities
both
at
compilation
time
and
during
execution
of
a
program.
the
need
for
improved
diagnostic
capabilities
and
some
objectives
to
be
met
by
any
compiler
are
discussed.
attention
is
given
to
the
design
and
implementation
of
ditran
and
the
particular
techniques
employed
to
provide
the
diagnostic
features.
the
handling
of
error
messages
by
a
general
macro
approach
is
described.
special
features
which
provide
teaching
aids
for
use
by
instructors
are
noted.
.b
cacm
january,
1967
.a
moulton,
p.
g.
muller,
m.
e.
.n
ca670109
jb
february
28,
1978
4:30
pm
.x
1179
4
1646
1225
4
1646
1288
4
1646
1350
4
1646
1544
4
1646
1613
4
1646
1646
4
1646
1646
4
1646
1646
4
1646
1646
4
1646
1646
4
1646
1646
4
1646
1647
4
1646
1728
4
1646
1781
4
1646
1900
4
1646
1945
4
1646
1955
4
1646
2025
4
1646
2111
4
1646
2154
4
1646
2365
4
1646
2506
4
1646
2534
4
1646
2556
4
1646
2650
4
1646
2650
4
1646
2698
4
1646
2708
4
1646
3060
4
1646
3093
4
1646
987
5
1646
1072
5
1646
1179
5
1646
1646
5
1646
1646
5
1646
1646
5
1646
1647
5
1646
2887
5
1646
680
5
1646
830
5
1646
1646
6
1646
2111
6
1646
.i
1647
.t
watfor-the
university
of
waterloo
fortran
iv
compiler
.w
watfor
is
an
in-core,
load-and-go
compiler
which
has
been
implemented
within
the
ibm
7040/44
operating
system.
fortran
iv
was
selected
as
the
source
language
in
order
to
achieve
maximum
language
compatibility
with
other
available
compiling
systems,
in
particular
the
ibm
7040/44
fortran
iv
system.
the
principal
advantage
of
the
watfor
compiler
is
that
it
translates
fortran
iv
programs
at
speeds
of
up
to
100
statements
per
second.
since
the
compiler
resides
core
there
is
virtually
no
system
overhead,
and
hence
large
batches
of
"student"
programs
may
be
processed
very
efficiently.
the
compiler
also
provides
extensive
error
diagnostics,
during
both
the
compilation
and
the
execution
phases
of
a
program
run.
this
feature
makes
the
system
attractive
to
both
learners
and
learned
users
alike.
.b
cacm
january,
1967
.a
shantz,
p.
w.
german,
r.
a.
mitchell,
j.
g.
.n
ca670108
jb
february
28,
1978
4:36
pm
.x
267
4
1647
1139
4
1647
1141
4
1647
1215
4
1647
1223
4
1647
1646
4
1647
1647
4
1647
1647
4
1647
1781
4
1647
1787
4
1647
1792
4
1647
364
4
1647
405
4
1647
438
4
1647
763
4
1647
1179
5
1647
224
5
1647
1646
5
1647
1647
5
1647
1647
5
1647
1647
5
1647
1728
5
1647
830
6
1647
987
6
1647
1072
6
1647
1179
6
1647
1525
6
1647
1647
6
1647
1647
6
1647
1785
6
1647
680
6
1647
.i
1648
.t
uniform
random
(algorithm
294
[g5])
.b
cacm
january,
1967
.a
strome,
w.
m.
.n
ca670107
jb
february
28,
1978
4:37
pm
.x
1648
5
1648
1648
5
1648
1648
5
1648
1663
5
1648
2349
5
1648
1190
6
1648
1648
6
1648
1648
6
1648
1716
6
1648
1794
6
1648
1894
6
1648
2043
6
1648
501
6
1648
613
6
1648
774
6
1648
.i
1649
.t
data
directed
input-output
in
fortran
.w
a
statement
which
is
similar
to
the
namelist
statement
of
fortran
iv
has
been
incorporated
in
the
fortran
63
compiler.
the
fortran
63
implementation
allows
a
greater
flexibility
and
simplicity
than
the
fortran
iv
feature.
the
hollerith
names,
the
location,
the
mode
and
the
dimensions
of
a
variable
can
be
discovered
by
means
of
standard
fortran
statements.
methods
of
using
this
information
are
illustrated
in
relation
to
general
purpose
data
directed
input
and
output
routines;
some
other
uses
such
as
matrix
manipulation
are
discussed.
.b
cacm
january,
1967
.a
hassitt,
a.
.n
ca670106
jb
february
28,
1978
4:41
pm
.x
1649
4
1649
1053
5
1649
1649
5
1649
1649
5
1649
1649
5
1649
.i
1650
.t
a
unifying
computational
method
for
the
analysis
of
complete
factorial
experiments
.w
a
computational
method
which
may
be
used
for
the
calculation
of
sums
of
squares
in
the
analysis
of
variance
of
complete
factorial
experiments
and
in
the
computation
of
main
effect
or
interaction
means
is
described.
the
method
is
elucidated
as
unifying
since
one
method
can
be
used
for
a
variety
of
purposes
each
previously
requiring
different
methods.
the
programming
advantages
of
such
a
method
are
obvious.
the
following
variants
are
discussed:
(1)
the
standard
analysis
of
variance;
(2)
analyses
omitting
certain
levels
of
one
or
more
factors;
(3)
separate
analyses
for
some
levels
of
a
factor
or
for
combinations
of
levels
of
more
than
one
factor.
these
are
performed
simultaneously;
(4)
the
calculation
of
main
effect
or
interaction
means.
the
mean
expects
the
data
in
standard
order
and
it
leaves
the
data
in
that
order
so
that
many
analyses
of
the
same
data
can
be
performed
without
rearrangement.
the
total
sum
of
squares,
excluding
a
replication
sum
of
squares,
is
partitioned
into
all
polynomial
partitions
and
their
interactions
each
with
one
degree
of
freedom.
this
is
so
even
if
factors
have
unequally
spaced
factor
levels.
.b
cacm
january,
1967
.a
cooper,
b.
e.
.n
ca670105
jb
february
28,
1978
4:49
pm
.x
1650
5
1650
1650
5
1650
1650
5
1650
.i
1651
.t
an
interpretive
input
routine
for
linear
programming
.w
in
this
descriptive
article
an
input
code
is
presented
which
greatly
simplifies
data
input
to
any
linear
programming
solution
routine,
for
subsequent
use
either
as
a
pedagogical
device
or
for
solving
rather
small
lp
problems.
this
latter
(limited)
use
derives
not
at
all
from
inherent
limitations
in
the
code
itself,
but
from
an
efficiency
evaluation:
large
lp
problems
would
doubtless
benefit
from
an
input
system
more
suited
for
bulk
data
handling
than
the
input
code
described.
from
a
user's
standpoint,
input
appears
almost
exactly
as
a
textbook
presentation
of
the
lp
problem
(limited
only
by
a
keypunch's
inability
to
write
subscripts,
etc.).
the
input
interpreter
scans
column
wise,
thus
no
fixed
format
data
preparation
is
required.
the
user
may
also,
under
very
general
requirements
only,
liberally
use
editorial
comments
throughout
the
input
deck
as
an
aid
in
identification,
e.g.,
of
row
constraints.
the
article
includes
examples
of
input,
output
from
a
solution
routine
presently
in
use,
and
a
skeleton
flowchart
of
the
input
interpreter.
.b
cacm
january,
1967
.a
aigner,
d.
j.
.n
ca670104
jb
march
1,
1978
8:58
am
.x
1651
5
1651
1651
5
1651
1651
5
1651
.i
1652
.t
a
code
for
non-numeric
information
processing
applications
in
online
systems
.w
a
code
has
been
specifically
designed
to
simplify
the
internal
information
processing
operations
within
an
online
computer
system
with
respect
to
non-numeric
applications,
and
to
maximize
the
transfer
rate
of
the
information
channel
linking
the
system
and
the
system
user.
the
code
has
direct
application
to
problems
in
area
such
as
information
retrieval,
document
classification,
computer-aided
teaching
and
text
editing.
this
code,
called
ipc
(information
processing
code),
is
an
8-bit
code
set
constructed
so
that
7,
6,
5
and
4-bit
subsets
can
be
easily
derived
from
the
basic
set.
the
code
set
is
organized
so
that
simple
binary
operations
can
distinguish
between
the
numeric
alphabetic,
special
symbol
and
control
character
codes.
the
number
of
usable
characters
within
the
basic
set
size
may
be
expanded
either
by
use
of
escape
codes
included
in
the
set,
or
by
suitable
interpretation
of
otherwise
unassigned
codes
on
the
basis
of
the
requirements
of
local
environments.
.b
cacm
january,
1967
.a
morenoff,
e.
mclean,
j.
b.
.n
ca670103
jb
march
1,
1978
9:05
am
.x
1652
5
1652
1652
5
1652
1652
5
1652
.i
1653
.t
system
performance
evaluation:
survey
and
appraisal
.w
the
state
of
the
art
of
system
performance
evaluation
is
reviewed
and
evaluation
goals
and
problems
are
examined.
throughput,
turnaround,
and
availability
are
defined
as
fundamental
measures
of
performance;
overhead
and
cpu
speed
are
placed
in
perspective.
the
appropriateness
of
instruction
mixes,
kernels,
simulators,
and
other
tools
is
discussed,
as
well
as
pitfalls
which
may
be
encountered
when
using
them.
analysis,
simulation,
and
synthesis
are
presented
as
three
levels
of
approach
to
evaluation,
requiring
successively
greater
amounts
of
information.
the
central
role
of
measurement
in
performance
evaluation
and
in
the
development
of
evaluation
methods
is
explored.
.b
cacm
january,
1967
.a
calingaert,
p.
.n
ca670102
jb
march
1,
1978
9:10
am
.x
1653
4
1653
1653
4
1653
1653
4
1653
2387
4
1653
2852
4
1653
2989
4
1653
963
5
1653
1069
5
1653
1417
5
1653
1653
5
1653
1653
5
1653
1653
5
1653
2151
5
1653
2318
5
1653
1653
6
1653
1653
6
1653
1747
6
1653
1860
6
1653
.i
1654
.t
a
university's
educational
program
in
computer
science
.w
after
a
review
of
the
power
of
contemporary
computers,
computer
science
is
defined
in
several
ways.
the
objectives
of
computer
science
education
are
stated,
and
it
is
asserted
that
in
a
north
american
university
these
will
be
achieved
only
through
a
computer
science
department.
the
program
at
stanford
university
is
reviewed
as
an
example.
the
appendices
include
syllabic
of
ph.d.
qualifying
examinations
for
stanford's
computer
science
department.
.b
cacm
january,
1967
.a
forsythe,
g.
e.
.n
ca670101
jb
march
1,
1978
9:13
am
.x
1413
4
1654
1654
4
1654
1771
4
1654
2478
4
1654
1205
5
1654
1654
5
1654
1654
5
1654
1654
5
1654
1720
5
1654
1771
5
1654
1205
6
1654
1654
6
1654
1654
6
1654
1771
6
1654
.i
1655
.t
code
extension
procedures
for
information
interchange*
(proposed
usa
standard)
.b
cacm
december,
1968
harrison,
m.
c.
gue,
r.
l.
liggett,
j.
c.
cain,
k.
c.
kuno,
s.
oettinger,
a.
g.
kolbig,
k.
s.
grad,
j.
brebner,
m.
a.
snow,
r.
h.
howard,
j.
c.
tashjian,
h.
johnson,
w.
l.
porter,
j.
h.
ackley,
s.
i.
ross,
d.
t.
byrne,
j.
l.
proll,
l.
g.
noltemeier,
a.
singleton,
r.
c.
singleton,
r.
c.
borrow,
d.
g.
fraser,
j.
b.
rabinowitz,
p.
greenspan,
d.
marsaglia,
g.
bray,
t.
a.
korfhage,
r.
r.
mendicino,
s.
f.
martin,
j.
t.
ranelletti,
j.
e.
zwakenberg,
r.
g.
jodeit,
j.
g.
mcnaughton,
r.
bergland,
g.
d.
engvold,
k.
j.
hughes,
j.
l.
rubinoff,
m.
bergman,
s.
cautin,
h.
rapp,
f.
braden,
h.
v.
wulf,
w.
a.
martin,
d.
f.
king,
p.
j.
h.
schurmann,
a.
lesem,
l.
b.
hirsch,
p.
m.
bray,
t.
a.
witzgall,
c.
henderson,
j.
h.
pankiewicz,
w.
bray,
t.
a.
witzgall,
c.
whittlesey,
j.
r.
stewart
iii,
g.w.
lick,
d.
w.
garwick,
j.
v.
miller,
g.
d.
dill,
j.
c.
randall,
d.
l.
richer,
i.
fox,
b.
l.
landi,
d.
m.
hayashl,
h.
duncan,
s.
kuno,
s.
denning,
p.
j.
rubinoff,
m.
bergman,
s.
franks,
w.
rubinoff,
e.r.
hutton,
f.
c.
steel
jr.,
t.
b.
.n
ca680812
jb
february
22,
1978
9:42
am
.x
1702
5
1702
1702
5
1702
1702
5
1702
.i
1703
.t
accommodating
standards
and
identification
of
programming
languages
.w
the
user
public
wants
standardization
and
reliable
identification
of
programming
languages
and
related
services.
one
way
of
achieving
these
goals
illustrated
by
the
methods
adopted
for
trac
t-64
interactive
language,
and
its
related
family
of
languages.
oppressive
rigidity
usually
associated
with
standardization
is
avoided
by
a
new
accommodation
technique
accessible
to
the
user
to
allow
local
variations
with
the
language.
explicit
standardization
of
the
language
is
undertaken
at
the
organizational
source
of
the
language.
use
of
the
organizational
trademark
(trac)
on
the
published
standards,
and
services
relying
upon
them,
provides
a
reliable
public
identification.
these
methods
can
be
usefully
applied
to
other
programming
languages
and
computer
services.
.b
cacm
august,
1968
.a
mooers,
c.
n.
muth,
j.
f.
de
vogelaere,
r.
storm,
e.
f.
hall,
c.
a.
porsching,
t.
a.
borrow,
d.
g.
murphy,
d.
l.
breaux,
h.
j.
lang,
c.
a.
gray,
j.
c.
banzhaf
iii,
j.
f.
lockemann,
p.
c.
knutsen,
w.
d.
stevens,
d.
f.
maclaren,
m.
d.
de
vogelaere,
r.
bell,
j.
r.
dietmeyer,
d.
l.
duley,
j.
r.
ehrman,
j.
r.
stimler,
s.
brons,
k.
a.
elliott,
r.
w.
kuiken,
h.
k.
mcwilliams,
g.
v.
thompson,
r.
w.
fisher,
a.
c.
liebman,
j.
s.
nemhauser,
g.
l.
bayes,
a.
wolinsky,
a.
nagy,
g.
kral,
j.
coffman,
e.
g.
varian,
l.
c.
salazar,
r.
c.
sen,
s.k.
witte,
b.
f.
w.
gautschi,
w.
oliver,i.
fenichel,
r.
r.
bartels,
r.
h.
goulub,
h.
g.
sutherland,
i.
e.
unger,
s.
h.
.n
ca680608
jb
february
22,
1978
4:08
pm
.x
1737
5
1737
1737
5
1737
1737
5
1737
.i
1738
.t
writing
an
outline
debugging
program
for
the
experienced
user
.w
presently
available
online
debugging
routines
are
often
unsatisfactory
for
the
experienced
user
because
they
require
unnecessarily
rigid
and
complicated
typing
formats,
make
it
difficult
for
the
user
to
correct
typing
errors,
and
consume
excessive
memory
with
intricate
features.
in
a
debugging
program
it
is
of
prime
importance
that
the
program
be
simple,
flexible,
and
highly
efficient
to
use.
communication
between
the
user
and
the
debugging
program
can
be
improved
by
using
certain
techniques
applicable
to
most
online
debugging
programs.
these
techniques
are
presented
and
are
illustrated
by
their
use
in
opak
(octal
package),
a
debugging
program
coded
for
the
pdp-5/8
and
the
sds-930.
the
compromise
between
economy
of
utility
program
core
storage
and
incorporation
of
elegant
debugging
features
is
discussed.
.b
cacm
june,
1968
.a
brady,
p.
t.
thompson,
k.
anderson,
g.
b.
rogers,
d.
w.
ophir,
d.
rankowitz,
s.
shepherd,
b.
j.
spinrad,
r.
j.
myer,
t.
h.
lynch,
w.
c.
bartels,
r.
h.
golub,
g.
h.
dennis,
j.
b.
graham,
r.m.
van
horn,
e.
c.
lampson,
b.
w.
dijkstra,
e.
w.
fuchel,
k.
heller,
s.
denning,
p.
j.
oppenheimer,
g.
weizer,
n.
daley,
r.
c.
dennis,
j.
b.
randell,
b.
kuehner,
c.
j.
acm
special
interest
committee
.n
ca680501
jb
february
23,
1978
9:56
am
.x
1755
5
1755
1755
5
1755
1755
5
1755
.i
1756
.t
hollerith
punched
card
code*
(proposed
usa
standard)
.b
cacm
april,
1968
mckay,
s.
bayer,
g.
bergson,
a.
o'brien,
w.
m.
wood,
j.
kolbig,
k.
s.
nonweiler,
t.
f.
organick,
e.
i.
hamblen,
j.
w.
bellman,
r.
e.
kagiwada,
h.
h.
kalaba,
r.
e.
vasudenvan,
r.
kulsrud,
h.
e.
unger,
s.
h.
harder,
e.
l.
parker,
d.
b.
pankhurst,
r.
j.
zielke,
g.
bayer,
g.
ord-smith,
r.
j.
dorrer,
e.
morris,
j.
hunter,
d.
b.
feldman,
j.
gries,
d.
meisel,
w.
s.
matula,
d.
w.
rabinowitz,
p.
morris,
r.
maurer,
w.
d.
gries,
d.
halpern,
m.
j.
hoare,
m.
r.
.n
ca680104
jb
february
23,
1978
2:45
pm
.x
1789
5
1789
1789
5
1789
1789
5
1789
.i
1790
.t
muller's
method
for
finding
roots
of
an
arbitrary
function
(algorithm
196
[c5])
.b
cacm
january,
1968
.a
whitley,
v.
w.
green,
d.
r.
sackman,
h.
erikson,
w.
j.
grant,
e.
e.
seraphin,
d.
s.
fateman,
r.
j.
proll,
l.
g.
kolbig,
k.
s.
bray,
t.
a.
parsons,
r.
g.
claringbold,
p.
j.
claringbold,
p.
j.
bach,
h.
herriot,
r.
g.
lasser,
d.
j.
bach,
h.
busam,
v.
a.
england,
d.
e.
van
tassel,
d.
parter,
s.
v.
sayre,
d.
rosenfeld,
j.
l.
grosenbaugh,
l.
r.
ord-smith,
r.
j.
smith,
l.
b.
tomlin,
f.
k.
smith,
l.
b.
watson,
w.
t.
hall,
g.
ray,
v.
a.
cobb,
s.
m.
gautschi,
w.
robson,
j.
m.
shriver,
b.
eberlein,
p.
j.
dixon,
r.
d.
dial,
r.
b.
howell,
j.
r.
balzer,
r.
m.
farber,
d.
j.
korenjak,
a.
j.
fenichel,
r.
r.
yochelson,
j.
c.
pinkerton,
t.
b.
shoshani,
a.
bernstein,
a.
j.
bond,
a.
h.
rightnour,
j.
bayes,
a.
j.
stanfel,
l.
e.
dunham,
c.
b.
herriot,
j.
g.
hoare,
c.
a.
r.
dewar,
r.
b.
k.
hochsprung,
r.
r.
bell,
j.
r.
singleton,
r.
c.
adams,
a.
g.
businger,
p.
a.
goulub,
g.
h.
singleton,
r.
c.
singleton,
r.
c.
simoes,
j.
m.
s.
brown,
w.
s.
richman,
p.
l.
baskin,
h.
b.
horowitz,
e.
b.
tennison,
r.
d.
rittenhouse,
l.
e.
lanzano,
b.
c.
parnas,
d.
l.
paton,
k.
silverman,
g.
hamilton,
p.
a.
boothroyd,
j.
leitch,
i.
m.
mcilroy,
m.
d.
orgass,
r.
j.
waite,
w.
m.
hansen,
w.
j.
wirth,
n.
dewar,
h.
bratley,
p.
quillian,
m.
r.
chase,
s.
m.
fosdick,
l.
d.
chase,
s.
m.
fosdick,
l.
d.
hall,
c.
a.
feldman,
j.
a.
arden,
b.
w.
galler,
b.
a.
graham,
r.
m.
finerman,
a.
messham,
d.
k.
boothroyd,
j.
sauer,
g.
clemm,
d.
s.
hooker,
w.
w.
kennedy,
m.
kain,
r.
y.
donnelly,
t.
cottafava,
g.
lemoli,
g.
salzer,
h.
e.
.n
ca690708
jb
february
17,
1978
9:01
am
.x
1872
5
1872
1872
5
1872
1872
5
1872
2394
5
1872
1872
6
1872
1903
6
1872
.i
1873
.t
accelerating
lp
algorithms
.w
it
is
shown
how
a
novel
method
for
computing
(related)
inner
products
can
accelerate
the
pricing
phase
of
lp
algorithms.
other
lp
applications
are
indicated.
.b
cacm
july,
1969
.a
fox,
b.
l.
hemmerle,
w.
j.
amos,
d.
e.
slater,
m.
l.
schneider,
a.
j.
habermann,
a.
n.
weizenbaum,
j.
randell,
b.
golub,
g.
h.
macleod,
i.
d.
g.
duke,
b.
j.
fair
weather,
g.
belady,
l.
a.
nelson,
r.
a.
shedler,
g.
s.
friedman,
j.
breuer,
m.
a.
sweet,
r.
a.
blue,
j.
l.
parker
jr.,
l.
t.
gallie,
t.
m.
brooks
jr.,
f.
p.
ferrel,
j.
k.
sakai,
t.
nagao,
m.
ophir,
d.
shepherd,
b.
j.
spinrad,
r.
j.
wallace,
v.
l.
mason,
d.
l.
noltemeier,
a.
knop,
r.
hill,
i.
d.
gautschi,
w.
kolbig,
k.
s.
kolbig,
k.
s.
bartels,
r.
h.
golub,
g.
h.
belady,
l.
a.
kuehner,
c.
j.
hext,
j.
b.
winings,
j.
w.
salzer,
h.
e.
rabinowitz,
p.
bartels,
r.
h.
goulub,
g.
h.
lass,
s.e.
bartlett,
k.
a.
scantlebury,
r.
a.
gold,
m.
m.
stroud,
a.
h.
kohli,
j.
p.
rose,
d.
j.
petrick,
s.
r.
postal,
p.
m.
rosenbaum,
p.
s.
katz,
j.
h.
schwachheim,
g.
klimpel,
r.
r.
galimberti,
r.
montanari,
u.
lowe,
t.
c.
singleton,
r.
c.
gray,
m.
.n
ca690309
jb
february
20,
1978
8:46
am
.x
1918
5
1918
1918
5
1918
1918
5
1918
.i
1919
.t
an
efficient
algorithm
for
sorting
with
minimal
storage
(algorithm
347
[m1])
.b
cacm
march,
1969
.a
singleton,
r.
c.
morris,
j.
singleton,
r.
c.
rosin,
r.
f.
mckellar,
a.
c.
coffman
jr.,
e.
g.
morse,
s.
p.
berns,
g.
m.
salton,
g.
ulrich,
e.
g.
schroeder,
m.
r.
kruskal,
j.
b.
smith,
l.
b.
king,
r.
f.
phillips,
d.
l.
payne,
w.
h.
rabung,
j.
r.
bogyo,
t.
p.
redziejowski,
r.
r.
arora,
s.
r.
dent,
w.
t.
patt,
y.
n.
day,
r.
h.
mansfield,
m.
k.
ellis,
m.
e.
stimler,
s.
friedman,
j.
smith,
o.
k.
field,
j.
b.
f.
vandergraft,
j.
mesztenyi,
c.
farkas,
i.
levine,
d.
a.
arden,
b.
w.
ku,
s.
y.
adler,
r.
j.
lowry,
e.
s.
medlock,
c.
w.
cannon,
j.
j.
wagner,
r.
a.
raduchel,
w.
j.
fuchs,
e.
jackson,
p.
e.
redish,
k.
a.
stewart,
g.
w.
sale,
a.
h.
j.
black,
n.
a.
shapiro,
s.
c.
thompson,
r.
j.
morgan,
h.
l.
betourne,
c.
boulenger,
j.
ferrie,
j.
kaiser,
c.
krakowiak,
s.
mossiere,
j.
tiernan,
j.
c.
mathews,
m.
v.
moore,
f.
r.
rokne,
j.
bernstein,
a.
ehrman,
j.
r.
wilson,
w.
j.
bratley,
p.
knight,
w.
mersereau,
w.
van
emden,
m.
h.
cheney,
c.
j.
bell,
j.
r.
kaman,
c.
h.
conrow,
k.
smith,
r.
g.
mifsud,
c.
j.
lum,
v.
y.
lafata,
p.
rosen,
j.
b.
smith,
l.
b.
stehfest,
h.
peto,
r.
holmgren,
b.
wallick,
g.
c.
seppanen,
j.
j.
stone,
r.
a.
chang,
s.
k.
gill,
a.
hill,
g.
w.
hill,
g.
w.
earley,
j.
woods,
w.
a.
dunham,
c.
b.
bavel,
z.
lamport,
l.
cody,
w.
j.
paciorek,
k.
a.
dial,
r.
b.
abdali,
s.
k.
smith,
r.
r.
mccall,
d.
van
emden,
m.
h.
ehrlich,
l.
w.
wilson,
m.
w.
kimble,
g.
w.
moler,
c.
b.
solomon,
l.
p.
hirschsoln,
i.
bracchi,
g.
somalvico,
m.
bouknight,
w.
j.
kerpelman,
c.
wise
jr.,
w.
r.
proll,
l.
g.
mckay,
j.
hubner,
h.
hubner,
h.
hubner,
h.
fielding,
k.
ichbiah,
j.
d.
morse,
s.
p.
gintell,
j.
w.
saltzer,
j.
h.
brawn,
b.
s.
gustavson,
g.
mankin,
e.
s.
day,
a.
c.
nagy,
g.
tuong,
n.
nielsen,
n.
r.
hunt,
b.r.
pomeranz,j.
e.
baecker,
h.
d.
sattley,
k.
millstein,
r.
sale,
a.
h.
j.
ng,
e.
w.
.n
ca700711
jb
february
10,
1978
4:27
pm
.x
2026
5
2026
2026
5
2026
2026
5
2026
.i
2027
.t
ricatti-bessel
functions
of
first
and
second
kind
(algorithm
22
$s17))
.b
cacm
july,
1970
.a
bray,
t.
bradley,
g.
h.
paciorek,
k.
a.
woods,
w.
a.
bradley,
g.
h.
coffman
jr.,
e.
g.
eve,
j.
bloom,
b.
h.
waite,
w.
m.
wilkes,
m.
a.
grant,
c.
a.
chase,
p.
j.
chase,
p.
j.
shriver,
b.
eberlein,
p.
j.
dixon,
r.
d.
wallick,
g.
c.
chandler,
j.
p.
harrison,
w.
c.
london,
r.
l.
stewart,
g.
w.
chase,
p.
j.
chase,
p.
j.
codd,
e.
f.
stewart,
g.
w.
hillstrom,
k.
e.
linz,
p.
damerau,
f.
j.
frantz,
d.
g.
grimes,
j.
e.
muthukrishnan,
c.
r.
rajaraman,
v.
elder,
h.
a.
lachenmaier,
r.
proll,
l.
g.
knop,
r.
e.
laflin,
s.
brebner,
m.
a.
crespi-reghizzi,
s.
morpurgo,
r.
reynolds,
j.
c.
loeckx,
j.
sasser,
w.
e.
burdick,
d.
s.
graham,
d.
a.
naylor,
t.
h.
vere,
s.
.n
ca700503
jb
february
13,
1978
2:12
pm
.x
2063
5
2063
2063
5
2063
2063
5
2063
.i
2064
.t
operations
on
generalized
arrays
with
the
genie
compiler
.w
operations
on
vectors,
matrices,
and
higher
dimensional
storage
arrays
are
standard
features
of
most
compilers
today.
the
elements
of
such
structures
are
usually
restricted
to
be
scalars.
for
many
sophisticated
applications
this
restriction
can
impose
cumbersome
data
representations.
an
efficient
system
has
been
devised
and
implemented
which
allows
the
elements
of
multidimensional
arrays
to
themselves
be
multidimensional
arrays.
this
system
was
developed
from
a
storage
structure
in
which
the
location,
length,
and
content
of
each
array
is
described
by
a
codeword
which
can
be
interpreted
by
the
system.
code
words
may
describe
arrays
containing
more
codewords,
thus
providing
all
needed
descriptive
information
for
hyperstructures
of
any
form.
.b
cacm
may,
1970
.a
sitton,
g.
a.
hodes,
l.
knight,
k.
r.
devries,
r.
c.
smith,
j.
l.
heess
jr.,
w.
f.
hsiao,
d.
harary,
f.
.n
ca700414
jb
february
13,
1978
2:37
pm
.x
2070
5
2070
2070
5
2070
2070
5
2070
.i
2071
.t
filon
quadrature
(algorithm
353
$d1))
.b
cacm
april,
1970
.a
fosdick,
l.
d.
einarsson,
bo
cook,
n.
d.
guignard,
m.
m.
lyness,
j.
n.
pankiewicz,
w.
nilson,
e.
n.
pomeranz,
j.
e.
weil
jr.,
r.
l.
eastman,
c.
m.
wirth,
n.
.n
ca700405
jb
february
13,
1978
3:05
pm
.x
2079
5
2079
2079
5
2079
2079
5
2079
.i
2080
.t
the
nucleus
of
a
multiprogramming
system
.w
this
paper
describes
the
philosophy
and
structure
of
a
multiprogramming
system
that
can
be
extended
with
a
hierarchy
of
operating
systems
to
suit
diverse
requirements
of
program
scheduling
and
resource
allocation.
the
system
nucleus
simulates
an
environment
in
which
program
execution
and
input/output
are
handled
uniformly
as
parallel,
cooperating
process
es.
a
fundamental
set
of
primitives
allows
the
dynamic
creation
and
control
of
a
hierarchy
of
processes
as
well
as
the
communication
among
them.
.b
cacm
april,
1970
.a
hansen,
p.
b.
bayer,
r.
witzgall,
c.
mills,
h.
d.
desalvio,
a.
j.
purdy,
j.
g.
rau,
j.
maurer,
h.
a.
dempster,
j.
r.
h.
kailas,
m.
v.
pager,
d.
bray,
t.
a.
witzgall,
c.
rapp,
d.
g.
scott,
l.
d.
levine,
m.
j.
cardenas,
a.
f.
karplus,
w.
j.
schwarcz,
r.
m.
burger,
j.
f.
simmons,
r.
f.
schweikert,
d.
g.
watson,
g.
a.
batson,
a.
ju,
s.
wood,
d.
c.
slagle,
j.
r.
dixon,
j.
k.
fenichel,
r.
r.
weizenbaum,
j.
yochelson,
j.
c.
hill,
g.
w.
loughhead,
m.
knoble,
h.
d.
barrodale,
i.
spath,
h.
spath,
h.
white,
j.
s.
white,
j.
s.
robins,
m.
f.
beyer,
j.
d.
ness,
d.
n.
green,
r.
s.
martin,
w.
a.
moulton,
g.
a.
bell,
j.
r.
jones,
b.
radke,
c.
e.
earley,
j.
morgan,
h.
l.
vere,
s.
von
glasersfeld,
e.
hsiao,
d.
payne,
w.
h.
griffin,
r.
redish,
k.
a.
gautschi,
w.
klein,
b.
j.
dunham,
k.
b.
mckay,
j.
k.
s.
butler,
e.
l.
schaffer,
h.
e.
stehfest,
h.
montanari,
u.
irons,
e.
t.
simmons,
r.
f.
mullery,
a.
p.
driscoll,
g.
c.
gautschi,
w.
lowe,
t.
c.
gustafson,
s.
gustafson,
s.
bourgeois,
f.
lassalle,
j.
c.
bourgeois,
f.
lassalle,
j.
gustafson,
s.
blumberg,
j.
w.
foulk,
c.
r.
rochfeld,
a.
wulf,
w.
a.
russell,
d.
b.
harrison,
m.
c.
mullin,
j.
k.
amidon,
e.
l.
akin,
g.
s.
gordon,r.
herman,
g.
t.
bolub,
g.
h.
smith,
l.
b.
malcolm,
m.
a.
aramaki,
i.
kawabata,
t.
kazuhiko,
a.
shell,
d.
l.
hamblen,
j.
w.
branquart,
p.
lewi,
j.
sintzoff,
m.
wodon,
p.
l.
lyness,
j.
n.
courois,
p.
j.
heymans,
f.
parnas,
d.
l.
nemeth,
a.
g.
rovner,
p.
d.
newman,
w.
m.
oldehoeft,
a.
e.
conte,
s.
d.
ansi
subcommittee
x3j3
earley,
j.
fenichel,
r.
r.
flores,
i.
madpis,
g.
liniger,
w.
phillips,
d.
l.
wong,
e.
chiang,
t.
c.
paton,
k.
.n
ca710903
jb
february
2,
1978
2:24
pm
.x
2161
5
2161
2161
5
2161
2161
5
2161
.i
2162
.t
an
efficient
bit
table
technique
for
dynamic
storage
allocation
of
2^n-word
blocks
.w
an
efficient
bit
table
technique
for
dynamic
storage
allocation
of
2^n-word
blocks,
which
requires
a
minimized
amount
of
memory
for
bookkeeping
purposes,
is
described.
the
technique
has
been
tested
in
an
implementation
of
the
list
processing
language
l^6.
a
number
of
ideas
incorporated
in
the
processor
are
also
described.
.b
cacm
september,
1971
.a
isoda,
s.
goto,
e.
teichroew,
d.
moses,
j.
barton,
d.
fitch,
j.
p.
jefferys,
w.
h.
moses,
j.
fenichel,
r.
r.
hall
jr.,
a.
d.
hearn,
a.
c.
raduchel,
w.
j.
cermak,
j.
mcvitie,
d.
g.
wilson,
l.
b.
mcvitie,
d.
g.
wilson,l.
b.
ramamoorthy,
c.
v.
gonzalez,
m.
j.
ferguson,
d.
e.
paton,
k.
pratt,
t.
w.
friedman,
d.
p.
deremer,
f.
l.
bernstein,
a.
j.
mckenney,
j.
l.
tonge,
f.
m.
zelkowitz,
m.
walker,
r.
j.
fraser,
a.
g.
glaswin,
h.
t.
bosarge
jr.,
w.
e.
johnson,
o.
g.
amarel,
s.
foley,
j.
d.
harada,
k.
house,
f.
r.
.n
ca710510
jb
february
3,
1978
1:57
pm
.x
2190
4
2190
2190
4
2190
1372
5
2190
1849
5
2190
2190
5
2190
2190
5
2190
2190
5
2190
.i
2191
.t
algorithm
410
partial
sorting
[m1]
.b
cacm
may,
1971
.a
chambers,
j.
m.
morris
jr.,
j.
h.
fenichel,
r.
r.
richards,
d.
l.
montanari,
u.
krolak,
p.
felts,
w.
marble,
g.
nielsen,
n.
r.
codasyl
systems
committee
mcnamee,
j.
m.
stein,
m.
l.
munro,
w.
d.
talbot,
p.
a.
carr
iii,
j.
w.
coulter
jr.,
r.
r.
hwang,
r.
c.
tucker,
a.
b.
flynn,
m.
j.
lum,
v.
y.
yuen,
p.
s.
t.
dodd,
m.
wirth,
n.
gear,
c.
w.
howell,
j.
gear,
c.
w.
williams,
j.
g.
winters,
w.
k.
manna,
z.
waldinger,
r.
j.
noll,
a.
m.
tolman,
h.
dell,
a.
m.
weil,
r.
l.
thompson,
g.
l.
rokne,
j.
lancaster,
p.
slagle,
j.
r.
lee,
r.
c.
t.
hurwitz
jr.,
h.
slagle,
j.
r.
farrell,
c.
d.
nielsen,
n.
r.
bernstein,
a.
j.
sharp,
j.
c.
shwayder,
k.
pollack,
s.
l.
redish,
k.
a.
kolm,
a.
dahlstrand,
t.
lucas
jr.,
c.
w.
terrill,
c.
w.
coleman,
m.
w.
taylor,
m.
s.
proll,
l.
g.
hoare,
c.
a.
r.
holt,
r.
c.
brucke,
r.
a.
bracchi,
g.
ferrari,
d.
chang,
s.
klinger,
a.
hammer,
c.
heiberger,
r.
m.
marshall,
d.
r.
t.
frisch,
m.
j.
schuegraf,
e.
.n
ca721218
dmm
february
2,
1978
1:39
pm
.x
2237
5
2237
2237
5
2237
2237
5
2237
.i
2238
.t
least
squares
surface
fit
(algorithm
r176)
.b
cacm
december,
1972
.a
schuegraf,
e.
.n
ca721217
jb
january
27,
1978
8:59
am
.x
2238
5
2238
2238
5
2238
2238
5
2238
.i
2239
.t
squank
(algorithm
c379)
.b
cacm
december,
1972
.a
hallet,
p.
mund,
e.
sullins,
w.
l.
boland,
w.
r.
boland,
w.
r.
boland,
w.
r.
boland,
w.
r.
sherman,
s.
baskett
iii,
f.
browne,
j.
c.
brown,
p.
j.
parnas,
d.
l.
moore,
j.
robinson,
p.
barr,
d.
r.
sezak,
n.
l.
ahrens,
j.
h.
dieter,
u.
.n
ca721205
jb
january
27,
1978
11:20
am
.x
2250
5
2250
2250
5
2250
2250
5
2250
.i
2251
.t
weighted
increment
linear
search
for
scatter
tables
.w
a
new
linear
search
for
hash
tables
whose
increment
step
is
a
function
of
the
key
being
addressed
is
presented.
comparisons
with
known
methods
are
given,
in
terms
of
efficiency
and
computation
complexity.
in
particular,
the
new
method
applies
to
tables
of
size
n
=
2^r.
it
allows
full
table
searching,
and
practically
eliminates
primary
clustering
at
a
very
low
cost.
.b
cacm
december,
1972
.a
luccio,
f.
earley,
j.
caizergues,
p.
bayer,
r.
witzgall,
c.
phillips,
j.
r.
adams,
h.
c.
smoliar,
s.
w.
eisenberg,
m.
a.
mcguire,
m.
r.
kennedy,
s.
lum,
v.
y.
yuen,
p.
s.
t.
fullerton,
w.
march,
d.
l.
ramberg,
j.
s.
schmeiser,
b.
w.
baecker,
h.
d.
verhelst,
m.
henderson,
p.
ledgard,
h.
f.
patrick,
m.
l.
malcolm,
m.
a.
fox,
p.
robertson,
j.
d.
akima,
h.
ershov,a.
p.
.n
ca721007
jb
january
27,
1978
2:51
pm
.x
2271
5
2271
2271
5
2271
2271
5
2271
.i
2272
.t
sorting
by
natural
selection
.w
a
family
of
sorting
algorithms
is
proposed,
the
members
of
which
make
fuller
use
of
the
memory
space
and
thus
yield
longer
sorted
strings.
extensive
simulation
results
are
presented,
and
various
implications
and
further
applications
are
discussed.
.b
cacm
october,
1972
.a
frazer,
w.
d.
wong,
c.
k.
dathe,
g.
simmons,
r.
slocum,
j.
hanson,
r.
j.
ahrens,
j.
h.
dieter,
u.
morris,
j.
b.
tan,
k.
c.
rubinstein,
r.
feldman,
j.
parnas,
d.
l.
habermann,
a.
n.
khalil,
h.
m.
gregory,
j.
deutsch,
e.
s.
bartels,
r.
h.
stewart,
g.
w.
ravindran,
a.
richman,
p.
l.
mor,
m.
lamdan,
t.
ghosh,
s.
p.
levitt,
k.
n.
kautz,
w.
h.
purdom
jr.,
p.
w.
moore,
e.
f.
squire,
w.
read,
r.
c.
jones,
p.
r.
morris
jr.,
j.
h.
van
der
poel,
w.
l.
bernstein,
h.
j.
oden,
p.
h.
shedler,
g.
s.
rosin,
r.
f.
frieder,
g.
eckhouse
jr.,
r.
h.
benjamin,
a.
j.
helbig,
r.
e.
orr,
p.
k.
roediger,
r.
r.
crowe,
d.
borodin,
a.
gotlieb,
c.
c.
alt,
f.
l.
sprague,
r.
e.
bauer,
f.
l.
wossner,
h.
knuth,
d.
e.
salton,
g.
sturman,
g.
m.
zinn,
k.
l.
sedelow,
s.
y.
benjamin,
r.
i.
rice,
j.
r.
bachman,
c.
w.
bobrow,
d.
g.
fosdick,
l.
d.
sammet,
j.
e.
rosen,
s.
kimbleton,
s.
r.
lynch,
w.
c.
hansen,
p.
b.
fraser,
a.
g.
foster,
c.
c.
moses,
j.
shanno,
d.
f.
weil,
r.
l.
traub,
j.
f.
manna,
z.
vuillemin,
j.
arbib,
m.
a.
koffman,
e.
b.
kandel,
a.
einarsson,
b.
johnson,
s.
c.
kernighan,
b.
w.
sale,
a.
h.
j.
schrack,
g.
f.
proll,
l.
g.
niessner,
h.
kolbig,
k.
s.
pohl,
i.
iguchi,
k.
o'reagan,
r.
t.
martin,
d.
f.
gimpel,
j.
f.
gilbert,
p.
chandler,
w.
j.
spacek,
t.
r.
blatny,
j.
clark,
s.
r.
rourke,
t.
a.
ashenhurst,
r.
l.
yohe,
j.
m.
linz,
p.
bron,
c.
hurst,
r.
l.
knop,
r.
e.
gentleman,
w.m.
harter,
r.
dunham,
c.
b.
greenspan,
d.
schultz,
d.
gentleman,
w.
m.
gentleman,
w.
m.
parnas,
d.
l.
christman,
r.
d.
bensoussan,
a.
clingen,
c.
t.
daley,
r.
c.
mullin,
j.
k.
hu,
t.
c.
walden,
d.
c.
moler,
c.
b.
whitney,
v.
k.
m.
kuki,
h.
moler,
c.
b.
kuki,
h.
horowitz,
e.
morgan,
h.
l.
shaw,
a.
c.
chase,
s.
m.
matsushita,
y.
herbst,
n.
m.
will,
p.
m.
walden,
d.
c.
conway,
r.
w.
maxwell,
w.
l.
morgan,
h.
l.
denning,
p.
j.
schwartz,
s.
c.
coffman
jr.,
e.
g.
ryan
jr.,
t.
a.
teorey,
t.
j.
pinkerton,
t.
b.
habermann,
a.
n.
schroeder,
m.
d.
saltzer,
j.
h.
gaines,
r.
s.
liskov,
b.
h.
bobrow,
d.
g.
burchfiel,
j.
d.
murphy,
d.
l.
tomlinson,
r.
s.
beranek,
b.
flores,
i.
madpis,
g.
.n
ca720210
jb
january
31,
1978
3:40
pm
.x
2381
5
2381
2381
5
2381
2381
5
2381
.i
2382
.t
reconstruction
of
pictures
from
their
projections
(corrigendum)
.b
cacm
february,
1972
.a
gordon,
r.
herman,
g.
t.
.n
ca720209
jb
january
31,
1978
3:42
pm
.x
2382
5
2382
2382
5
2382
2382
5
2382
.i
2383
.t
music
and
computer
composition
.w
the
problem
discussed
is
that
of
simulating
human
composition
of
western
popular
music
by
computer
and
some
relevant
theories
of
music
and
harmony
are
given.
problems
with
this
kind
of
program
and
several
schemes
that
are
known
not
to
work
are
discussed.
several
previous
computer
compositions
are
discussed,
including
the
illiac
suite.
a
program
to
generate
short
melody
fragments
was
written
to
simulate
some
of
the
aspects
of
human
composition.
five
samples
of
its
output
are
presented
and
discussed.
it
was
discovered
that
although
the
fragments
show
many
of
the
characteristics
of
popular
melodies,
they
have
a
strangely
alien
sound.
it
is
theorized
that
this
is
because
the
relevant
probabilities
which
would
discriminate
against
unfamiliar
sequences
were
not
used.
.b
cacm
february,
1972
.a
moorer,
j.
a.
williamson,
h.
jenkins,
m.
a.
traub,
j.
f.
tucker,
a.
b.
.n
ca720205
jb
january
31,
1978
4:21
pm
.x
2386
5
2386
2386
5
2386
2386
5
2386
.i
2387
.t
maximum
computing
power
and
cost
factors
in
the
centralization
problem
.w
a
simple
analysis
of
some
computer-economic
factors
involved
in
comparing
multimachine
installations
versus
large
single
machine
installations
is
given,
and
a
mathematical
model
is
derived
to
assist
policy
decisions.
.b
cacm
february,
1972
.a
oldehoeft,
a.
e.
halstead,
m.
h.
martin,
w.
a.
ness,
d.
n.
eastman,
c.
m.
pager,
d.
schrack,
g.
f.
macleod,
i.
d.
g.
einarsson,
b.
salzer,
h.
e.
shrager,
r.
i.
mccalla,
g.
i.
sampson,
j.
r.
shell,
d.
l.
.n
ca720106
jb
february
1,
1978
9:21
am
.x
2397
5
2397
2397
5
2397
2397
5
2397
.i
2398
.t
teacher/student
authored
cai
using
the
newbasic
system
.w
the
pedagogical
advantages
of
a
general
purpose
interactive
system
called
newbasic/catalyst
are
discussed.
newbasic/catalystincorporates
an
advanced
implementation
of
basic,
system-level
interactive
features,
and
a
general
capability
for
extension
through
user
oriented
function
attachment,
application
of
this
last
feature
to
provide
a
flexible
cai
scan
capability
is
illustrated.
an
example
of
interaction
at
the
system
level
shows
how
students
can
mix
the
advantages
of
independent
or
"solo"
mode
computing
with
those
of
guided
or
"dual"
mode
interaction.
preliminary
experience
with
the
system
in
an
urban
secondary
school
setting
is
discussed.
.b
cacm
january,
1972
.a
dwyer,
t.
a.
irons,
e.
t.
djorup,
f.
m.
duda,
r.
o.
hart,
p.
e.
levialdi,
s.
lesk,
a.
m.
herriot,
j.
g.
gautschi,
w.
kubicek,
m.
sibley,
e.
h.
taylor,
r.
w.
couger,
j.
d.
ehrlich,
l.
w.
stenger,
f.
salzer,
h.
e.
wegner,
e.
feldman,
j.
a.
low,
j.
r.
denning,
p.
j.
graham,
g.
s.
lam,
c.
mckay,
j.
patterson,
t.
n.
l.
brenner,
n.
ehrlich,
g.
hill,
g.
w.
reinsch,
c.
h.
slagle,
j.
r.
norton,
l.
m.
jordan,
b.
w.
jr.
barrett,
r.
c.
james,
e.
b.
partridge,
d.
p.
.n
ca731104
jb
january
20,
1978
10:29
am
.x
2422
5
2422
2422
5
2422
2422
5
2422
.i
2423
.t
a
parser-generating
system
for
constructing
compressed
compilers
.w
this
paper
describes
a
parser-generating
system
(pgs)
currently
in
use
on
the
cdc-6500
computer
at
purdue
university.
the
pgs
is
a
fortran-coded
compiler.
in
the
input
translation
grammar,
each
bnf
syntactic
rule
corresponds
to
a
(possibly
empty)
"code
generator"
realizable
as
an
assembly
language,
fortran
or
algol,
subroutine
that
is
called
whenever
that
syntactic
rule
is
applied
in
the
parse
of
a
program.
typical
one-pass
compilers
constructed
by
the
pgs
translate
source
programs
at
speeds
approaching
14,000
cards
per
minute.
for
an
xpl
compiler,
the
parser
program
and
its
tables
currently
occupy
288
words
of
60-bit
core
memory
of
which
140
words
are
parsing
table
entries
and
82
words
are
links
to
code
generators.
.b
cacm
november,
1973
.a
mickunas,
m.
d.
schneider,
v.
b.
fabry,
r.
s.
bachman,
c.
w.
.n
ca731101
jb
january
20,
1978
10:59
am
.x
2425
4
2425
2313
5
2425
2425
5
2425
2425
5
2425
2425
5
2425
.i
2426
.t
algorithms
scale1,
scale2,
and
scale3
for
determination
of
scales
on
computer
generated
plots
[j6]
(algorithm
a463)
.b
cacm
october,
1973
.a
lewart,
c.
r.
donnelly,t.
g.
burkowski,
f.
j.
hoskins,
w.
d.
saylor,
p.
e.
sebastian,
j.
d.
syslo,m.
m.
robers,
p.
d.
robers,
s.
s.
mifsud,
c.
j.
bohlen,
m.
j.
millstein,
r.
e.
prieve,
b.
g.
hirschberg,
d.
s.
lampson,
b.
w.
lum,
v.
y.
bobrow,
d.
g.
wegbreit,
b.
mcgeachie,
j.
s.
driessen,
h.
b.
hunt,
e.
w.
lem.
.n
ca730915
jb
january
23,
1978
8:34
am
.x
2440
5
2440
2440
5
2440
2440
5
2440
.i
2441
.t
hidden-line
plotting
program
(algorithm
r420)
.b
cacm
september,
1973
.a
williamson,
h.
.n
ca730914
jb
january
23,
1978
8:36
am
.x
2441
5
2441
2441
5
2441
2441
5
2441
.i
2442
.t
a
sparse
matrix
package
(algorithm
r408)
.b
cacm
september,
1973
.a
lawrence,
e.
e.
.n
ca730913
jb
january
23,
1978
8:37
am
.x
2442
5
2442
2442
5
2442
2442
5
2442
.i
2443
.t
generation
of
permutations
in
lexicographic
order
(algorithm
r323)
.b
cacm
september,
1973
.a
roy,
m.
k.
.n
ca730912
jb
january
23,
1978
8:39
am
.x
2443
4
2443
2443
5
2443
2443
5
2443
2443
5
2443
747
5
2443
.i
2444
.t
finding
all
cliques
of
an
undirected
graph
(algorithm
a457)
.b
cacm
september,
1973
.a
bron,
c.
kerbosch,
j.
fencl,
z.
hunter,
d.
b.
williams,
j.
m.
barnhill,
r.
e.
pilcher,
d.
t.
zelkowitz,
m.
v.
gates,
g.
w.
poplawski,
d.
a.
rodriguez-rosell,
j.
casey,
r.
g.
cardenas,
a.
f.
ganapathy,
s.
rajaraman,
v.
buzen,
j.
p.
foster,
c.
c.
peterson,
w.
w.
kasami,
t.
tokura,
n.
manna,
z.
nes,
s.
vuillemin,
j.
williams,
e.
j.
.n
ca730816
jb
january
23,
1978
10:26
am
.x
2458
5
2458
2458
5
2458
2458
5
2458
.i
2459
.t
hu-tucker
minimum
redundancy
alphabetic
coding
method
(algorithm
r428)
.b
cacm
august,
1973
.a
byrne,
j.
g.
.n
ca730815
jb
january
23,
1978
10:27
am
.x
2346
4
2459
2459
4
2459
1114
5
2459
2459
5
2459
2459
5
2459
2459
5
2459
.i
2460
.t
clenshaw-curtis
quadrature
(algorithm
r424)
.b
cacm
august,
1973
.a
good,
a.
j.
.n
ca730814
jb
january
23,
1978
10:29
am
.x
2460
5
2460
2460
5
2460
2460
5
2460
.i
2461
.t
graph
plotter
(algorithm
r412)
.b
cacm
august,
1973
.a
watkins,
r.
p.
.n
ca730813
jb
january
23,
1978
10:30
am
.x
2461
5
2461
2461
5
2461
2461
5
2461
.i
2462
.t
an
efficient
prime
number
generator
(algorithm
r357)
.b
cacm
august,
1973
.a
demorgan,
r.
m.
.n
ca730812
jb
january
23,
1978
10:31
am
.x
2462
5
2462
2462
5
2462
2462
5
2462
.i
2463
.t
complex
gamma
function
(algorithm
r404,c404)
.b
cacm
august,
1973
.a
andrejkova,
g.
vinar,
j.
.n
ca730811
jb
january
23,
1978
10:33
am
.x
2463
5
2463
2463
5
2463
2463
5
2463
.i
2464
.t
the
complex
method
for
constrained
optimization
[e4]
(algorithm
a454)
.b
cacm
august,
1973
.a
richardson,
j.
a.
kuester,
j.
l.
piessens,
r.
liu,
c.
n
tang,
d.
t.
goldstein,
r.
b.
machura,
m.
mulawa,
a.
misunas,
d.
maclennan,
b.
j.
smith,
m.
h.
kernighan,
b.
w.
macleod,
i.
d.
g.
collins,
a.
m.
nikolai,
p.
j.
fiala,
f.
hall,
p.
a.
v.
bochmann,
g.
v.
kandel,
a.
mcfarlan,
f.
w.
nolan,
r.
l.
rosin,
r.
f.
gelenbe,
e.
howard,
j.
h.
jr.
kozdrowicki,
e.
w.
cooper,
d.
w.
huang,
j.
c.
nolan,
r.
l.
alt,
f.
l.
yuni
kirk,
j.
hoskins,
w.
d.
ferguson,
j.
staley,
p.
a.
beyer,
t.
swinehart,
d.
f.
hopcroft,
j.
tarjan,
r.
bell,
j.
r.
strunz,
h.
shneiderman,
b.
ling,
r.
f.
stockhausen,
p.
f.
stone,
h.
s.
fuller,
s.
h.
hill,
j.
c.
gelenbe,
e.
hamlet,
r.
g.
frailey,
d.
j.
fajman,
r.
borgelt,
j.
estell,
r.
g.
wexelblat,
r.
l.
.n
ca730517
jb
january
23,
1978
4:25
pm
.x
2503
5
2503
2503
5
2503
2503
5
2503
.i
2504
.t
concerning
music
and
computer
composition
in
computational
linguistics
.b
cacm
may,
1973
.a
mcmorrow,
c.
h.
roy,
m.
k.
sale,
r.
h.
j.
howell,
j.
wheeler,
r.
e.
obradovic,
d.
.n
ca730511
jb
january
23,
1978
4:37
pm
.x
2509
5
2509
2509
5
2509
2509
5
2509
.i
2510
.t
minit
algorithm
for
linear
programming
(algorithm
r333)
.b
cacm
may,
1973
.a
holmgren,
b.
obradovic,
d.
kolm,
a.
.n
ca730510
jb
january
23,
1978
4:38
pm
.x
2510
5
2510
2510
5
2510
2510
5
2510
.i
2511
.t
maxflow
(algorithm
r324)
.b
cacm
may,
1973
.a
bayer,
g.
.n
ca730509
jb
january
23,
1978
4:39
pm
.x
2511
5
2511
2511
5
2511
2511
5
2511
.i
2512
.t
coulomb
wave
functions
(algorithm
r300)
.b
cacm
may,
1973
.a
vos,
h.
reingold,
e.
m.
mercer,
a.
rosenfeld,
a.
corneil,
d.
g.
gotlieb,
c.
c.
lee,
y.
m.
salasin,
j.
king,
p.
j.
h.
johnson,
r.
g.
low,
d.
w.
pager,
d.
ragland,
l.
c.
good,
d.
i.
broucke,
r.
rodriguez-rosell,
j.
dupuy,
j.
p.
strong
iii,
j.
p.
rosenfeld,
a.
burkhard,
w.
a.
keller,
r.
m.
kuki,
h.
cody,
w.
j.
williams,
j.g.
hassitt,
a.
lageschulte,
j.
w.
lyon,
l.
e.
lau,
j.
chang,
s.
wagner,
r.
a.
payne,
w.
h.
bookstein,
a.
salzer,
h.
e.
conway,
r.
w.
wilcox,
t.
r.
pack,
c.
d.
feinroth,
y.
franceschini,
e.
goldstein,
m.
wagner,
r.
a.
austing,
r.
h.
engel,
g.
l.
fritsch,
f.
n.
shafer,
r.
e.
crowley,w.
p.
denning,
p.
j.
schwartz,
s.
c.
.n
ca730208
jb
january
24,
1978
1:28
pm
.x
2540
5
2540
2540
5
2540
2540
5
2540
.i
2541
.t
an
overview
of
the
ispl
computer
system
design
.w
this
paper
explores
the
advantages
of
the
concurrent
design
of
the
language,
operating
system,
and
machine
(via
microcode)
to
create
an
interactive
programming
laboratory.
it
describes
the
synergistic
effect
that
the
freedom
to
move
and
alter
features
from
one
of
these
domains
to
another
has
had
on
the
design
of
this
system
(which
has
not
been
implemented).
this
freedom
simplified
both
incremental
compilation
and
the
system's
addressing
structure,
and
centralized
the
communication
mechanisms
enabling
the
construction
of
hierarchical
subsystems.
it
also
suggested
an
important
new
concept
for
operating
systems:
separation
of
the
scheduling
from
the
maintenance
functions
in
resource
allocation.
this
separation
enables
incorporation
of
new
scheduling
algorithms
(decision
of
what
to
do)
without
endangering
the
system
integration
(correctly
performing
the
scheduling
decisions).
.b
cacm
february,
1973
.a
balzer,
r.
m.
graham,
r.
m.
clancy,
g.
j.
jr.
devaney,
d.
b.
brent,
r.
p.
rokne,
j.
gimpel,
j.
f.
crespi-reghizzi,
s.
melkanoff,
m.
a.
lichten,
l.
merrill,
r.
d.
hill,
g.
w.
davis,
a.
w.
knop,
r.
e.
gallaher,
l.
j.
atkins,m.
s.
bays,
c.
blount,
s.
e.
crawford,
c.
r.
richman,
p.
l.
james,
e.
b.
partridge,
d.
p.
muraoka,
y.
kuck,
d.
j.
morris,
j.
h.
jr.
bays,
c.
shedler,
g.
s.
skinner,
c.
w.
tesch,
g.
.n
ca741212
jb
january
13,
1978
3:42
pm
.x
2562
5
2562
2562
5
2562
2562
5
2562
.i
2563
.t
merge
sort
algorithm
(r426)
.b
cacm
december,
1974
.a
bron,
c.
.n
ca741211
jb
january
13,
1978
3:43
pm
.x
2563
4
2563
2348
5
2563
2563
5
2563
2563
5
2563
2563
5
2563
.i
2564
.t
hidden-line
plotting
program
(algorithm
r420)
.b
cacm
december,
1974
.a
ellis,
t.
m.
r.
.n
ca741210
jb
january
13,
1978
3:45
pm
.x
2564
5
2564
2564
5
2564
2564
5
2564
.i
2565
.t
a
gaussian
pseudo-random
number
generator
(algorithm
488)
.b
cacm
december,
1974
.a
brent,
r.
p.
pomeranz,
j.
chu,
s.
c.
berman,
m.
salazar,
a.
oakford,
r.
v.
wallace,
n.
d.
adam,
t.
l.
chandy,
k.
m.
dickson,
j.
r.
strauss,
j.
c.
press,
l.
i.
knuth,
d.
e.
.n
ca741201
jb
january
16,
1978
10:04
am
.x
1860
4
2573
1973
4
2573
1973
4
2573
1992
4
2573
1992
4
2573
2018
4
2573
2033
4
2573
2107
4
2573
2109
4
2573
2138
4
2573
2203
4
2573
2203
4
2573
2251
4
2573
2251
4
2573
2251
4
2573
2530
4
2573
2537
4
2573
2543
4
2573
2543
4
2573
2559
4
2573
2573
4
2573
2573
4
2573
2573
4
2573
2770
4
2573
2770
4
2573
2991
4
2573
3053
4
2573
3083
4
2573
1786
5
2573
2018
5
2573
2107
5
2573
2573
5
2573
2573
5
2573
2573
5
2573
.i
2574
.t
multiple
exists
from
a
loop
using
neither
go
to
nor
labels
.b
cacm
november,
1974
.a
evans,
r.
v.
van
rijsbergen,
c.
j.
hanson,
d.
r.
brown,
j.
a.
werner,
b.
dijkstra,
e.
w.
freiburghouse,
r.
a.
rader,
g.
m.
miller,
p.
l.
ferrari,
d.
sterling,
t.
d.
gilchrist,
b.
weber,
r.
e.
krogh,
f.
t.
.n
ca741013
jb
january
16,
1978
11:02
am
.x
2585
5
2585
2585
5
2585
2585
5
2585
.i
2586
.t
adapting
optimal
code
generation
for
arithmetic
expressions
to
the
instruction
sets
available
on
present-day
computers
(errata)
.b
cacm
october,
1974
.a
stockhausen,
p.
f.
.n
ca741012
jb
january
16,
1978
11:05
am
.x
2586
5
2586
2586
5
2586
2586
5
2586
.i
2587
.t
on
the
construction
of
a
representative
synthetic
workload
(errata)
.b
cacm
october,
1974
.a
sreenivarsan,
k.
kleinman,
a.
j.
.n
ca741011
jb
january
16,
1978
11:07
am
.x
2587
4
2587
2588
4
2587
2587
5
2587
2587
5
2587
2587
5
2587
2612
5
2587
.i
2588
.t
rosenbrock
function
minimization
(algorithm
r450)
.b
cacm
october,
1974
.a
klemes,
j.
klemsa,
j.
.n
ca741010
jb
january
16,
1978
11:09
am
.x
2587
4
2588
2588
4
2588
2588
5
2588
2588
5
2588
2588
5
2588
2612
5
2588
.i
2589
.t
a
computer
routine
for
quadratic
and
linear
programming
problems
(algorithm
r431)
.b
cacm
october,
1974
.a
proll,
l.
g.
.n
ca741009
jb
january
16,
1978
11:10
am
.x
2589
4
2589
1353
5
2589
2589
5
2589
2589
5
2589
2589
5
2589
.i
2590
.t
hypergeometric
(algorithm
c191)
.b
cacm
october,
1974
.a
kopelaar,
h.
.n
ca741008
jb
january
16,
1978
11:14
am
.x
2590
4
2590
2590
5
2590
2590
5
2590
2590
5
2590
888
5
2590
.i
2591
.t
numerical
inversion
of
laplace
transform
(algorithm
a486)
.b
cacm
october,
1974
.a
veillon,
f.
charnes,
a.
raike,
w.
m.
stutz,
j.
d.
walters,
a.
s.
canaday,
r.
h.
harrison,
r.
d.
ivie,
e.
l.
ryder,
j.
l.
wehr,
l.
a.
shneiderman,
b.
scheuermann,
p.
slutz,
d.
r.
traiger,
i.
l.
shen,
k.
k.
peterson,
j.
l.
hoare,
c.
a.
r.
shwayder,
k.
young,
j.
w.
eidson,
h.
d.
schumaker,
l.
l.
burrell,
k.
h.
watkins,
s.
l.
schkolnick,
m.
cheung,
t.
aberth,
o.
willers,
i.
m.
acm
committee
acton,
f.
s.
lagerlof,
r.
o.
e.
stroud,
a.
h.
shere,
k.
d.
.n
ca740813
jb
january
17,
1978
9:28
am
.x
2611
5
2611
2611
5
2611
2611
5
2611
.i
2612
.t
rosenbrock
function
minimization
(algorithm
r450)
.b
cacm
august,
1974
.a
bultheel,
a.
.n
ca740812
jb
january
17,
1978
9:33
am
.x
2587
5
2612
2588
5
2612
2612
5
2612
2612
5
2612
2612
5
2612
2612
6
2612
2612
6
2612
.i
2613
.t
transitivity
sets
[g7]
(algorithm
a482)
.b
cacm
august,
1974
.a
mckay,
j.
regener,
e.
crandall,
k.
c.
lyche,
t.
schumaker,
l.
l.
cavouras,
j.
c.
denning,
p.
j.
graham,
g.
s.
.n
ca740807
jb
january
17,
1978
9:44
am
.x
2617
5
2617
2617
5
2617
2617
5
2617
.i
2618
.t
a
new
solution
of
dijkstra's
concurrent
programming
problem
.w
a
simple
solution
to
the
mutual
exclusion
problem
is
presented
which
allows
the
system
to
continue
to
operate
despite
the
failure
of
any
individual
component.
.b
cacm
august,
1974
.a
lamport,
l.
neufeld,
g.
a.
tartar,
j.
friedman,
t.
d.
offman,
l.
j.
purdy,
g.
b.
evans,
a.
jr.
kantrowitz,
w.
weiss,
e.
hahn,
b.
popek,
g.
j.
goldberg,
r.
p.
fabry,
r.
s.
saltzer,
j.
h.
bruno,
j.
coffman,
e.
g.
jr.
sethi,
r.
fuller,
s.
h.
ritchie,
d.
m.
thompson,
k.
minieka,
e.
barton,
i.
j.
creasey,
s.
e.
lynch,
m.
f.
snell,
m.
j.
wulf,
w.
cohen,
e.
corwin,
w.
jones,
a.
levin,
r.
pierson,
c.
pollack,
f.
adams,
j.
gary,
j.
slysz,
w.
d.
boulton,
d.
m.
.n
ca740611
jb
january
17,
1978
2:56
pm
.x
2635
5
2635
2635
5
2635
2635
5
2635
.i
2636
.t
generation
of
random
correlated
normal
variables
(algorithm
r425)
.b
cacm
june,
1974
.a
page,
r.
l.
.n
ca740610
jb
january
17,
1978
2:57
pm
.x
2636
5
2636
2636
5
2636
2636
5
2636
.i
2637
.t
hidden-line
plotting
program
(algorithm
r420)
.b
cacm
june,
1974
.a
ellis,
t.
m.
r.
.n
ca740609
jb
january
17,
1978
2:59
pm
.x
2637
5
2637
2637
5
2637
2637
5
2637
.i
2638
.t
hidden-line
plotting
program
(algorithm
r420)
.b
cacm
june,
1974
.a
gaither,
b.
.n
ca740608
jb
january
17,
1978
3:00
pm
.x
2638
5
2638
2638
5
2638
2638
5
2638
.i
2639
.t
calculation
of
fourier
integrals
(algorithm
r418)
.b
cacm
june,
1974
.a
piessens,
r.
.n
ca740607
jb
january
17,
1978
3:01
pm
.x
2639
5
2639
2639
5
2639
2639
5
2639
.i
2640
.t
modified
havie
integration
(algorithm
r400)
.b
cacm
june,
1974
.a
piessens,
r.
.n
ca740606
jb
january
17,
1978
3:04
pm
.x
2350
4
2640
2354
4
2640
2640
4
2640
2355
5
2640
2640
5
2640
2640
5
2640
2640
5
2640
.i
2641
.t
a
minimal
spanning
tree
clustering
method
[z]
(algorithm
a479)
.b
cacm
june,
1974
.a
page,
r.
l.
barrodale,
i.
roberts,
f.
d.
k.
gimpel,
j.
f.
henschen,
l.
overbeek,
r.
wos,
l.
ccohen,
j.
zuckerman,
c.
gold,
d.
e.
kuck,
d.
j.
gentleman,
w.
m.
marovich,
s.
b.
wunderlich,
m.
c.
selfridge,
j.
l.
tsao,
n.
wagner,
r.
a.
wegbreit,
b.
shaw,
m.
einarsson,
b.
.n
ca740417
jb
january
17,
1978
4:44
pm
.x
2653
4
2653
2654
4
2653
1955
5
2653
2653
5
2653
2653
5
2653
2653
5
2653
.i
2654
.t
generator
of
set-partitions
to
exactly
r
subsets
[g7]
(algorithm
a477)
.b
cacm
april,
1974
.a
ehrich,
g.
cline,
a.
k.
cline,
a.
k.
lee,
r.
c.
t.
chang,
c.
l.
waldinger,
r.
j.
balfour,
a.
abrahams,
p.
w.
simmons,
g.
c.
sterling,
t.
d.
pollack,
s.
v.
freeman,
p.
malcolm,
m.
a.
payne,
w.
h.
lucas,
h.
c.
jr.
montgomery,
d.
b.
larreche,
j.
c.
even,
s.
lindstrom,
g.
smith,
g.
sefton,
i.
m.
boyse,
j.
w.
franklin,
m.
a.
gupta,
r.
k.
saltzer,
j.
h.
krogh,
f.
t.
stone,
h.
s.
smoliar,
s.
w.
ackerman,
a.
f.
barrett,
r.
c.
fordan,
b.
w.
jr.
ravindran,
a.
.n
ca740308
jb
january
18,
1978
11:10
am
.x
2675
5
2675
2675
5
2675
2675
5
2675
.i
2676
.t
zeros
of
a
complex
polynomial
(algorithm
r419)
.b
cacm
march,
1973
.a
withers,
d.
h.
.n
ca740307
jb
january
18,
1978
11:11
am
.x
2676
5
2676
2676
5
2676
2676
5
2676
.i
2677
.t
incomplete
beta
ratio
(algorithm
r179)
.b
cacm
march,
1974
.a
bosten,
n.
e.
battiste,
e.
l.
.n
ca740306
jb
january
18,
1978
11:13
am
.x
2668
5
2677
2677
5
2677
2677
5
2677
2677
5
2677
1604
6
2677
1728
6
2677
1761
6
2677
1827
6
2677
2677
6
2677
.i
2678
.t
visible
surface
plotting
program
[j6]
(algorithm
a475)
.b
cacm
march,
1974
.a
wright,
t.
loeser,
r.
morgan,
h.
l.
balkovich,
e.
chiu,
w.
presser,
l.
wood,
r.
sreenivasan,
k.
kleinman,
a.
j.
wegbreit,
b.
ledgard,
h.
f.
lamport,
l.
ramberg,
j.
s.
schmeiser,b.
w.
jordan,
b.
w.
jr.
barrett,
r.
c.
rothnie,
j.
b.
jr.
lozano,
t.
lucas,
h.
c.
jr.
knott,
g.
d.
king,
p.
j.
h.
johnson,
r.
g.
sutherland,
i.
e.
hodgman,
g.
w.
akima,
h.
piessens,
r.
gibbs,
n.
e.
poole,
w.
g.
jr.
akima,
h.
malcolm,
m.
a.
palmer,
j.
lyon,
g.
schwartz,
j.
t.
lipton,
r.
j.
graham,
s.
l.
wegman,
m.
hunt,
h.
b.
iii
szymanski,
t.
g.
ullman,
j.
d.
jazayeri,
m.
ogden,
w.
f.
rounds,
w.
c.
goodenough,
j.
b.
naur,
p.
kou,
l.
t.
wong,
c.
k.
bitner,
j.
r.
reingold,
e.
m.
graham,
s.
l.
rhodes,
s.
p.
ledgard,
h.
f.
marcotty,
m.
boyce,
r.
f
chamberlin,
d.
d.
king,
w.
f.
iii
salton,
g.
wong,
a.
yang,
c.
s.
reiser,
m.
kobayashi,
h.
cotton,
i.
.n
ca751006
jb
january
6,
1978
10:38
am
.x
2713
5
2713
2713
5
2713
2713
5
2713
.i
2714
.t
merging
with
parallel
processors
.w
consider
two
linearly
ordered
sets
a,
b,
|a|=m,
|b|=n,
m<=n,
and
p,
p<=m,
parallel
processors
working
synchronously.
the
paper
presents
an
algorithm
for
merging
a
and
b
with
the
p
parallel
processors,
which
requires
at
most
2[log2
(2m+1)]+[3m/p]
+
[m/p][log2
(n/m)]
steps.
if
n
=
(2^b)m
(b
an
integer),
the
algorithm
requires
at
most
2[log2
(m+1)]
+
[m/p](2+b)
steps.
in
the
case
where
m
and
n
are
of
the
same
order
of
magnitude,
i.e.
n=km
with
k
being
a
constant,
the
algorithm
requires
2[log2
(m+1)]
+
[m/p](3+k)
steps.
these
performances
compare
very
favorably
with
the
previous
best
parallel
merging
algorithm,
batcher's
algorithm,
which
requires
n/p
+
((m+n)/2p)log2
m
steps
in
the
general
case
and
km/p
+
((k+1)/2)(m/p)log2
m
in
the
special
case
where
n=km.
.b
cacm
october,
1975
.a
gavril,
f.
astrahan,
m.
m.
chamberlin,d.
d.
smith,
j.
m.
yen-tang
chang,
p.
shu,
n.
c.
housel,
b.
c.
lum,
v.
y.
gerritsen,
r.
wegbreit,
b.
piepmeier,
w.
f.
claudson,
r.
m.
bently,
j.
l.
steele,
g.
l.
jr.
todd,
j.
.n
ca750811
jb
january
6,
1978
3:44
pm
.x
2724
5
2724
2724
5
2724
2724
5
2724
.i
2725
.t
a
comparison
of
simulation
event
list
algorithms
(corrigendum)
.b
cacm
august,
1975
.a
vaucher,
j.
c.
duval,
p.
.n
ca750810
jb
january
6,
1978
3:43
pm
.x
2725
5
2725
2725
5
2725
2725
5
2725
.i
2726
.t
combining
decision
rules
in
a
decision
table
.w
the
techniques
for
minimizing
logic
circuits
are
applied
to
the
simplification
of
decision
tables
by
the
combining
of
decision
rules.
this
method
is
logically
equivalent
to
the
quien-mccluskey
method
for
finding
prime
implicants.
if
some
of
the
decision
rules
implied
in
the
else
rule
occur
with
low
frequency,
then
the
else
rule
can
be
used
to
further
simplify
the
decision
table.
several
objectives
merit
consideration
in
optimizing
a
decision
table:(1)
reducing
machine
execution
time;
(2)
reducing
preprocessing
time;
(3)
reducing
required
machine
memory;
(4)
reducing
the
number
of
decision
rules.
(this
often
improves
the
clarity
of
the
decision
table
to
a
human
reader.)
it
will
be
shown
that
objectives
(3)
and
(4)
can
be
furthered
with
the
above
methods.
objective
(1)
is
also
attained
if
overspecified
decision
rules
are
not
combined.
objective
(2)
must
be
compared
against
the
potential
benefits
of
objectives
(1),
(3),
and
(4)
in
deciding
whether
to
use
the
above
methods.
.b
cacm
august,
1975
.a
shwayder,
k.
lamport,
l.
ghosh,
s.
p.
smith,
a.
j.
sharo,
s.
c.
kwasny,
s.
c.
cotton,
i.
w.
dijkstra,
e.
w.
aho,
a.
v.
johnson,
s.
c.
ullman,
j.
d.
shore,
j.
e.
weber,
r.
e.
gilchrist,
b.
bobrow,
d.
g.
freeman,
h.
shapira,
r.
parnas,
d.
l.
siewiorek,
d.
p.
sager,
n.
grishman,
r.
lauesen,
s.
courtois,
p.
j.
wyman,
f.
p.
harper,
l.
h.
payne,
t.
h.
savage,
j.
e.
straus,
e.
soule,
s.
hirschberg,
d.
s.
aho,
a.
v.
corasick,
m.
j.
cranston,
b.
thomas,
r.
dewar,
r.
b.
k.
babich,
a.
f.
grason,
j.
parnas,
d.
l.
lum,
v.
y.
senko,
m.
e
wang,
c.
p.
ling,
h.
phong,
b.
t.
gibbs,
n.
e.
pfefferkorn,
c.
e.
horowitz,
s.
l.
mills,
h.
d.
.n
ca750512
jb
january
9,
1978
2:20
pm
.x
2755
5
2755
2755
5
2755
2755
5
2755
.i
2756
.t
a
problem-list
of
public
policy
issues
concerning
computers
and
health
care
.b
cacm
may,
1975
.a
wasserman,
a.
i.
fox,
b.l.
evans,
d.
j.
hatzopoulos,
m.
fritsch,
f.
n.
hindmarsh,
a.
c.
.n
ca750508
jb
january
9,
1978
2:32
pm
.x
2759
4
2759
2642
5
2759
2759
5
2759
2759
5
2759
2759
5
2759
.i
2760
.t
visible
surface
plotting
program
(algorithm
r475)
.b
cacm
may,
1975
.a
doran,
c.
j.
.n
ca750507
jb
january
9,
1978
2
2:33
pm
.x
2760
5
2760
2760
5
2760
2760
5
2760
.i
2761
.t
visible
surface
plotting
program
(algorithm
r475)
.b
cacm
may,
1975
.a
mashburn,
r.
g.
.n
ca750506
jb
january
9,
1978
2:35
pm
.x
2761
5
2761
2761
5
2761
2761
5
2761
.i
2762
.t
ten
subroutines
for
the
manipulation
of
chebyshev
series
(algorithm
r446,
c446)
.b
cacm
may,
1975
.a
piessens,
r.
mertens,
i.
.n
ca750505
jb
january
9,
1978
2:37
pm
.x
2762
4
2762
2521
5
2762
2762
5
2762
2762
5
2762
2762
5
2762
.i
2763
.t
basic
cycle
generation
[h]
(algorithm
491)
.b
cacm
may,
1975
.a
gibbs,
n.
e.
wilks,
y.
cardenas,
a.
f.
fisher,
d.
a.
vaucher,
j.
g.
duval,
p.
hinds,
j.
a.
warren,
h.
s.
jr.
batagelj,
v.
braid,
i.
c.
smith,
g.
shen,
k.
k.
peterson,
j.
l.
.n
ca750404
jb
january
9,
1978
4:06
pm
.x
2773
4
2773
2845
4
2773
2902
4
2773
2955
4
2773
2747
5
2773
2773
5
2773
2773
5
2773
2773
5
2773
2911
5
2773
2955
5
2773
1184
6
2773
1879
6
2773
273
6
2773
2435
6
2773
2435
6
2773
2498
6
2773
2596
6
2773
2734
6
2773
2747
6
2773
2773
6
2773
2773
6
2773
2983
6
2773
.i
2774
.t
remark
on
algorithm
475
.b
cacm
april,
1975
.a
frederick,
l.
w.
.n
ca750403
jb
january
9,
1978
4:07
pm
.x
2774
5
2774
2774
5
2774
2774
5
2774
.i
2775
.t
the
dilogarithm
function
of
a
real
argument
[s22]
(algorithm
490)
.b
cacm
april,
1975
.a
ginsberg,
e.
s.
zaborowski,
d.
chambers,
j.
a.
poore,
r.
v.
parnas,
d.
l.
sluis,
a.
.n
ca750310
jb
january
9,
1978
4:26
pm
.x
2778
5
2778
2778
5
2778
2778
5
2778
.i
2779
.t
discrete
least
squares
polynomial
fits
.w
the
recurrence
relation
between
orthogonal
polynomials
is
widely
used
for
discrete
least
squares
data
fitting.
a
variant
of
the
classical
algorithm
which
has
better
numerical
properties
is
presented
and
the
reason
for
its
improved
performance
is
explained.
.b
cacm
march,
1975
.a
shampine,
l.
f.
erisman,
e.
m.
tinney,
w.
f.
whitt,
j.
d.
sullenberger,
a.
g.
karp,
r.
a.
floyd,
r.
w.
rivest,
r.
l.
floyd,
r.
w.
rivest,
r.
l.
lawrie,
d.
h.
layman,
t.
baer,
d.
randal,
j.
m.
kernighan,
b.
w.
cherry,
l.
l.
johnston,
h.
c.
hoare,
c.
a.
r.
kimme,
c.
balard,
d.
sklansky,
j.
magnuski,
h.
s.
.n
ca750210
jb
january
12,
1978
2:52
pm
.x
2789
5
2789
2789
5
2789
2789
5
2789
.i
2790
.t
the
elementary
circuits
of
a
graph
(algorithm
r459)
.b
cacm
february,
1975
.a
syslo,
m.
m.
.n
ca750209
jb
january
12,
1978
2:54
pm
.x
2790
5
2790
2790
5
2790
2790
5
2790
.i
2791
.t
exact
probabilities
for
r
x
c
contingency
tables
(algorithm
r434)
.b
cacm
february,
1975
.a
hancock,
t.
w.
.n
ca750208
jb
january
12,
1978
2:55
pm
.x
2791
5
2791
2791
5
2791
2791
5
2791
.i
2792
.t
jacobi
polynomials
(algorithm
r332)
.b
cacm
february,
1975
.a
skovgaard,
o.
.n
ca750207
jb
january
10,
1978
9:32
am
.x
2647
4
2792
2792
4
2792
2792
4
2792
2267
5
2792
2647
5
2792
2792
5
2792
2792
5
2792
2792
5
2792
.i
2793
.t
chi-square
quantiles
(algorithm
c451)
.b
cacm
february,
1975
.a
knight,w.
.n
ca750206
jb
january
10,
1978
9:40
am
.x
2467
4
2793
2793
4
2793
1606
5
2793
2793
5
2793
2793
5
2793
2793
5
2793
.i
2794
.t
state-space,
problem-reduction,
and
theorem
proving-some
relationships
.w
this
paper
suggests
a
bidirectional
relationship
between
state-space
and
problem-reduction
representations.
it
presents
a
formalism
based
on
multiple-input
and
multiple-output
operators
which
provides
a
basis
for
viewing
the
two
types
of
representations
in
this
manner.
a
representation
of
the
language
recognition
problem
which
is
based
on
the
cocke
parsing
algorithm
is
used
as
an
illustration.
a
method
for
representing
problems
in
first-order
logic
in
such
a
way
that
the
inference
system
employed
by
a
resolution-based
theorem
prover
determines
whether
the
set
of
clauses
is
interpreted
in
the
state-spacer
mode
or
in
the
problem-reduction
mode
is
presented.
the
analogous
concepts
in
problem-reduction
and
theorem
proving,
and
the
terminology
used
to
refer
to
them,
are
noted.
the
relationship
between
problem-reduction,
input
resolution,
and
linear
resolution
is
discussed.
.b
cacm
february,
1975
.a
vanderbrug,
g.
j.
minker,
j.
goldman,
n.
m.
hoare,
c.
a.
r.
.n
ca750203
jb
january
12,
1978
8:45
am
.x
2796
5
2796
2796
5
2796
2796
5
2796
2866
5
2796
2356
6
2796
2597
6
2796
2796
6
2796
.i
2797
.t
a
first
order
approximation
to
the
optimal
checkpoint
interval
(corrigendum)
.b
cacm
february,
1975
.a
young,
j.
w.
.n
ca750202
jb
january
12,
1978
8:47
am
.x
2797
5
2797
2797
5
2797
2797
5
2797
.i
2798
.t
analysis
of
interleaved
memory
systems
using
blockage
buffers
.w
a
model
of
interleaved
memory
systems
is
presented,
and
the
analysis
of
the
model
by
monte
carlo
simulation
is
discussed.
the
simulations
investigate
the
performance
of
various
system
structures,
i.e.
schemes
for
sending
instruction
and
data
requests
to
the
memory
system.
performance
is
measured
by
determining
the
distribution
of
the
number
of
memory
modules
in
operation
during
a
memory
cycle.
an
important
observation
from
these
investigations
is
that
separately
grouping
instruction
and
data
requests
for
memory
can
substantially
increase
the
average
number
of
memory
modules
in
operation
during
a
memory
cycle.
results
of
the
simulations
and
an
analytical
study
are
displayed
for
various
system
structures.
.b
cacm
february,
1975
.a
burnett,
g.
j.
coffman,
e.
g.
jr.
hanson,
r.
j.
liniger,
w.
chi
chen,
t.
ho,
i.
t.
mills,
h.
d.
hestenes,
m.
r.
marcus,
m.
robinson,
h.
van
der
sluis,
a.
birkhoff,
g.
peters,
g.
wilkinson,
j.
h.
todd,
j.
bauer,
f.
l.
finerman,
a.
stockman,
g.
kanal,
l.
kyle,
m.
c.
nunamaker,
j.
f.
jr.
konsynski,
b.
r.
jr.
ho,
t.
singer,
c.
arden,
b.
sammet,
j.
e.
.n
ca761201
jb
january
3,
1978
2:38
pm
.x
2814
5
2814
2814
5
2814
2814
5
2814
.i
2815
.t
high-level
binding
with
low-level
linkers
.w
an
easy
to
implement
scheme
is
described
by
which
a
compiler
can
enforce
agreement
between
complex
data
types
in
separately
compiled
modules.
the
scheme
is
designed
to
work
with
any
existing
link
editor
or
linking
loader,
no
matter
how
deficient.
obscure
run-time
errors
caused
by
inconsistent
usages
are
forestalled
by
static
errors
detected
at
linking
time.
.b
cacm
november,
1976
.a
hamlet,
r.
g.
maruyama,
k.
smith,
s.
e.
eswarran,
k..
gray,
j..
lorie,
r..
traiger,
i.
l.
baskett,
f.
smith,
a.
j.
.n
ca761105
jb
january
3,
1978
3:18
pm
.x
2818
5
2818
2818
5
2818
2818
5
2818
.i
2819
.t
experiments
in
text
file
compression
.w
a
system
for
the
compression
of
data
files,
viewed
as
strings
of
characters,
is
presented.
the
method
is
general,
and
applies
equally
well
to
english,
to
pl/i,
or
to
digital
data.
the
system
consists
of
an
encoder,
an
analysis
program,
and
a
decoder.
two
algorithms
for
encoding
a
string
differ
slightly
from
earlier
proposals.
the
analysis
program
attempts
to
find
an
optimal
set
of
codes
for
representing
substrings
of
the
file.
four
new
algorithms
for
this
operation
are
described
and
compared.
various
parameters
in
the
algorithms
are
optimized
to
obtain
a
high
degree
of
compression
for
sample
texts.
.b
cacm
november,
1976
.a
rubin,
f.
wilcox,
t.
r.
davis,
a.
m.
tindall,
m.
h.
ledgard,
h.
f.
cave,
w.
c.
ross,
d.
t.
montanelli,
r.
g.
jr.
mamrak,
s.
a.
duong-kien,
c.
hoffmann,
h.
j.
muth,
d.
frane,
j.
w.
burtnyk,
n.
wein,
m.
levin,
j.
clark,
j.
h.
blinn,
j.
f.
newell,
m.
e.
severance,
d.
g.
duhne,
r.
a.
.n
ca760909
jb
january
4,
1978
8:43
am
.x
2830
5
2830
2830
5
2830
2830
5
2830
.i
2831
.t
analysis
of
the
pff
replacement
algorithm
via
a
semi-markov
model
(corrigendum)
.b
cacm
september,
1976
.a
chu,
w.
w.
opderbeck,
h.
.n
ca760908
dmm
february
1,
1978
9:54
am
.x
2831
5
2831
2831
5
2831
2831
5
2831
.i
2832
.t
faster
retrieval
from
context
trees
(corrigendum)
.w
context
trees
provide
a
convenient
way
of
storing
data
which
is
to
be
viewed
as
a
hierarchy
of
contexts.
this
note
presents
an
algorithm
which
improves
on
previous
context
tree
retrieval
algorithms.
it
is
based
on
the
observation
that
in
typical
uses
context
changes
are
infrequent
relative
to
retrievals,
so
that
data
can
be
cached
to
speed
up
retrieval.
a
retrieval
is
started
from
the
position
of
the
previous
retrieval
and
auxiliary
structures
are
built
up
to
make
the
search
rapid.
algorithms
for
addition
and
deletion
of
data
and
for
garbage
collection
are
outlined.
.b
cacm
september,
1976
.a
wegbreit,
b.
deutsch,
l.
p.
bobrow,
d.
g.
bitner,
j.
r.
ehrlich,
g.
reingold,
e.
m.
walter,
k.
g.
loui,
m.
c.
yap,
c.
k.
wadler,
p.
l.
hirschberg,
d.
s.
harrison,
m.
a.
ruzzo,
w.
l.
ullman,
j.
d.
clark,
j.
h.
tennent,
r.
d.
donovan,
j.
j.
gonnet,
g.
h.
burton,
w.
maly,
k.
fishman,
g.
s.
cheng,
c.
rabin,
j.
metcalfe,
r.
m.
boggs,
d.
r.
king,
j.
c.
keller,
r.
m.
conte,
s.
d.
halstead,
m.
h.
knott,
g.
d.
steele,
g.
l.
jr.
.n
ca760608
jb
january
4,
1978
1:36
pm
.x
2854
5
2854
2854
5
2854
2854
5
2854
.i
2855
.t
an
efficient
list-moving
algorithm
using
constant
workspace
.w
an
efficient
algorithm
is
presented
for
moving
arbitrary
list
structures,
using
no
storage
(apart
from
program
variables)
other
than
that
required
to
hold
the
original
list
and
the
copy.
the
original
list
is
destroyed
as
it
is
moved.
no
mark
bits
are
necessary,
but
pointers
to
the
copy
must
be
distinguishable
from
pointers
to
the
original.
the
algorithm
is
superior
in
execution
speed
to
previous
algorithms
for
the
same
problem.
some
variations
and
extensions
of
the
algorithm
are
discussed.
.b
cacm
june,
1976
.a
clark,
d.
w.
schumacher,
h.
sevcik,
k.
c.
wise,
d.
s.
frieder,
g.
saal,
h.
j.
baskett,
f.
smith,
a.
j.
severance,
d.
duhne,
r.
taulbee,
o.
e.
conte,
s.
d.
.n
ca760601
jb
january
4,
1978
2:51
pm
.x
2861
5
2861
2861
5
2861
2861
5
2861
2962
5
2861
3123
5
2861
3122
5
2861
2823
6
2861
2861
6
2861
2861
6
2861
2861
6
2861
2962
6
2861
2962
6
2861
3022
6
2861
.i
2862
.t
analysis
of
the
pff
replacement
algorithm
via
a
semi-markov
model
.w
an
analytical
model
is
presented
to
estimate
the
performance
of
the
page
fault
frequency
(pff)
replacement
algorithm.
in
this
model,
program
behavior
is
represented
by
the
lru
stack
distance
model
and
the
pff
replacement
algorithm
is
represented
by
a
semi-markov
model.
using
these
models,
such
parameters
as
the
inter-page-fault
interval
distribution,
the
probability
of
the
number
of
distinct
pages
being
referenced
during
an
inter-page-fault
interval,
etc.
are
able
to
be
analytically
determined.
using
these
models
to
evaluate
these
parameter
values
permits
study
of
the
performance
of
the
replacement
algorithm
by
simulating
the
page
fault
events
rather
than
every
page
reference
event.
this
significantly
reduces
the
required
computation
time
in
estimating
the
performance
of
the
pff
algorithm.
.b
cacm
may,
1976
.a
chu,
w.
w.
opderbeck,
h.
prieve,
b.
g.
fabry,
r.
s.
madison,
a.
w.
batson,
a.
p.
owicki,
s.
gries,
d.
howard,
j.h.
habermann,a.
n.
flon,
l.
cooprider,
l.
lampson,
b.
w.
sturgis,
h.
e.
millen,
j.
k.
denning,
d.
e.
katz,
s.
manna,
z.
fagin,
r.
.n
ca760404
jb
january
4,
1978
4:19
pm
.x
2872
5
2872
2872
5
2872
2872
5
2872
.i
2873
.t
lg:
a
language
for
analytic
geometry
.w
a
conversational
programming
language
for
analytic
geometry
is
described,
together
with
some
aspects
of
its
implementation.
the
language
allows
the
flexible
definition
of
geometric
objects
and
elements,
computes
their
parameters,
and
displays
the
results.
it
also
provides
the
capability
of
specifying
a
geometric
figure
via
a
collection
of
parameters
and
displaying
various
loci
corresponding
to
these
parameters.
a
third
characteristic
consists
of
the
possibility
of
using
this
language
to
design
other
user
oriented
languages.
lg
has
been
specifically
designed
for
use
by
nonprogrammers;
it
is
easy
to
learn
and
very
close
to
the
natural
language
used
in
geometry.
.b
cacm
april,
1976
.a
raymond,
j.
lientz,
b.
p.
smoot,
o.
r.
minsky,
n.
allen,
j.
e.
cocke,
j.
babad,
j.
m.
modiano,
m.
m.
newell,
a.
simon,
h.
a.
artzy,
e.
hinds,
j.
a.
saal,
h.
j.
fagin,
r.
siler,
k.
f.
martelli,
a.
ives,
f.
m.
rivest,
r.
bochmann,
g.
v.
litecky,
c.
r.
davis,
g.
b.
florentin,
j.
j.
karlton,
p.
l.
fuller,
s.
h.
scroggs,
r.
e.
kaehler,
e.
b.
agnew,
c.
e.
wilhelm,
n.
c.
kleinrock,
l.
naylor,
w.
e.
opderbeck,
h.
danziger,
j.
n.
dutton,
w.
h.
adrams,
m.
d.
greif,
i.
gries,
d.
carter,
j.
l.
kessels,
j.
l.
w.
lopez,
a.
a.
raymond,
r.
tardiff,
r.
grapa,
e.
belford,
g.
g.
blasgen,
m.
w.
casey,
r.
g.
eswaran,
k.
p.
nielsen,
n.
r.
bird,
r.
s.
cocke,
j.
sprugnoli,
r.
hammer,
m.
owe,
w.
g.
kruskal,
v.
j.
wladawsky,
i.
manna,
z.
shamir,
a.
roy,
m.
k.
wirth,
n.
stockman,
g.
c.
shore,
j.
e.
lamport,
l.
crow,
f.
c.
turner,
r.
strecker,
b.
lee,
j.
a.
n.
boyer,
r.
s.
schneider,
b.
r.
jr.
watts,
r.
m.
.n
ca771009
jb
december
28,
1977
5:58
am
.x
2917
5
2917
2917
5
2917
2917
5
2917
.i
2918
.t
multiprocessor
memory
organization
and
memory
interference
.w
the
structure
of
shared
memory
in
a
multiprocessor
computer
system
is
examined
with
particular
attention
to
nonin
terleaved
memory.
alternative
memory
organizations
are
compared
and
it
is
shown
that
a
home
memory
organization,
in
which
each
processor
is
associated
with
one
or
more
memories
in
which
its
address
space
is
concentrated,
is
quite
effective
in
reducing
memory
in
terference.
home
memory
organization
is
shown
to
be
particularly
suited
to
certain
specialized
computation
problems
as
well
as
to
possess
advantages
in
terms
of
in
terference
and
reliability
for
general
purpose
computation.
results
for
in
terleaved
memory
are
drawn
from
previous
work
and
are
used
for
comparison.
trace-driven
simulations
are
used
to
verify
the
conclusions
of
the
analysis.
.b
cacm
october,
1977
.a
smith,
a.
j.
ivie,
e.
l.
devillers,
r.
lalonde,
w.
r.
montangero,
c.
pacini,
g.
turini,
f.
rosen,
b.
k.
wu,
sheng-chuan
abel,
j.
f.
greenberg,
d.
p.
fuchs,
h.
kedem,z.
m.
uselton,
s.
p.
mccreight,
e.
m.
mairson,
h.
g.
giffor,
d.
k.
scheifler,
r.
w.
austing,
r.
h.
scott,
d.
s.
rabin,
m.
o.
francez,
n.
lawler,
e.
l.
taulbee,
o.
e.
conte,
s.
d.
.n
ca770808
jb
december
28,
1977
7:04
am
.x
2935
5
2935
2935
5
2935
2935
5
2935
.i
2936
.t
an
efficient
data
structure
for
the
simulation
event
set
.w
recently
algorithms
have
been
presented
for
the
realization
of
event
scheduling
routines
suitable
for
general
purpose
discrete
event
simulation
systems.
several
exhibited
a
performance
superior
to
that
of
commonly
used
simple
linked
list
algorithms.
in
this
paper
a
new
event
scheduling
algorithm
is
presented
which
improves
on
two
aspects
of
the
best
of
the
previously
published
algorithms.
first,
the
new
algorithm's
performance
is
quite
insensitive
to
skewed
distributions,
and
second,
its
worst-case
complexity
is
o(
n),
where
n
is
the
number
of
events
in
the
set.
furthermore,
tests
conducted
to
estimate
the
average
complexity
showed
it
to
be
nearly
independent
of
n.
.b
cacm
august,
1977
.a
franta,
w.
r.
maly,
k.
gannon,
j.
d.
wirth,
n.
liskov,
b.
snyder,
a.
atkinson,
r.
schaffert,
c.
shaw,
m.
wulf,
w.
a.
geschke,
c.
m.
morris,
j.
h.
jr.
satterthwaite,
e.
h.
brownlee,
j.
n.
ashcrof,
e.
a.
wadge,
w.
w.
barth,
j.
m.
denning,
d.
e.
denning,
p.
j.
kessels,
j.
l.
w.
schneider,
b.
r.
jr.
watts,
r.
m.
heckel,
p.
g.
lampson,
b.
w.
tajibnapis,
w.
d.
ruschitzka,
m.
fabry,
r.
s.
mamrak,
s.
a.
warren,
h.
s.
jr.
bird,
r.
s.
robson
j.
m.
peterson,
j.
l.
norman,
t.
a.
gries,
d.
gehani,
n.
smith,
j.
m.
smith,
d.
c.
p.
guttag,
j.
zloof,
m.
m.
de
jong,
s.
p.
ledgard,
h.
f.
taylor,
r.
w.
.n
ca770603
jb
december
29,
1977
1:28
am
.x
2960
5
2960
2960
5
2960
2960
5
2960
3049
5
2960
2956
6
2960
2958
6
2960
2957
6
2960
2960
6
2960
.i
2961
.t
experimental
investigations
of
the
utility
of
detailed
flowcharts
in
programming
.w
this
paper
describes
previous
research
on
flowcharts
and
a
series
of
controlled
experiments
to
test
the
utility
of
detailed
flowcharts
as
an
aid
to
program
composition,
comprehension,
debugging,
and
modification.
no
statistically
significant
difference
between
flowchart
and
nonflowchart
groups
has
been
shown,
thereby
calling
into
question
the
utility
of
detailed
flowcharting.
a
program
of
further
research
is
suggested.
.b
cacm
june,
1977
.a
shneiderman,
b.
mayer,
r.
mckay,
d.
heller,
p.
taulbee,
o.
e.
conte,
s.
d.
hunt,
j.
w.
szymanski,
t.
g.
milman,
y.
hanani,
m.
z.
shapiro,
m.
stillman,
n.
j.
berra,
p.
b.
baer,
j.
l.
schwab,
b.
morgan,
h.
l.
levin,
k.
d.
fishman,
g.
s.
holt,
r.
c.
wortman,
d.
b.
barnard,
d.
t.
cordy,
j.
r.
robinson,
l.
levitt,
k.
n.
thompson,
c.
d.
kung,
h.
t.
bandyopadhyay,
s.
k.
hollander,
c.r.
yao,
s.
b.
lucac,
h.
c.
jr.
sutton,
j.
a.
maruyama,
k.
smith,
s.
e.
findler,
n.
v.
tanimoto,
s.
l.
pavlidis,
t.
morris,
j.
h.
jr.
wegbreit,
b.
bertsch,
e.
bays,
c.
borovits,
i.
ein-dor,
p.
nolan,
r.
l.
hunt,
h.
b.
iii
szymanski,
t.
g.
ullman,
j.
d.
burton
w.
brown,
r.
m.
browne,
j.
c.
chandy,
k.
m.
lunde,
a.
yu,
c.
t.
salton,
g.
clapson,
p.
knott,
g.
d.
kotiah,
t.
c.
t.
steinberg,
d.
i.
bresenham,
j.
courtois,
p.
j.
.n
ca770205
jb
december
30,
1977
2:20
am
.x
2995
5
2995
2995
5
2995
2995
5
2995
.i
2996
.t
transient-free
working-set
statistics
.w
transient-free
average
working
set
size
and
transient-free
missing-page
rate
for
a
finite
sample
of
a
reference
string
are
defined.
use
of
these
statistics
is
appropriate
if
the
contents
of
the
working
set
at
the
start
of
the
recorded
string
are
unknown.
if
a
certain
stationarity
condition
holds,
these
statistics
provide
unbiased
estimates
of
expected
working-set
sizes,
missing-page
probabilities,
and
in
terreference
distance
probabilities.
two
other
pairs
of
estimators
are
shown
to
be
biased.
expressions
for
the
transient-free
statistics
are
obtained
in
terms
of
in
terval
statistics.
several
methods
of
computation
are
discussed,
the
usefulness
of
each
depending
on
length
of
the
sample,
number
of
distinct
references,
and
the
amount
of
main
storage
available
to
the
computer
performing
the
calculations.
in
particular,
methods
are
described
for
handling
long
strings
containing
many
distinct
page
names.
.b
cacm
february,
1977
.a
easton,
m.
c.
bennett,
b.
t.
preparata,
f.
p.
hong,
s.
j.
clark,
d.
w.
green,
c.
c.
muller,
m.
e.
batson,
a.
p.
brundage,
r.
e.
zobrist,
a.
l.
carlson,
f.
r.
jr.
babad,
j.
m.
austing,
r.
h.
barnes,
b.
h.
van
gelder,
a.
tanenbaum,
a.s.
franklin,
m.a.
graham,
g.s.
gupta,
r.k.
rabin,
m.o.
.n
ca780306
jb
march
28,
1978
1:02
pm
.x
3007
5
3007
3007
5
3007
3007
5
3007
.i
3008
.t
preserving
average
proximity
in
arrays
.w
programmers
and
data
structure
designers
are
often
forced
to
choose
between
alternative
structures.
in
storing
these
structures,
preserving
logical
adjacencies
or
"proximity"
is
usually
an
important
consideration.
the
combinatorial
problem
of
storing
arrays
as
various
kinds
of
list
structures
is
examined.
embeddings
of
graphs
are
used
to
model
the
loss
of
proximity
involved
in
such
storage
schemes,
and
an
elementary
proof
that
arrays
cannot
be
stored
as
linear
lists
with
bounded
loss
of
proximity
is
presented.
average
loss
of
proximity
is
then
considered,
and
it
is
shown
that
arrays
cannot
be
stored
as
linear
lists
with
only
bounded
loss
of
average
proximity,
but
can
be
so
stored
in
binary
trees.
the
former
result
implies,
for
instance,
that
row
major
order
is
an
asymptotically
optimal
storage
strategy
for
arrays.
.b
cacm
march,
1978
.a
demillo,
r.a.
eisenstat,
s.c.
lipton,
r.j.
kosaraju,
s.r.
anderson,
r.e.
dutton,
w.h.
kraemer,
k.l.
lucas,
h.c.jr.
schachter,
b.j.
rosenfeld,
a.
manna,
z.
waldinger,
r.
herman,
g.t.
lent,
a.
lutz,
p.h.
stewart,
w.j.
held,
g.
stonebraker,
m.
kou,
l.t.
stockmeyer,
l.j.
wong,
c.k.
watson,
t.j.
austing,
r.h.
.n
ca780204
jb
march
28,
1978
4:19
pm
.x
3019
5
3019
3019
5
3019
3019
5
3019
.i
3020
.t
systematic
recursion
removal
.w
the
recursion
removal
algorithm
presented
by
strong
and
walker
is
amplified
and
applied
to
a
relatively
complex
pl/i
program.
the
aim
is
to
demonstrate
systematic
recursion-removal
techniques
on
something
more
complex
than
knuth's
"sturdy
toddler"
and
to
obtain
measurements
of
the
cost
of
procedure
linkage
in
pl/i
and
the
savings
achievable
via
procedure
integration
in
the
presence
of
recursion.
first,
the
paper
describes
the
recursion-removal
process
and
the
example
on
which
it
will
be
illustrated.
recursion
removal
is
then
applied
to
the
two
major
parts
of
this
example
and
the
final
result
of
the
process
is
displayed.
our
performance
comparison
results
are
presented
and
our
conclusions
are
briefly
discussed.
.b
cacm
february,
1978
.a
auslander,
m.a.
strong,
h.r.
rivest,
r.l.
shamir,
a.
adleman,
l.
mamrak,
s.a.
montanelli,
r.g.jr.
case,
r.p.
padges,
a.
russell,
r.m.
bell,
c.g.
kotok,
a.
hastings,
t.n.
hill,
r.
borgherson,
b.r.
hanson,
m.l.
hartley,
p.a.
ibbett,
r.n.
capon,
p.c.
lavington,
s.h.
fuller,s.h.
.n
ca780101
jb
march
28,
1978
5:52
pm
.x
3029
5
3029
3029
5
3029
3029
5
3029
.i
3030
.t
an
example
of
hierarchical
design
and
proof
.w
hierarchical
programming
is
being
increasingly
recognized
as
helpful
in
the
construction
of
large
programs.
users
of
hierarchical
techniques
claim
or
predict
substantial
increases
in
productivity
and
in
the
reliability
of
the
programs
produced.
in
this
paper
we
describe
a
formal
method
for
hierarchical
program
specification,
implementation,
and
proof.
we
apply
this
method
to
a
significant
list
processing
problem
and
also
discuss
a
number
of
extensions
to
current
programming
languages
that
ease
hierarchical
program
design
and
proof.
.b
cacm
december,
1978
.a
spitzen,
j.m.
levitt,
k.n.
robinson,
l.
guttag,
j.v.
horowitz,
e.
musser,
d.r.
dalal,
y.k.
metcalfe,
r.m.
martelli,
a.
montanari,
u.
ibramsha,
m.
rajaraman,
v.
wetherbe,
j.c.
dock,
v.t.
peterson,
j.l.
bitner,
j.r.
howard,
j.h.
gries,
d.
misra,
j.
needham,
r.m.
schroeder,
m.d.
dijkstra,
e.w.
lamport,
l.
martin,
a.j.
scholten,
c.s.
steffens,
e.f.m.
freuder,
e.c.
sheil,
b.a.
luccio,
f.
pagli,
l.
hansen,
p.
friedman,
d.p.
wise,
d.s.
ripley,
d.g.
tadikamalla,
p.r.
horn,
b.k.p.
bachman,
b.l.
kumar,
b.
davidson,
e.s.
wendorf,
j.w.
lyons,
n.r.
franta,
w.r.
maly,
k.
easton,
m.c.
fagin,
r.
lyon,
g.
sedgewick,
r.
mcmaster,
c.l.
morris,
r.
chang,
s.k.
wong,
y.w.
shneiderman,
b.
towsley,
d.
chandy,
k.m.
browne,
j.c.
brainerd,
w.
tenenbaum,
a.
ward,
s.a.
maly,
k.
ulrich,
e.g.
ottmann,
t.t.
six,
h.w.
wood,
d.
myers,
g.j.
denning,
p.j.
slutz,
d.r.
popek,
g.j..
farber,
d.a.
barth,
j.m.
schwetman,
h.d.
harris,
r.a.
zund,
j.d.
brice,
r.s.
browne,
j.c.
hoare,
c.a.r.
morris,
f.l.
hirschberg,
d.s.
kling,
r.
backus,
j.
chattergy,
r.
pooch,
u.w.
shostak,
r.e.
samet,
h.
baker,
h.g.
jr.
lamport,
l.
halatsis,
c.
philokyprou,
g.
perl,
y.
itai,
a.
avni,
h.
chin,
f.y.
fredman,
m.l.
weide,
b.
waltz,
d.l.
teory,
t.j.
gelenbe,
e.
derochette,
d.
kling,
r.
chrysler,
e.
lientz,
b.p.
swanson,
e.b.
tompkins,
g.e.
mickunas,
m.d.
modry,
j.a.
cohen,
j.
roth,
m.s.
driscoll,
j.r.
lien,
y.e.
zweben,
s.h.
mcdonald,
m.a.
sites,
r.l.
tadikamalla,
p.r.
fleisher,
j.m.
meyer,
r.r.
hayes-roth,
f.
mcdermott,
j.
hanson,
d.
griswold,
r.e.
karr,
m.
loveman
iii,
d.b.
low,
j.r.
geller,
m.
jones,
a.k.
liskov,b.h.
clark,
d.w.
cheng,
r.c.h.
even,
s.
rodeh,
m.
vuillemin,
j.
szymanski,
t.g.
merkle,
r.c.
baker,
h.g.
lew,
a.
heckel,
p.
payne,
w.h.
mcmillen,
k.l.
boyse,
j.w.
colton,
k.w.
bongiovanni,
g.c.
luccio,
f.
sauer,
c.h.
chandy,
k.m.
banatre,
j.p.
routeau,
j.p.
trilling,
l.
arsac,
j.j.
taulbee,
o.e.
conte,
s.d.
fairley,
r.e.
gull,w.e.
jenkins,
m.a.
morel,
e.
renvoise,
c.
anderson,
m.g.
cheriton,
d.r.
malcolm,
m.a.
melen,
l.a.
sager,
g.r.
reed,
d.p.
kanodia,
r.k.
mendelson,
h.
pliskin,
j.s.
yechiali,
u.
austing,
r.h.
barnes,
b.h.
bonnette,
d.t.
engel,
g.l.
stokes,
g.
edgar,
a.d.
lee,
s.c.
slagle,
j.
deliyanni,
a.
kowalski,
r.a.
motzkin,
d.
lesk,
a.m.
cale,
e.g.
gremillion,
l.l.
mckenney,
j.l.
bucci,
g.
streeter,
d.n.
hanson,
r.j.
wisniewski,
j.a.
brelaz,
d.
de
millo,
r.a.
lipton,
r.j.
perlis,
a.j.
chang,
e.
roberts,
r.
sterling,
t.d.
reynolds,
j.c.
manthey,
m.j.
lemos,
r.s.
busenberg,
s.n.
tam,
w.c.
alter,
s.
feldman,
j.a.
shapira,
r.
freeman,
h.
winograd,
t.
preparata,
f.p.
fischer,
p.c.
probert,
r.l.
hine,
j.h.
mitrani,
i.
tsur,
s.
kowalski,
r.
floyd,
r.w.
.n
ca790801
db
january
4,
1980
11:44
am
.x
1323
4
3155
1358
4
3155
1380
4
3155
1665
4
3155
1781
4
3155
1787
4
3155
1989
4
3155
2112
4
3155
2319
4
3155
2480
4
3155
2480
4
3155
2534
4
3155
2541
4
3155
2594
4
3155
2698
4
3155
2709
4
3155
2733
4
3155
2738
4
3155
2820
4
3155
2867
4
3155
2939
4
3155
2972
4
3155
3004
4
3155
3030
4
3155
3073
4
3155
3148
4
3155
3150
4
3155
3155
4
3155
3155
4
3155
3155
4
3155
3155
4
3155
2204
5
3155
2247
5
3155
3073
5
3155
3155
5
3155
3155
5
3155
3155
5
3155
799
5
3155
.i
3156
.t
computing
connected
components
on
parallel
computers
.w
we
present
a
parallel
algorithm
which
uses
n2
processors
to
find
the
connected
components
of
an
undirected
graph
with
n
vertices
in
time
o(log2n).
an
o(log2n)
time
bound
also
can
be
achieved
using
only
n$n/$log2n))
processors.
the
algorithm
can
be
used
to
find
the
transitive
closure
of
a
symmetric
boolean
matrix.
we
assume
that
the
processors
have
access
to
a
common
memory.
simultaneous
access
to
the
same
location
is
permitted
for
fetch
instructions
but
not
for
store
instructions.
.b
cacm
august,
1979
.a
hirschberg,
d.s.
chandra,
a.k.
sarwate,
d.v.
dershowitz,
n.
manna,
z.
denning,
d.e.
nelson,
l.s.
feldman,
j.a.
sutherland,
w.r.
.n
ca790901
db
january
14,
1980
10:05
am
.x
3160
5
3160
3160
5
3160
3160
5
3160
.i
3161
.t
an
acm
executive
committee
position
on
the
crisis
in
experimental
computer
science
.b
cacm
september,
1979
.a
mccracken,
d.d.,
ccp
denning,
p.j.
brandin,
d.h.
.n
ca790902
db
january
14,
1980
10:19
am
.x
3161
5
3161
3161
5
3161
3161
5
3161
.i
3162
.t
on
improving
the
worst
case
running
time
of
the
boyer-moore
string
matching
algorithm
.w
it
is
shown
how
to
modify
the
boyer-moore
string
matching
algorithm
so
that
its
worst
case
running
time
is
linear
even
when
multiple
occurrences
of
the
pattern
are
present
in
the
text.
.b
cacm
september,
1979
.a
galil,
z.
raiha,k.j.
zweben,
s.h.
hansen,
w.j.
nagy,
g.
wagle,
s.g.
chan,
t.f.
lewis,
j.g.
west,
d.h.d.
laird,
p.d.
gudes,
e.
hoffman,
a.
lamport,
l.
klint,
p.
lozano-perez,
t.
wesley,
m.a.
mayer,
r.e.
morris,
r.
thompson,
k.
peleg,
s.
rosenfeld,
a.
tarjan,
r.e.
yao,
a.c.c.
shamir,
a.
kling,
r.
.n
ca791201
db
february
21,
1980
5:02
pm
.x
3142
4
3178
3179
4
3178
3178
4
3178
3178
4
3178
3178
4
3178
3178
4
3178
3178
4
3178
3178
4
3178
3178
4
3178
3182
4
3178
3183
4
3178
3076
5
3178
3140
5
3178
3142
5
3178
3179
5
3178
3178
5
3178
3178
5
3178
3178
5
3178
3182
5
3178
3180
5
3178
3181
5
3178
.i
3179
.t
overview
of
the
eft
symposium
.w
it
is
increasingly
recognized
that
large-scale
technologies
such
as
eft
have
the
potential
for
aiding
in
the
solution
of
current
societal
problems.
yet,
these
technologies
also
generate
problems.
this
symposium
presents
selected
papers
from
a
conference
that
sought
to
discover
what
is
currently
known
about
eft
impacts
in
society
and
what
research
is
needed
in
the
future.
.b
cacm
december,
1979
.a
kraemer,
k.l.
colton,
k.w.
lipis,
a.h.
long,
r.h.
parker,
d.b.
kraemer,
k.l.
colton,
k.w.
nuar,
p.
.n
ca630117
es
march
17,
1982
10:10
am
.x
1781
4
3184
1828
4
3184
1854
4
3184
1877
4
3184
1960
4
3184
2150
4
3184
2150
4
3184
2228
4
3184
2256
4
3184
2317
4
3184
2317
4
3184
2319
4
3184
2377
4
3184
2342
4
3184
2342
4
3184
2376
4
3184
2376
4
3184
2379
4
3184
2424
4
3184
2482
4
3184
2618
4
3184
2618
4
3184
2632
4
3184
2704
4
3184
2723
4
3184
2738
4
3184
2740
4
3184
2741
4
3184
2867
4
3184
3184
4
3184
3184
4
3184
3184
4
3184
949
5
3184
989
5
3184
1086
5
3184
1132
5
3184
1198
5
3184
1234
5
3184
1263
5
3184
1265
5
3184
1270
5
3184
1323
5
3184
1358
5
3184
1379
5
3184
1380
5
3184
1453
5
3184
1464
5
3184
1484
5
3184
1491
5
3184
1498
5
3184
1613
5
3184
1614
5
3184
1749
5
3184
1781
5
3184
1825
5
3184
1860
5
3184
2083
5
3184
2178
5
3184
2179
5
3184
2252
5
3184
2325
5
3184
2341
5
3184
2546
5
3184
2645
5
3184
2652
5
3184
2684
5
3184
2842
5
3184
2929
5
3184
2934
5
3184
557
5
3184
3069
5
3184
3184
5
3184
3184
5
3184
3184
5
3184
669
5
3184
679
5
3184
691
5
3184
761
5
3184
1
6
3184
823
6
3184
123
6
3184
145
6
3184
196
6
3184
196
6
3184
196
6
3184
196
6
3184
196
6
3184
919
6
3184
944
6
3184
947
6
3184
987
6
3184
988
6
3184
989
6
3184
989
6
3184
990
6
3184
990
6
3184
1007
6
3184
1046
6
3184
1086
6
3184
1131
6
3184
1134
6
3184
1137
6
3184
1139
6
3184
1140
6
3184
1140
6
3184
1149
6
3184
1198
6
3184
1215
6
3184
1215
6
3184
1223
6
3184
1263
6
3184
1265
6
3184
1303
6
3184
1303
6
3184
1303
6
3184
1303
6
3184
1323
6
3184
1323
6
3184
1323
6
3184
1358
6
3184
1358
6
3184
1366
6
3184
1366
6
3184
1389
6
3184
1421
6
3184
1421
6
3184
1421
6
3184
1453
6
3184
1460
6
3184
1460
6
3184
1462
6
3184
1463
6
3184
1467
6
3184
1468
6
3184
1468
6
3184
1466
6
3184
1477
6
3184
1477
6
3184
1477
6
3184
1477
6
3184
1491
6
3184
1491
6
3184
1491
6
3184
1496
6
3184
1496
6
3184
1496
6
3184
1531
6
3184
1535
6
3184
1565
6
3184
1601
6
3184
1602
6
3184
1613
6
3184
1614
6
3184
1626
6
3184
1626
6
3184
1641
6
3184
1641
6
3184
1781
6
3184
1785
6
3184
1786
6
3184
1787
6
3184
1788
6
3184
205
6
3184
205
6
3184
1825
6
3184
210
6
3184
210
6
3184
224
6
3184
249
6
3184
267
6
3184
288
6
3184
288
6
3184
316
6
3184
321
6
3184
378
6
3184
381
6
3184
385
6
3184
398
6
3184
2015
6
3184
2059
6
3184
2060
6
3184
2110
6
3184
11
6
3184
2126
6
3184
2127
6
3184
2148
6
3184
2155
6
3184
2192
6
3184
21
6
3184
400
6
3184
402
6
3184
404
6
3184
404
6
3184
404
6
3184
404
6
3184
404
6
3184
407
6
3184
410
6
3184
410
6
3184
437
6
3184
463
6
3184
464
6
3184
464
6
3184
483
6
3184
483
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3188
6
3184
584
6
3184
584
6
3184
600
6
3184
631
6
3184
635
6
3184
669
6
3184
680
6
3184
691
6
3184
729
6
3184
729
6
3184
729
6
3184
731
6
3184
761
6
3184
763
6
3184
799
6
3184
799
6
3184
799
6
3184
799
6
3184
.i
3185
.t
the
humble
programmer
.w
we
shall
do
a
much
better
programming
job,
provided
that
we
approach
the
task
with
a
full
appreciation
if
its
tremendous
difficulty,
provided
that
we
stick
to
modest
and
elegant
programming
languages,
provided
that
we
respect
the
intrinsic
limitations
of
the
human
mind
and
approach
the
task
as
very
humble
programmers.
.b
cacm
october,
1972
.a
dijkstra,
e.
w.
.n
ca721010
es
march
18,
1982
10:00
am
.x
249
4
3185
1139
4
3185
438
4
3185
3185
4
3185
3185
4
3185
303
5
3185
2705
5
3185
438
5
3185
3101
5
3185
3185
5
3185
3185
5
3185
3185
5
3185
1908
6
3185
2138
6
3185
2193
6
3185
2438
6
3185
3185
6
3185
3185
6
3185
.i
3186
.t
go
to
statement
considerd
harmful
.b
cacm
march,
1968
.a
dijkstra,
e.
w.
blair,
c.r.
.n
ca660516
es
march
17,
1982
10:10
am
.x
1919
5
3187
2679
5
3187
3187
5
3187
3187
5
3187
3187
5
3187
864
6
3187
970
6
3187
1175
6
3187
1175
6
3187
1190
6
3187
1228
6
3187
1969
6
3187
1997
6
3187
308
6
3187
308
6
3187
309
6
3187
2042
6
3187
74
6
3187
3187
6
3187
3187
6
3187
507
6
3187
716
6
3187
783
6
3187
.i
3188
.t
semiotics
and
programming
languages
.w
i
have
based
my
paper
on
semiotics
and
its
three
dimension.
i
should
insert
at
this
point
that
language
has
many
aspects
and
that
pragmatics,
semantics
and
syntactics
do
not
necessary
cover
all
of
them.
one
can,
however,
project
most
aspects
into
the
three
semiotic
dimension
and
there
seems
to
be
a
strong
tendency
to
do
so
today.
.b
cacm
march,
1966
.a
zemanek,
h.
.n
ca660319
es
march
17,
1982
10:10
am
.x
2087
4
3188
2189
4
3188
3188
4
3188
3188
4
3188
1594
5
3188
1781
5
3188
3188
5
3188
3188
5
3188
3188
5
3188
612
5
3188
123
6
3188
196
6
3188
919
6
3188
990
6
3188
1007
6
3188
1046
6
3188
1131
6
3188
1139
6
3188
1140
6
3188
1149
6
3188
1198
6
3188
1215
6
3188
1223
6
3188
1265
6
3188
1303
6
3188
1323
6
3188
1358
6
3188
1366
6
3188
1421
6
3188
1460
6
3188
1462
6
3188
1463
6
3188
1467
6
3188
1468
6
3188
1477
6
3188
1491
6
3188
1496
6
3188
1531
6
3188
1535
6
3188
1565
6
3188
1601
6
3188
1602
6
3188
1613
6
3188
1614
6
3188
1626
6
3188
1641
6
3188
1787
6
3188
1788
6
3188
205
6
3188
224
6
3188
249
6
3188
288
6
3188
316
6
3188
381
6
3188
398
6
3188
11
6
3188
404
6
3188
410
6
3188
463
6
3188
464
6
3188
483
6
3188
3184
6
3188
3188
6
3188
584
6
3188
600
6
3188
680
6
3188
691
6
3188
763
6
3188
799
6
3188
.i
3189
.t
an
algebraic
compiler
for
the
fortran
assembly
program
.w
an
algebraic
compiler
has
been
written
which
may
be
added
to
the
fortran
assembly
program.
this
compiler
will
expand
all
algebraic
statements
with
the
following
operations:
addition,
subtraction,
multiplication
and
division.
it
will
compile
multi-level
expressions
in
floating-point
arithmetic
(this
is
easily
be
revised
to
fixed-point).
.b
cacm
november,
1962
.a
stiegler,
a.
d.
.n
ca621124
es
march
17,
1982
10:10
am
.x
1788
5
3189
3189
5
3189
3189
5
3189
3189
5
3189
1006
6
3189
1007
6
3189
205
6
3189
3189
6
3189
.i
3190
.t
correction
to
economies
of
scale
and
the
ibm
system/360
.w
on
page
439,
a
"typical"
instruction
mix
id
discussed
and
the
timing
computed
as
outlined
in
that
page.
through
an
undetected
programming
error,
the
times
and
the
resulting
regression
equation
are
slightly
in
error.
.b
cacm
february,
1967
.a
solomon,
m.b.
.n
ca670214
es
march
17,
1982
10:10
am
.x
2387
5
3190
3190
5
3190
3190
5
3190
3190
5
3190
1417
6
3190
3190
6
3190
.i
3191
.t
generating
permutations
by
nested
cycling
.w
the
purpose
of
this
letter
is
two_fold:
first
to
give
due
credit
to
the
tompkins-paige
algorithm,
and
second
to
clarify
a
comment
by
hill,
cr
review
13891
on
"programs
for
permutations".
.b
cacm
june,
1968
.a
langdon,
glen
g.
vanderburgh,
a.
.n
ca580702
es
march
17,
1982
10:10
am
.x
1083
5
3192
3192
5
3192
3192
5
3192
3192
5
3192
407
6
3192
3192
6
3192
3193
6
3192
730
6
3192
.i
3193
.t
.w
work
is
in
progress
on
a
formula
coding
technique
allowing
direct
entry
into
the
computer
of
formulae
typed
on
an
84
character
flexo-writer.
this
flexo-writer
will
be
modified
for
automatic
half-line
advance
and
retract,
without
carriage
return,
to
permit
completely
general
sub
and
superscripting.
.b
cacm
july,
1958
.n
ca580703
es
march
17,
1982
10:10
am
.x
3193
4
3193
796
4
3193
1083
5
3193
491
5
3193
3193
5
3193
3193
5
3193
3193
5
3193
407
6
3193
3192
6
3193
3193
6
3193
730
6
3193
.i
3194
.t
a
non-heuristic
program
for
proving
elementary
logical
theorems
.w
the
paper
discusses
problems
involved
in
designing
a
device
capable
of
distinguishing
among
speech
events
that
are
normally
recognized
as
different
by
native
speakers
of
a
particular
language.
parallels
between
these
problems
and
those
of
chemical
analysis
are
pointed
out.
.b
cacm
january,
1959
.a
dunham,
b.
fridshal,
r.
sward,
g.
l.
.n
ca590102
es
march
17,
1982
10:10
am
.x
204
5
3194
3194
5
3194
3194
5
3194
3194
5
3194
3194
6
3194
.i
3195
.t
reiteration
of
acm
policy
toward
standardization
.w
the
periodic
change
in
officers,
chairman
and
editors
which
usually
follows
as
election
occasionally
results
in
a
change
in
policy.
in
the
case
of
this
department
there
is
no
radical
change,
but
this
is
nevertheless
the
proper
time
to
reiterate
ans
underline
acm's
policy
with
respect
to
standardization
in
the
computer
area.
.b
cacm
november,
1962
.a
gorn,
s.
.n
ca621123
es
march
17,
1982
10:10
am
.x
3195
5
3195
3195
5
3195
3195
5
3195
690
5
3195
890
6
3195
929
6
3195
3195
6
3195
.i
3196
.t
the
reactive
typewriter
program
.w
84-character
keyboard
including
alphabetical
upper
and
lower
case
for
good
readability.
if
the
machine
is
restricted
to
only
a
single
case,
the
lower
case
is
preferred.
the
reactive
typewriter
should
be
portable.
the
reactive
typewriter
should
operate
over
any
commercially
used,
dial-type
telephone
(voice)
or
telegraph
(telex)
line
or
over
leased
(nondial)
telegraph
lines
interchangeably.
.b
cacm
january,
1963
.a
mooers,
c.
n.
.n
ca630118
es
march
17,
1982
10:10
am
.x
1071
5
3196
3196
5
3196
3196
5
3196
3196
5
3196
3196
6
3196
.i
3197
.t
structures
of
standards-processing
organizations
in
the
computer
area
.w
in
line
with
the
acm's
policy
statement
[comm.
acm
5
(nov.
1962),
547-549],
the
following
organizational
descriptions
have
been
provided
in
order
to
describe
standardization
activities
pertinent
to
computers
and
information
processing.
.b
cacm
june,
1966
.a
gorn,
s.
bemer,
r.
w.
green,
j.
.n
ca630626
es
march
17,
1982
10:10
am
.x
3197
5
3197
3197
5
3197
3197
5
3197
689
5
3197
217
6
3197
323
6
3197
3197
6
3197
.i
3198
.t
microprogramming,
emulators
and
programming
languages
.w
the
problem
we
have
been
concerned
with
is
that
of
converting
language
to
action
-
or
intellectual
energy
to
mechanical
energy.
the
medium
that
we
use
for
this
purpose
is
language
and
therefore
we
are
preoccupied
with
the
subject
of
language.
in
the
areas
of
language
investigation
we
have
concentrated
first
on
formalizing
syntax
and
then
on
semantics.
.b
cacm
march,
1966
.a
greem,
j.
.n
ca660318
es
march
17,
1982
10:10
am
.x
1542
5
3198
3198
5
3198
3198
5
3198
3198
5
3198
1491
6
3198
3198
6
3198
.i
3199
.t
algem
-
an
algebraic
manipulator
.w
algem
is
a
package
of
subprograms
written
in
slip,
fortran
iv
and
map
7094
ii
to
manipulate
algebraic
expressions.
algem's
basic
algebraic
operations
are
additions,
subtractions,
multiplications,
division
and
exponentiation.
it
is
capable
of
handling
any
number
of
single
letter
variables,
variable
exponents,
and
of
finding
the
highest
common
factor
of
two
polynomials.
also
included
are
such
functions
as
substitution,
differentiation,
determining
coefficients
of
specified
variables,
solving
a
linear
equation,
basic
i/o
routines
plus
other
special
purpose
and
arithmetic
routines.
the
major
innovation
of
algem
over
other
manipulators
is
the
assignment
of
types
to
all
expressions
and
the
use
of
a
standard
ordering
procedure.
.b
cacm
august,
1966
.a
gotlieb,
c.
c.
novak,
r.
j.
.n
ca660813
es
march
17,
1982
10:10
am
.x
1396
5
3199
3199
5
3199
3199
5
3199
3199
5
3199
964
6
3199
1028
6
3199
1029
6
3199
1083
6
3199
1132
6
3199
1214
6
3199
1278
6
3199
1334
6
3199
1365
6
3199
1386
6
3199
1387
6
3199
1388
6
3199
1392
6
3199
1393
6
3199
1394
6
3199
1395
6
3199
1396
6
3199
1397
6
3199
1496
6
3199
284
6
3199
407
6
3199
3199
6
3199
3200
6
3199
3201
6
3199
3202
6
3199
3203
6
3199
3204
6
3199
561
6
3199
730
6
3199
.i
3200
.t
a
formac
program
for
the
solution
of
linear
boundary
and
initial
value
problems
.w
a
computer
program
is
described
which
has
been
developed
for
obtaining
approximate
solutions
to
linear
initial
and
boundary-value
problems
involving
differential
equations.
for
each
problem,
input
to
the
program
includes:
1.
the
equations
(in
symbolic
form)
to
be
satisfied
-
the
differential
equations,
equations
describing
auxiliary
conditions
such
as
boundary
conditions,
etc.
2.
a
numerical
description
of
the
regions
in
which
each
of
the
equations
are
to
be
satisfied.
3.
sets
of
functions
(in
symbolic
form)
to
be
used
in
linear
combinations
to
approximate
the
solution
functions.
give
the
above
input,
the
program
generates
an
approximation
to
the
solutions
of
the
specified
problemm
in
terms
of
the
specified
functions
which
is
optimum
in
the
least-squares
sense.
.b
cacm
august,
1966
.a
cuthill,
e.
.n
ca660814
es
march
17,
1982
10:10
am
.x
1396
5
3200
3200
5
3200
3200
5
3200
3200
5
3200
964
6
3200
1028
6
3200
1029
6
3200
1083
6
3200
1132
6
3200
1214
6
3200
1278
6
3200
1334
6
3200
1365
6
3200
1386
6
3200
1387
6
3200
1388
6
3200
1392
6
3200
1393
6
3200
1394
6
3200
1395
6
3200
1396
6
3200
1397
6
3200
1496
6
3200
284
6
3200
407
6
3200
3199
6
3200
3200
6
3200
3201
6
3200
3202
6
3200
3203
6
3200
3204
6
3200
561
6
3200
730
6
3200
.i
3201
.t
symbolic
manipulation
of
poisson
series
.w
poisson
series
of
three
variables
are
manageable
symbolically
through
as
a
set
of
formal
subroutines
written
partially
in
the
ibm
7094
machine
language,
but
to
be
called
in
the
fortran
language
for
use
in
fortran
programs.
an
effort
has
been
made
to
supply
those
operations
which
are
most
required
by
celestial
mechanics.
the
routines
are
entirely
self-contained
subroutines
and
require
only
standard
fortran
input/output
units
5
and
6;
they
are
design
to
avoid
waste
and
overflow
of
core
storage
space.
.b
cacm
august,
1966
.a
danby,
j.
deprit,
a.
rom,
a.
.n
ca660815
es
march
17,
1982
10:10
am
.x
1396
5
3201
3201
5
3201
3201
5
3201
3201
5
3201
964
6
3201
1028
6
3201
1029
6
3201
1083
6
3201
1132
6
3201
1214
6
3201
1278
6
3201
1334
6
3201
1365
6
3201
1386
6
3201
1387
6
3201
1388
6
3201
1392
6
3201
1393
6
3201
1394
6
3201
1395
6
3201
1396
6
3201
1397
6
3201
1496
6
3201
284
6
3201
407
6
3201
3199
6
3201
3200
6
3201
3201
6
3201
3202
6
3201
3203
6
3201
3204
6
3201
561
6
3201
730
6
3201
.i
3202
.t
manip:
a
computer
system
for
algebra
and
analytic
differentiation
.w
a
mathematical
expression
to
be
operated
upon
is
written
in
fortran-like
notation
and
stored
in
the
computer
as
a
string
of
bcd
characters
with
all
blanks
removed.
it
may
be
as
complicated
as
desired
(parentheses
nested
without
restriction,
etc.)
so
long
as
the
entire
expression
(or
any
subsequent
form)
does
not
exceed
5000
characters.
the
problemm
of
performing
algebraic
operations
and
obtaining
analytic
derivatives
was
translated
into
that
of
identifying
and
manipulating
character
sequences.
programs
which
resulted
were
written
in
fortran
iv
for
a
cdc
3600
and
are
discussed
in
detail.
.b
cacm
august,
1966
.a
bender,
b.
.n
ca660816
es
march
17,
1982
10:10
am
.x
1396
5
3202
3202
5
3202
3202
5
3202
3202
5
3202
964
6
3202
1028
6
3202
1029
6
3202
1083
6
3202
1132
6
3202
1214
6
3202
1278
6
3202
1334
6
3202
1365
6
3202
1386
6
3202
1387
6
3202
1388
6
3202
1392
6
3202
1393
6
3202
1394
6
3202
1395
6
3202
1396
6
3202
1397
6
3202
1496
6
3202
284
6
3202
407
6
3202
3199
6
3202
3200
6
3202
3201
6
3202
3202
6
3202
3203
6
3202
3204
6
3202
561
6
3202
730
6
3202
.i
3203
.t
grad
assistant
-
a
program
for
symbolic
algebraic
manipulation
and
differentiation
.w
the
general
recursive
algebra
and
differentiation
assistant
(grad
assistant)
now
under
development
is
a
set
of
lisp
functions
which
symbolically
manipulate
abd
differentiate
algebraic
expressions.
it
is
designed
for
use
with
problemms
in
which
a
large
amount
of
routine
manipulation
is
to
be
done
by
a
program
without
human
intervention.
thus,
grad
must
recognize
necessary
simplifications
without
external
guidance.
while
some
complicated
expressions
(notably
ones
involving
nested
radicals
and
trigonometric
functions)
do
not
yield
completely
to
the
present
version,
it
has
proved
quite
useful
indeed.
.b
cacm
august,
1966
.a
fletcher,
j.
g.
.n
ca660817
es
march
17,
1982
10:10
am
.x
1396
5
3203
3203
5
3203
3203
5
3203
3203
5
3203
964
6
3203
1028
6
3203
1029
6
3203
1083
6
3203
1132
6
3203
1214
6
3203
1278
6
3203
1334
6
3203
1365
6
3203
1386
6
3203
1387
6
3203
1388
6
3203
1392
6
3203
1393
6
3203
1394
6
3203
1395
6
3203
1396
6
3203
1397
6
3203
1496
6
3203
284
6
3203
407
6
3203
3199
6
3203
3200
6
3203
3201
6
3203
3202
6
3203
3203
6
3203
3204
6
3203
561
6
3203
730
6
3203
.i
3204
.t
an
on-line
program
for
non-numerical
algebra
.w
the
goal
of
this
program
is
to
make
a
step
toward
te
design
of
an
automated
mathematical
assistant.
some
requirements
for
such
a
program
are:
it
must
be
easy
to
access,
and
that
the
result
must
be
obtained
in
a
reasonably
short
time.
accordingly
the
program
is
written
for
a
time-shared
computer.
the
q-32
computer
as
system
development
corporation,
santa
monica,
california,
was
chosen
because
it
also
had
a
lisp
1.5
compiler.
programming
and
debugging
was
done
from
a
remote
teletype
console
at
stanford
university.
.b
cacm
august,
1966
.a
korsvold,
k.
.n
ca660818
es
march
17,
1982
10:10
am
.x
1396
5
3204
3204
5
3204
3204
5
3204
3204
5
3204
964
6
3204
1028
6
3204
1029
6
3204
1083
6
3204
1132
6
3204
1214
6
3204
1278
6
3204
1334
6
3204
1365
6
3204
1386
6
3204
1387
6
3204
1388
6
3204
1392
6
3204
1393
6
3204
1394
6
3204
1395
6
3204
1396
6
3204
1397
6
3204
1496
6
3204
284
6
3204
407
6
3204
3199
6
3204
3200
6
3204
3201
6
3204
3202
6
3204
3203
6
3204
3204
6
3204
561
6
3204
730
6
3204
